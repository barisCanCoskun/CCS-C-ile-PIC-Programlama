CCS PCM C Compiler, Version 5.084d, 1               31-May-19 18:16
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   Y:\ccs c projects\App13_seni_seviyorum\seni_seviyorum.lst

               ROM used:   387 words (5%)
                           Largest free fragment is 2048
               RAM used:   61 (17%) at main() level
                           67 (18%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   063
0003:  NOP
....................  
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
*
001C:  BCF    0A.0
001D:  BCF    0A.1
001E:  BCF    0A.2
001F:  ADDWF  02,F
0020:  GOTO   00A
0021:  GOTO   00D
0022:  GOTO   010
0023:  GOTO   013
0024:  GOTO   016
....................  
.................... #list 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 4000000) 
0025:  MOVLW  5D
0026:  MOVWF  04
0027:  BCF    03.7
0028:  MOVF   00,W
0029:  BTFSC  03.2
002A:  GOTO   039
002B:  MOVLW  01
002C:  MOVWF  78
002D:  CLRF   77
002E:  DECFSZ 77,F
002F:  GOTO   02E
0030:  DECFSZ 78,F
0031:  GOTO   02D
0032:  MOVLW  4A
0033:  MOVWF  77
0034:  DECFSZ 77,F
0035:  GOTO   034
0036:  GOTO   037
0037:  DECFSZ 00,F
0038:  GOTO   02B
0039:  RETURN
....................  
.................... #use fast_io(b) 
.................... #use fast_io(c) 
....................  
.................... int S[] = {0xF9, 0xC9, 0xC9, 0xC9, 0x4F}; 
*
006C:  MOVLW  F9
006D:  BCF    03.5
006E:  MOVWF  20
006F:  MOVLW  C9
0070:  MOVWF  21
0071:  MOVWF  22
0072:  MOVWF  23
0073:  MOVLW  4F
0074:  MOVWF  24
.................... int E[] = {0xFF, 0xC9, 0xC9, 0xC9, 0x41}; 
0075:  MOVLW  FF
0076:  MOVWF  25
0077:  MOVLW  C9
0078:  MOVWF  26
0079:  MOVWF  27
007A:  MOVWF  28
007B:  MOVLW  41
007C:  MOVWF  29
.................... int N[] = {0x1F, 0x08, 0x04, 0x02, 0x1F}; 
007D:  MOVLW  1F
007E:  MOVWF  2A
007F:  MOVLW  08
0080:  MOVWF  2B
0081:  MOVLW  04
0082:  MOVWF  2C
0083:  MOVLW  02
0084:  MOVWF  2D
0085:  MOVLW  1F
0086:  MOVWF  2E
.................... int i[] = {0x00, 0x00, 0x5F, 0x00, 0x00}; 
0087:  CLRF   2F
0088:  CLRF   30
0089:  MOVLW  5F
008A:  MOVWF  31
008B:  CLRF   32
008C:  CLRF   33
.................... int V[] = {0x1C, 0x02, 0x01, 0x02, 0x1C}; 
008D:  MOVLW  1C
008E:  MOVWF  34
008F:  MOVLW  02
0090:  MOVWF  35
0091:  MOVLW  01
0092:  MOVWF  36
0093:  MOVLW  02
0094:  MOVWF  37
0095:  MOVLW  1C
0096:  MOVWF  38
.................... int Y[] = {0x40, 0x20, 0x1F, 0x20, 0x40}; 
0097:  MOVLW  40
0098:  MOVWF  39
0099:  MOVLW  20
009A:  MOVWF  3A
009B:  MOVLW  1F
009C:  MOVWF  3B
009D:  MOVLW  20
009E:  MOVWF  3C
009F:  MOVLW  40
00A0:  MOVWF  3D
.................... int O[] = {0xFF, 0x41, 0x41, 0x41, 0xFF}; 
00A1:  MOVLW  FF
00A2:  MOVWF  3E
00A3:  MOVLW  41
00A4:  MOVWF  3F
00A5:  MOVWF  40
00A6:  MOVWF  41
00A7:  MOVLW  FF
00A8:  MOVWF  42
.................... int R[] = {0xFF, 0x4C, 0x4A, 0x79, 0x00}; 
00A9:  MOVWF  43
00AA:  MOVLW  4C
00AB:  MOVWF  44
00AC:  MOVLW  4A
00AD:  MOVWF  45
00AE:  MOVLW  79
00AF:  MOVWF  46
00B0:  CLRF   47
.................... int U[] = {0xFF, 0x01, 0x01, 0x01, 0xFF}; 
00B1:  MOVLW  FF
00B2:  MOVWF  48
00B3:  MOVLW  01
00B4:  MOVWF  49
00B5:  MOVWF  4A
00B6:  MOVWF  4B
00B7:  MOVLW  FF
00B8:  MOVWF  4C
.................... int M[] = {0x1F, 0x08, 0x04, 0x08, 0x1F}; 
00B9:  MOVLW  1F
00BA:  MOVWF  4D
00BB:  MOVLW  08
00BC:  MOVWF  4E
00BD:  MOVLW  04
00BE:  MOVWF  4F
00BF:  MOVLW  08
00C0:  MOVWF  50
00C1:  MOVLW  1F
00C2:  MOVWF  51
.................... int K[] = {0xFF, 0x08, 0x14, 0x42, 0x81}; 
00C3:  MOVLW  FF
00C4:  MOVWF  52
00C5:  MOVLW  08
00C6:  MOVWF  53
00C7:  MOVLW  14
00C8:  MOVWF  54
00C9:  MOVLW  42
00CA:  MOVWF  55
00CB:  MOVLW  81
00CC:  MOVWF  56
....................  
.................... int sutunSec(char s) 
.................... { 
....................    switch(s){ 
*
0004:  MOVF   5D,W
0005:  ADDLW  FB
0006:  BTFSC  03.0
0007:  GOTO   019
0008:  ADDLW  05
0009:  GOTO   01C
....................       case 0: 
....................          return (0x01); 
000A:  MOVLW  01
000B:  MOVWF  78
000C:  GOTO   019
....................       case 1: 
....................          return (0x02); 
000D:  MOVLW  02
000E:  MOVWF  78
000F:  GOTO   019
....................       case 2: 
....................          return (0x04); 
0010:  MOVLW  04
0011:  MOVWF  78
0012:  GOTO   019
....................       case 3: 
....................          return (0x08); 
0013:  MOVLW  08
0014:  MOVWF  78
0015:  GOTO   019
....................       case 4: 
....................          return (0x10); 
0016:  MOVLW  10
0017:  MOVWF  78
0018:  GOTO   019
....................    } 
0019:  BCF    0A.3
001A:  BCF    0A.4
001B:  GOTO   04E (RETURN)
.................... } 
....................  
.................... void matris_karakter_gonder(char harf[], int tekrar) 
.................... { 
....................    int  i, j, k; 
....................     
....................    for(i = 1; i <= tekrar; i++) 
*
003A:  MOVLW  01
003B:  MOVWF  5A
003C:  MOVF   5A,W
003D:  SUBWF  59,W
003E:  BTFSS  03.0
003F:  GOTO   062
....................        
....................       for(k = 1; k <= 10; k++) 
0040:  MOVLW  01
0041:  MOVWF  5C
0042:  MOVF   5C,W
0043:  SUBLW  0A
0044:  BTFSS  03.0
0045:  GOTO   060
....................           
....................          for(j = 0; j <= 4; j++){ 
0046:  CLRF   5B
0047:  MOVF   5B,W
0048:  SUBLW  04
0049:  BTFSS  03.0
004A:  GOTO   05E
....................             output_c(sutunSec(j)); 
004B:  MOVF   5B,W
004C:  MOVWF  5D
004D:  GOTO   004
004E:  MOVF   78,W
004F:  MOVWF  07
....................             output_b(harf[j]); 
0050:  MOVF   5B,W
0051:  ADDWF  57,W
0052:  MOVWF  04
0053:  BCF    03.7
0054:  BTFSC  58.0
0055:  BSF    03.7
0056:  MOVF   00,W
0057:  MOVWF  5D
0058:  MOVWF  06
....................              
....................             delay_ms(1); 
0059:  MOVLW  01
005A:  MOVWF  5D
005B:  CALL   025
005C:  INCF   5B,F
005D:  GOTO   047
005E:  INCF   5C,F
005F:  GOTO   042
0060:  INCF   5A,F
0061:  GOTO   03C
....................          } 
0062:  RETURN
.................... } 
....................  
.................... void main() 
0063:  MOVF   03,W
0064:  ANDLW  1F
0065:  MOVWF  03
0066:  BSF    03.5
0067:  BSF    1F.0
0068:  BSF    1F.1
0069:  BSF    1F.2
006A:  BCF    1F.3
006B:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
*
00CD:  BSF    03.5
00CE:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
00CF:  BCF    03.5
00D0:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
00D1:  MOVLW  00
00D2:  MOVWF  78
00D3:  MOVWF  12
00D4:  MOVLW  00
00D5:  BSF    03.5
00D6:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
00D7:  BSF    1F.0
00D8:  BSF    1F.1
00D9:  BSF    1F.2
00DA:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
00DB:  BCF    03.5
00DC:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
00DD:  MOVLW  F0
00DE:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
00DF:  ANDWF  1D,F
....................     
....................    set_tris_b(0x00); 
00E0:  MOVLW  00
00E1:  BSF    03.5
00E2:  MOVWF  06
....................    set_tris_c(0x00); 
00E3:  MOVWF  07
....................  
....................    while(true){ 
....................       matris_karakter_gonder(S, 20); 
00E4:  BCF    03.5
00E5:  CLRF   58
00E6:  MOVLW  20
00E7:  MOVWF  57
00E8:  MOVLW  14
00E9:  MOVWF  59
00EA:  CALL   03A
....................       matris_karakter_gonder(E, 20); 
00EB:  CLRF   58
00EC:  MOVLW  25
00ED:  MOVWF  57
00EE:  MOVLW  14
00EF:  MOVWF  59
00F0:  CALL   03A
....................       matris_karakter_gonder(N, 20); 
00F1:  CLRF   58
00F2:  MOVLW  2A
00F3:  MOVWF  57
00F4:  MOVLW  14
00F5:  MOVWF  59
00F6:  CALL   03A
....................       matris_karakter_gonder(i, 20); 
00F7:  CLRF   58
00F8:  MOVLW  2F
00F9:  MOVWF  57
00FA:  MOVLW  14
00FB:  MOVWF  59
00FC:  CALL   03A
....................       matris_karakter_gonder(S, 20); 
00FD:  CLRF   58
00FE:  MOVLW  20
00FF:  MOVWF  57
0100:  MOVLW  14
0101:  MOVWF  59
0102:  CALL   03A
....................       matris_karakter_gonder(E, 20); 
0103:  CLRF   58
0104:  MOVLW  25
0105:  MOVWF  57
0106:  MOVLW  14
0107:  MOVWF  59
0108:  CALL   03A
....................       matris_karakter_gonder(V, 20); 
0109:  CLRF   58
010A:  MOVLW  34
010B:  MOVWF  57
010C:  MOVLW  14
010D:  MOVWF  59
010E:  CALL   03A
....................       matris_karakter_gonder(i, 20); 
010F:  CLRF   58
0110:  MOVLW  2F
0111:  MOVWF  57
0112:  MOVLW  14
0113:  MOVWF  59
0114:  CALL   03A
....................       matris_karakter_gonder(Y, 20); 
0115:  CLRF   58
0116:  MOVLW  39
0117:  MOVWF  57
0118:  MOVLW  14
0119:  MOVWF  59
011A:  CALL   03A
....................       matris_karakter_gonder(O, 20); 
011B:  CLRF   58
011C:  MOVLW  3E
011D:  MOVWF  57
011E:  MOVLW  14
011F:  MOVWF  59
0120:  CALL   03A
....................       matris_karakter_gonder(R, 20); 
0121:  CLRF   58
0122:  MOVLW  43
0123:  MOVWF  57
0124:  MOVLW  14
0125:  MOVWF  59
0126:  CALL   03A
....................       matris_karakter_gonder(U, 20); 
0127:  CLRF   58
0128:  MOVLW  48
0129:  MOVWF  57
012A:  MOVLW  14
012B:  MOVWF  59
012C:  CALL   03A
....................       matris_karakter_gonder(M, 20); 
012D:  CLRF   58
012E:  MOVLW  4D
012F:  MOVWF  57
0130:  MOVLW  14
0131:  MOVWF  59
0132:  CALL   03A
....................       output_b(0x00); 
0133:  CLRF   06
....................       delay_ms(200); 
0134:  MOVLW  C8
0135:  MOVWF  5D
0136:  CALL   025
....................        matris_karakter_gonder(M, 20); 
0137:  CLRF   58
0138:  MOVLW  4D
0139:  MOVWF  57
013A:  MOVLW  14
013B:  MOVWF  59
013C:  CALL   03A
....................       output_b(0x00); 
013D:  CLRF   06
....................       delay_ms(200); 
013E:  MOVLW  C8
013F:  MOVWF  5D
0140:  CALL   025
....................       matris_karakter_gonder(M, 20); 
0141:  CLRF   58
0142:  MOVLW  4D
0143:  MOVWF  57
0144:  MOVLW  14
0145:  MOVWF  59
0146:  CALL   03A
....................       output_b(0x00); 
0147:  CLRF   06
....................       delay_ms(1000); 
0148:  MOVLW  04
0149:  MOVWF  57
014A:  MOVLW  FA
014B:  MOVWF  5D
014C:  CALL   025
014D:  DECFSZ 57,F
014E:  GOTO   14A
....................       matris_karakter_gonder(M, 20); 
014F:  CLRF   58
0150:  MOVLW  4D
0151:  MOVWF  57
0152:  MOVLW  14
0153:  MOVWF  59
0154:  CALL   03A
....................       matris_karakter_gonder(i, 20); 
0155:  CLRF   58
0156:  MOVLW  2F
0157:  MOVWF  57
0158:  MOVLW  14
0159:  MOVWF  59
015A:  CALL   03A
....................       matris_karakter_gonder(N, 20); 
015B:  CLRF   58
015C:  MOVLW  2A
015D:  MOVWF  57
015E:  MOVLW  14
015F:  MOVWF  59
0160:  CALL   03A
....................       output_b(0x00); 
0161:  CLRF   06
....................       delay_ms(300); 
0162:  MOVLW  02
0163:  MOVWF  57
0164:  MOVLW  96
0165:  MOVWF  5D
0166:  CALL   025
0167:  DECFSZ 57,F
0168:  GOTO   164
....................       matris_karakter_gonder(N, 20); 
0169:  CLRF   58
016A:  MOVLW  2A
016B:  MOVWF  57
016C:  MOVLW  14
016D:  MOVWF  59
016E:  CALL   03A
....................       matris_karakter_gonder(O, 20); 
016F:  CLRF   58
0170:  MOVLW  3E
0171:  MOVWF  57
0172:  MOVLW  14
0173:  MOVWF  59
0174:  CALL   03A
....................       matris_karakter_gonder(S, 20); 
0175:  CLRF   58
0176:  MOVLW  20
0177:  MOVWF  57
0178:  MOVLW  14
0179:  MOVWF  59
017A:  CALL   03A
....................       matris_karakter_gonder(K, 20); 
017B:  CLRF   58
017C:  MOVLW  52
017D:  MOVWF  57
017E:  MOVLW  14
017F:  MOVWF  59
0180:  CALL   03A
0181:  GOTO   0E5
....................    } 
....................     
.................... } 
....................  
0182:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
