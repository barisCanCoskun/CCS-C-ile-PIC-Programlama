CCS PCM C Compiler, Version 5.084d, 1               20-May-19 21:50
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   Y:\ccs c projects\App4_portOkuma_portaBilgiGönderme\portOkuma_bilgiGönderme.lst

               ROM used:   45 words (1%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           7 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
....................  
.................... #list 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 4000000) 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
....................  
.................... #byte portb = 6 
....................  
.................... int giris; 
....................  
.................... void main() 
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  BSF    03.5
0008:  BSF    1F.0
0009:  BSF    1F.1
000A:  BSF    1F.2
000B:  BCF    1F.3
000C:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
000D:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
000E:  BCF    03.5
000F:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
0010:  MOVLW  00
0011:  MOVWF  78
0012:  MOVWF  12
0013:  MOVLW  00
0014:  BSF    03.5
0015:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
0016:  BSF    1F.0
0017:  BSF    1F.1
0018:  BSF    1F.2
0019:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
001A:  BCF    03.5
001B:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
001C:  MOVLW  F0
001D:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
001E:  ANDWF  1D,F
....................     
....................    set_tris_a(0xFF); 
001F:  MOVLW  FF
0020:  BSF    03.5
0021:  MOVWF  05
....................    set_tris_b(0x00); 
0022:  MOVLW  00
0023:  MOVWF  06
....................     
....................    output_b(0x00); 
0024:  BCF    03.5
0025:  CLRF   06
....................  
....................    basla: 
....................     
....................    portb = input_a() & 0b00111111; // maskeleme islemi 
0026:  BCF    03.5
0027:  BCF    03.6
0028:  MOVF   05,W
0029:  ANDLW  3F
002A:  MOVWF  06
....................     
....................    goto basla; 
002B:  GOTO   026
....................     
.................... } 
002C:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
