CCS PCM C Compiler, Version 5.084d, 1               06-Jun-19 23:58
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   Y:\ccs c projects\App12_muxing_port_with_8255\muxing_port_with_8255.lst

               ROM used:   177 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           8 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   081
0003:  NOP
....................  
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
....................  
.................... #list 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 4000000) 
....................  
.................... #use standard_io(a) 
.................... #use standard_io(b) 
....................  
.................... char data; 
....................  
.................... void _8255_yazma (char x, char bilgi) 
.................... { 
....................    switch(x){ 
0004:  MOVF   21,W
0005:  XORLW  6B
0006:  BTFSC  03.2
0007:  GOTO   012
0008:  XORLW  0A
0009:  BTFSC  03.2
000A:  GOTO   01D
000B:  XORLW  03
000C:  BTFSC  03.2
000D:  GOTO   028
000E:  XORLW  01
000F:  BTFSC  03.2
0010:  GOTO   033
0011:  GOTO   03E
....................       case 'k': 
....................          output_a(0b00001101); 
0012:  BSF    03.5
0013:  CLRF   05
0014:  MOVLW  0D
0015:  BCF    03.5
0016:  MOVWF  05
....................          output_b(bilgi); 
0017:  BSF    03.5
0018:  CLRF   06
0019:  BCF    03.5
001A:  MOVF   22,W
001B:  MOVWF  06
....................          break; 
001C:  GOTO   03F
....................        
....................       case 'a': 
....................          output_a(0b00000001); 
001D:  BSF    03.5
001E:  CLRF   05
001F:  MOVLW  01
0020:  BCF    03.5
0021:  MOVWF  05
....................          output_b(bilgi); 
0022:  BSF    03.5
0023:  CLRF   06
0024:  BCF    03.5
0025:  MOVF   22,W
0026:  MOVWF  06
....................          break; 
0027:  GOTO   03F
....................        
....................       case 'b': 
....................          output_a(0b00000101); 
0028:  BSF    03.5
0029:  CLRF   05
002A:  MOVLW  05
002B:  BCF    03.5
002C:  MOVWF  05
....................          output_b(bilgi); 
002D:  BSF    03.5
002E:  CLRF   06
002F:  BCF    03.5
0030:  MOVF   22,W
0031:  MOVWF  06
....................          break; 
0032:  GOTO   03F
....................        
....................       case 'c': 
....................          output_a(0b00001001); 
0033:  BSF    03.5
0034:  CLRF   05
0035:  MOVLW  09
0036:  BCF    03.5
0037:  MOVWF  05
....................          output_b(bilgi); 
0038:  BSF    03.5
0039:  CLRF   06
003A:  BCF    03.5
003B:  MOVF   22,W
003C:  MOVWF  06
....................          break; 
003D:  GOTO   03F
....................        
....................       default: 
....................          break; 
003E:  GOTO   03F
....................    } 
003F:  RETURN
.................... } 
....................  
.................... char _8255_okuma (char x) 
.................... { 
....................    switch(x){ 
0040:  MOVF   21,W
0041:  XORLW  6B
0042:  BTFSC  03.2
0043:  GOTO   04E
0044:  XORLW  0A
0045:  BTFSC  03.2
0046:  GOTO   05A
0047:  XORLW  03
0048:  BTFSC  03.2
0049:  GOTO   066
004A:  XORLW  01
004B:  BTFSC  03.2
004C:  GOTO   072
004D:  GOTO   07E
....................       case 'k': 
....................          output_a(0b00001110); 
004E:  BSF    03.5
004F:  CLRF   05
0050:  MOVLW  0E
0051:  BCF    03.5
0052:  MOVWF  05
....................          return (input_b()); 
0053:  MOVLW  FF
0054:  BSF    03.5
0055:  MOVWF  06
0056:  BCF    03.5
0057:  MOVF   06,W
0058:  MOVWF  78
0059:  GOTO   07E
....................        
....................       case 'a': 
....................          output_a(0b00000010); 
005A:  BSF    03.5
005B:  CLRF   05
005C:  MOVLW  02
005D:  BCF    03.5
005E:  MOVWF  05
....................          return (input_b()); 
005F:  MOVLW  FF
0060:  BSF    03.5
0061:  MOVWF  06
0062:  BCF    03.5
0063:  MOVF   06,W
0064:  MOVWF  78
0065:  GOTO   07E
....................        
....................       case 'b': 
....................          output_a(0b00000110); 
0066:  BSF    03.5
0067:  CLRF   05
0068:  MOVLW  06
0069:  BCF    03.5
006A:  MOVWF  05
....................          return (input_b()); 
006B:  MOVLW  FF
006C:  BSF    03.5
006D:  MOVWF  06
006E:  BCF    03.5
006F:  MOVF   06,W
0070:  MOVWF  78
0071:  GOTO   07E
....................        
....................       case 'c': 
....................          output_a(0b00001010); 
0072:  BSF    03.5
0073:  CLRF   05
0074:  MOVLW  0A
0075:  BCF    03.5
0076:  MOVWF  05
....................          return (input_b()); 
0077:  MOVLW  FF
0078:  BSF    03.5
0079:  MOVWF  06
007A:  BCF    03.5
007B:  MOVF   06,W
007C:  MOVWF  78
007D:  GOTO   07E
....................        
....................       default: 
....................          break; 
....................    } 
007E:  BCF    0A.3
007F:  BCF    0A.4
0080:  GOTO   0A8 (RETURN)
.................... } 
....................  
.................... void main() 
0081:  MOVF   03,W
0082:  ANDLW  1F
0083:  MOVWF  03
0084:  BSF    03.5
0085:  BSF    1F.0
0086:  BSF    1F.1
0087:  BSF    1F.2
0088:  BCF    1F.3
0089:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
008A:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
008B:  BCF    03.5
008C:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
008D:  MOVLW  00
008E:  MOVWF  78
008F:  MOVWF  12
0090:  MOVLW  00
0091:  BSF    03.5
0092:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
0093:  BSF    1F.0
0094:  BSF    1F.1
0095:  BSF    1F.2
0096:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0097:  BCF    03.5
0098:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
0099:  MOVLW  F0
009A:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
009B:  ANDWF  1D,F
....................     
....................    _8255_yazma('k', 0b10001001); 
009C:  MOVLW  6B
009D:  MOVWF  21
009E:  MOVLW  89
009F:  MOVWF  22
00A0:  CALL   004
....................    _8255_yazma('a', 0x00); 
00A1:  MOVLW  61
00A2:  MOVWF  21
00A3:  CLRF   22
00A4:  CALL   004
....................     
....................    while(true){ 
....................       data = _8255_okuma('c'); 
00A5:  MOVLW  63
00A6:  MOVWF  21
00A7:  GOTO   040
00A8:  MOVF   78,W
00A9:  MOVWF  20
....................       _8255_yazma('a', data); 
00AA:  MOVLW  61
00AB:  MOVWF  21
00AC:  MOVF   20,W
00AD:  MOVWF  22
00AE:  CALL   004
00AF:  GOTO   0A5
....................    } 
....................     
.................... } 
....................  
00B0:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
