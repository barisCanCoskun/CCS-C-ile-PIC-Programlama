CCS PCM C Compiler, Version 5.007, 61971               22-Jun-19 15:56

               Filename:   Y:\ccs c\ccs c projects\App34_ADC_2_with_pot\ADC_2_with_pot.lst

               ROM used:   1887 words (23%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           46 (12%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   57E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.6
001A:  GOTO   01D
001B:  BTFSC  0C.6
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   04E
....................  
.................... #include <16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  28
0036:  RETLW  0C
0037:  RETLW  01
0038:  RETLW  06
*
0057:  DATA 0C,10
0058:  DATA 41,22
0059:  DATA 43,10
005A:  DATA 41,38
005B:  DATA F0,2F
005C:  DATA F7,2F
005D:  DATA F0,37
005E:  DATA 74,10
005F:  DATA 00,00
0060:  DATA 8C,20
0061:  DATA CE,1A
0062:  DATA A0,25
0063:  DATA 61,37
0064:  DATA 61,36
0065:  DATA 69,00
0066:  DATA 0C,22
0067:  DATA 69,35
0068:  DATA 69,3A
0069:  DATA 61,36
006A:  DATA A0,1E
006B:  DATA A0,12
006C:  DATA EC,3A
006D:  DATA 00,00
006E:  DATA 0A,2B
006F:  DATA 6F,36
0070:  DATA F4,30
0071:  DATA 6A,10
0072:  DATA 3D,10
0073:  DATA 25,33
0074:  DATA 56,00
0075:  DATA 8C,20
0076:  DATA 4E,1B
0077:  DATA A0,25
0078:  DATA 61,37
0079:  DATA 61,36
007A:  DATA 69,00
007B:  DATA 0C,22
007C:  DATA 69,35
007D:  DATA 69,3A
007E:  DATA 61,36
007F:  DATA A0,1E
0080:  DATA A0,12
0081:  DATA EC,3A
0082:  DATA 00,01
0083:  DATA 0A,2B
0084:  DATA 6F,36
0085:  DATA F4,30
0086:  DATA 6A,10
0087:  DATA 3D,10
0088:  DATA 25,33
0089:  DATA 56,00
008A:  DATA 8C,20
008B:  DATA CE,1B
008C:  DATA A0,25
008D:  DATA 61,37
008E:  DATA 61,36
008F:  DATA 69,00
0090:  DATA 0C,22
0091:  DATA 69,35
0092:  DATA 69,3A
0093:  DATA 61,36
0094:  DATA A0,1E
0095:  DATA A0,12
0096:  DATA EC,3A
0097:  DATA 00,01
0098:  DATA 0A,2B
0099:  DATA 6F,36
009A:  DATA F4,30
009B:  DATA 6A,10
009C:  DATA 3D,10
009D:  DATA 25,33
009E:  DATA 56,00
*
017A:  MOVF   0B,W
017B:  MOVWF  2E
017C:  BCF    0B.7
017D:  BSF    03.5
017E:  BSF    03.6
017F:  BSF    0C.7
0180:  BSF    0C.0
0181:  NOP
0182:  NOP
0183:  BCF    03.5
0184:  MOVF   0C,W
0185:  ANDLW  7F
0186:  BTFSC  03.2
0187:  GOTO   1C1
0188:  BCF    03.6
0189:  MOVWF  2F
018A:  BSF    03.6
018B:  MOVF   0D,W
018C:  BCF    03.6
018D:  MOVWF  30
018E:  BSF    03.6
018F:  MOVF   0F,W
0190:  BCF    03.6
0191:  MOVWF  31
0192:  MOVF   2F,W
0193:  MOVWF  3B
0194:  CALL   148
0195:  MOVF   30,W
0196:  BSF    03.6
0197:  MOVWF  0D
0198:  BCF    03.6
0199:  MOVF   31,W
019A:  BSF    03.6
019B:  MOVWF  0F
019C:  BSF    03.5
019D:  BSF    0C.7
019E:  BSF    0C.0
019F:  NOP
01A0:  NOP
01A1:  BCF    03.5
01A2:  RLF    0C,W
01A3:  RLF    0E,W
01A4:  ANDLW  7F
01A5:  BTFSC  03.2
01A6:  GOTO   1C1
01A7:  BCF    03.6
01A8:  MOVWF  2F
01A9:  BSF    03.6
01AA:  MOVF   0D,W
01AB:  BCF    03.6
01AC:  MOVWF  30
01AD:  BSF    03.6
01AE:  MOVF   0F,W
01AF:  BCF    03.6
01B0:  MOVWF  31
01B1:  MOVF   2F,W
01B2:  MOVWF  3B
01B3:  CALL   148
01B4:  MOVF   30,W
01B5:  BSF    03.6
01B6:  MOVWF  0D
01B7:  BCF    03.6
01B8:  MOVF   31,W
01B9:  BSF    03.6
01BA:  MOVWF  0F
01BB:  INCF   0D,F
01BC:  BTFSC  03.2
01BD:  INCF   0F,F
01BE:  BCF    03.6
01BF:  GOTO   17D
01C0:  BSF    03.6
01C1:  BCF    03.6
01C2:  BTFSC  2E.7
01C3:  BSF    0B.7
01C4:  RETURN
01C5:  MOVLW  8E
01C6:  MOVWF  77
01C7:  MOVF   2F,W
01C8:  MOVWF  78
01C9:  MOVF   2E,W
01CA:  MOVWF  79
01CB:  CLRF   7A
01CC:  MOVF   78,F
01CD:  BTFSS  03.2
01CE:  GOTO   1D9
01CF:  MOVF   79,W
01D0:  MOVWF  78
01D1:  CLRF   79
01D2:  MOVLW  08
01D3:  SUBWF  77,F
01D4:  MOVF   78,F
01D5:  BTFSS  03.2
01D6:  GOTO   1D9
01D7:  CLRF   77
01D8:  GOTO   1E1
01D9:  BCF    03.0
01DA:  BTFSC  78.7
01DB:  GOTO   1E0
01DC:  RLF    79,F
01DD:  RLF    78,F
01DE:  DECF   77,F
01DF:  GOTO   1D9
01E0:  BCF    78.7
01E1:  RETURN
01E2:  MOVF   3B,W
01E3:  BTFSC  03.2
01E4:  GOTO   252
01E5:  MOVWF  43
01E6:  MOVF   3F,W
01E7:  BTFSC  03.2
01E8:  GOTO   252
01E9:  ADDWF  43,F
01EA:  BTFSC  03.0
01EB:  GOTO   1F3
01EC:  MOVLW  7F
01ED:  SUBWF  43,F
01EE:  BTFSS  03.0
01EF:  GOTO   252
01F0:  BTFSC  03.2
01F1:  GOTO   252
01F2:  GOTO   1F7
01F3:  MOVLW  81
01F4:  ADDWF  43,F
01F5:  BTFSC  03.0
01F6:  GOTO   252
01F7:  MOVF   43,W
01F8:  MOVWF  77
01F9:  CLRF   78
01FA:  CLRF   79
01FB:  CLRF   7A
01FC:  MOVF   3C,W
01FD:  MOVWF  47
01FE:  BSF    47.7
01FF:  MOVF   3D,W
0200:  MOVWF  46
0201:  MOVF   3E,W
0202:  MOVWF  45
0203:  MOVLW  18
0204:  MOVWF  43
0205:  CLRF   44
0206:  BTFSS  45.0
0207:  GOTO   220
0208:  MOVF   42,W
0209:  ADDWF  7A,F
020A:  BTFSS  03.0
020B:  GOTO   212
020C:  INCF   79,F
020D:  BTFSS  03.2
020E:  GOTO   212
020F:  INCF   78,F
0210:  BTFSC  03.2
0211:  BSF    44.7
0212:  MOVF   41,W
0213:  ADDWF  79,F
0214:  BTFSS  03.0
0215:  GOTO   219
0216:  INCF   78,F
0217:  BTFSC  03.2
0218:  BSF    44.7
0219:  MOVF   40,W
021A:  MOVWF  3D
021B:  BSF    3D.7
021C:  MOVF   3D,W
021D:  ADDWF  78,F
021E:  BTFSC  03.0
021F:  BSF    44.7
0220:  RLF    44,F
0221:  RRF    78,F
0222:  RRF    79,F
0223:  RRF    7A,F
0224:  RRF    47,F
0225:  RRF    46,F
0226:  RRF    45,F
0227:  BCF    03.0
0228:  DECFSZ 43,F
0229:  GOTO   205
022A:  MOVLW  01
022B:  ADDWF  77,F
022C:  BTFSC  03.0
022D:  GOTO   252
022E:  BTFSC  78.7
022F:  GOTO   237
0230:  RLF    47,F
0231:  RLF    7A,F
0232:  RLF    79,F
0233:  RLF    78,F
0234:  DECF   77,F
0235:  BTFSC  03.2
0236:  GOTO   252
0237:  BTFSS  47.7
0238:  GOTO   248
0239:  INCF   7A,F
023A:  BTFSS  03.2
023B:  GOTO   248
023C:  INCF   79,F
023D:  BTFSS  03.2
023E:  GOTO   248
023F:  INCF   78,F
0240:  BTFSS  03.2
0241:  GOTO   248
0242:  RRF    78,F
0243:  RRF    79,F
0244:  RRF    7A,F
0245:  INCF   77,F
0246:  BTFSC  03.2
0247:  GOTO   252
0248:  MOVF   3C,W
0249:  MOVWF  44
024A:  MOVF   40,W
024B:  XORWF  44,F
024C:  BTFSS  44.7
024D:  GOTO   250
024E:  BSF    78.7
024F:  GOTO   256
0250:  BCF    78.7
0251:  GOTO   256
0252:  CLRF   77
0253:  CLRF   78
0254:  CLRF   79
0255:  CLRF   7A
0256:  RETURN
0257:  MOVLW  80
0258:  BTFSC  03.1
0259:  XORWF  33,F
025A:  CLRF   38
025B:  CLRF   39
025C:  MOVF   2F,W
025D:  MOVWF  37
025E:  MOVF   33,W
025F:  XORWF  37,F
0260:  MOVF   2E,W
0261:  BTFSC  03.2
0262:  GOTO   347
0263:  MOVWF  36
0264:  MOVWF  77
0265:  MOVF   32,W
0266:  BTFSC  03.2
0267:  GOTO   350
0268:  SUBWF  36,F
0269:  BTFSC  03.2
026A:  GOTO   2EC
026B:  BTFSS  03.0
026C:  GOTO   2AA
026D:  MOVF   33,W
026E:  MOVWF  3C
026F:  BSF    3C.7
0270:  MOVF   34,W
0271:  MOVWF  3B
0272:  MOVF   35,W
0273:  MOVWF  3A
0274:  CLRF   39
0275:  BCF    03.0
0276:  RRF    3C,F
0277:  RRF    3B,F
0278:  RRF    3A,F
0279:  RRF    39,F
027A:  DECFSZ 36,F
027B:  GOTO   274
027C:  BTFSS  37.7
027D:  GOTO   281
027E:  BSF    38.0
027F:  GOTO   364
0280:  BCF    38.0
0281:  BCF    36.0
0282:  BSF    38.4
0283:  MOVLW  31
0284:  MOVWF  04
0285:  BCF    03.7
0286:  GOTO   379
0287:  BCF    38.4
0288:  BTFSC  37.7
0289:  GOTO   294
028A:  BTFSS  36.0
028B:  GOTO   29F
028C:  RRF    3C,F
028D:  RRF    3B,F
028E:  RRF    3A,F
028F:  RRF    39,F
0290:  INCF   77,F
0291:  BTFSC  03.2
0292:  GOTO   35F
0293:  GOTO   29F
0294:  BTFSC  3C.7
0295:  GOTO   2A2
0296:  BCF    03.0
0297:  RLF    39,F
0298:  RLF    3A,F
0299:  RLF    3B,F
029A:  RLF    3C,F
029B:  DECF   77,F
029C:  BTFSC  03.2
029D:  GOTO   35F
029E:  GOTO   294
029F:  BSF    38.6
02A0:  GOTO   30C
02A1:  BCF    38.6
02A2:  MOVF   2F,W
02A3:  MOVWF  37
02A4:  BTFSS  37.7
02A5:  GOTO   2A8
02A6:  BSF    3C.7
02A7:  GOTO   358
02A8:  BCF    3C.7
02A9:  GOTO   358
02AA:  MOVF   32,W
02AB:  MOVWF  36
02AC:  MOVWF  77
02AD:  MOVF   2E,W
02AE:  SUBWF  36,F
02AF:  MOVF   2F,W
02B0:  MOVWF  3C
02B1:  BSF    3C.7
02B2:  MOVF   30,W
02B3:  MOVWF  3B
02B4:  MOVF   31,W
02B5:  MOVWF  3A
02B6:  CLRF   39
02B7:  BCF    03.0
02B8:  RRF    3C,F
02B9:  RRF    3B,F
02BA:  RRF    3A,F
02BB:  RRF    39,F
02BC:  DECFSZ 36,F
02BD:  GOTO   2B6
02BE:  BTFSS  37.7
02BF:  GOTO   2C3
02C0:  BSF    38.1
02C1:  GOTO   364
02C2:  BCF    38.1
02C3:  BCF    36.0
02C4:  BSF    38.5
02C5:  MOVLW  35
02C6:  MOVWF  04
02C7:  BCF    03.7
02C8:  GOTO   379
02C9:  BCF    38.5
02CA:  BTFSC  37.7
02CB:  GOTO   2D6
02CC:  BTFSS  36.0
02CD:  GOTO   2E1
02CE:  RRF    3C,F
02CF:  RRF    3B,F
02D0:  RRF    3A,F
02D1:  RRF    39,F
02D2:  INCF   77,F
02D3:  BTFSC  03.2
02D4:  GOTO   35F
02D5:  GOTO   2E1
02D6:  BTFSC  3C.7
02D7:  GOTO   2E4
02D8:  BCF    03.0
02D9:  RLF    39,F
02DA:  RLF    3A,F
02DB:  RLF    3B,F
02DC:  RLF    3C,F
02DD:  DECF   77,F
02DE:  BTFSC  03.2
02DF:  GOTO   35F
02E0:  GOTO   2D6
02E1:  BSF    38.7
02E2:  GOTO   30C
02E3:  BCF    38.7
02E4:  MOVF   33,W
02E5:  MOVWF  37
02E6:  BTFSS  37.7
02E7:  GOTO   2EA
02E8:  BSF    3C.7
02E9:  GOTO   358
02EA:  BCF    3C.7
02EB:  GOTO   358
02EC:  MOVF   33,W
02ED:  MOVWF  3C
02EE:  BSF    3C.7
02EF:  MOVF   34,W
02F0:  MOVWF  3B
02F1:  MOVF   35,W
02F2:  MOVWF  3A
02F3:  BTFSS  37.7
02F4:  GOTO   2F9
02F5:  BCF    3C.7
02F6:  BSF    38.2
02F7:  GOTO   364
02F8:  BCF    38.2
02F9:  CLRF   39
02FA:  BCF    36.0
02FB:  MOVLW  31
02FC:  MOVWF  04
02FD:  BCF    03.7
02FE:  GOTO   379
02FF:  BTFSC  37.7
0300:  GOTO   322
0301:  MOVF   2F,W
0302:  MOVWF  37
0303:  BTFSS  36.0
0304:  GOTO   30C
0305:  RRF    3C,F
0306:  RRF    3B,F
0307:  RRF    3A,F
0308:  RRF    39,F
0309:  INCF   77,F
030A:  BTFSC  03.2
030B:  GOTO   35F
030C:  BTFSS  39.7
030D:  GOTO   31D
030E:  INCF   3A,F
030F:  BTFSS  03.2
0310:  GOTO   31D
0311:  INCF   3B,F
0312:  BTFSS  03.2
0313:  GOTO   31D
0314:  INCF   3C,F
0315:  BTFSS  03.2
0316:  GOTO   31D
0317:  RRF    3C,F
0318:  RRF    3B,F
0319:  RRF    3A,F
031A:  INCF   77,F
031B:  BTFSC  03.2
031C:  GOTO   35F
031D:  BTFSC  38.6
031E:  GOTO   2A1
031F:  BTFSC  38.7
0320:  GOTO   2E3
0321:  GOTO   341
0322:  MOVLW  80
0323:  XORWF  3C,F
0324:  BTFSS  3C.7
0325:  GOTO   32A
0326:  GOTO   364
0327:  MOVF   33,W
0328:  MOVWF  37
0329:  GOTO   337
032A:  MOVF   2F,W
032B:  MOVWF  37
032C:  MOVF   3C,F
032D:  BTFSS  03.2
032E:  GOTO   337
032F:  MOVF   3B,F
0330:  BTFSS  03.2
0331:  GOTO   337
0332:  MOVF   3A,F
0333:  BTFSS  03.2
0334:  GOTO   337
0335:  CLRF   77
0336:  GOTO   358
0337:  BTFSC  3C.7
0338:  GOTO   341
0339:  BCF    03.0
033A:  RLF    39,F
033B:  RLF    3A,F
033C:  RLF    3B,F
033D:  RLF    3C,F
033E:  DECFSZ 77,F
033F:  GOTO   337
0340:  GOTO   35F
0341:  BTFSS  37.7
0342:  GOTO   345
0343:  BSF    3C.7
0344:  GOTO   358
0345:  BCF    3C.7
0346:  GOTO   358
0347:  MOVF   32,W
0348:  MOVWF  77
0349:  MOVF   33,W
034A:  MOVWF  3C
034B:  MOVF   34,W
034C:  MOVWF  3B
034D:  MOVF   35,W
034E:  MOVWF  3A
034F:  GOTO   358
0350:  MOVF   2E,W
0351:  MOVWF  77
0352:  MOVF   2F,W
0353:  MOVWF  3C
0354:  MOVF   30,W
0355:  MOVWF  3B
0356:  MOVF   31,W
0357:  MOVWF  3A
0358:  MOVF   3C,W
0359:  MOVWF  78
035A:  MOVF   3B,W
035B:  MOVWF  79
035C:  MOVF   3A,W
035D:  MOVWF  7A
035E:  GOTO   397
035F:  CLRF   77
0360:  CLRF   78
0361:  CLRF   79
0362:  CLRF   7A
0363:  GOTO   397
0364:  CLRF   39
0365:  COMF   3A,F
0366:  COMF   3B,F
0367:  COMF   3C,F
0368:  COMF   39,F
0369:  INCF   39,F
036A:  BTFSS  03.2
036B:  GOTO   372
036C:  INCF   3A,F
036D:  BTFSS  03.2
036E:  GOTO   372
036F:  INCF   3B,F
0370:  BTFSC  03.2
0371:  INCF   3C,F
0372:  BTFSC  38.0
0373:  GOTO   280
0374:  BTFSC  38.1
0375:  GOTO   2C2
0376:  BTFSC  38.2
0377:  GOTO   2F8
0378:  GOTO   327
0379:  MOVF   00,W
037A:  ADDWF  3A,F
037B:  BTFSS  03.0
037C:  GOTO   383
037D:  INCF   3B,F
037E:  BTFSS  03.2
037F:  GOTO   383
0380:  INCF   3C,F
0381:  BTFSC  03.2
0382:  BSF    36.0
0383:  DECF   04,F
0384:  MOVF   00,W
0385:  ADDWF  3B,F
0386:  BTFSS  03.0
0387:  GOTO   38B
0388:  INCF   3C,F
0389:  BTFSC  03.2
038A:  BSF    36.0
038B:  DECF   04,F
038C:  MOVF   00,W
038D:  BTFSS  00.7
038E:  XORLW  80
038F:  ADDWF  3C,F
0390:  BTFSC  03.0
0391:  BSF    36.0
0392:  BTFSC  38.4
0393:  GOTO   287
0394:  BTFSC  38.5
0395:  GOTO   2C9
0396:  GOTO   2FF
0397:  RETURN
0398:  MOVF   0B,W
0399:  MOVWF  2F
039A:  BCF    0B.7
039B:  BSF    03.5
039C:  BSF    03.6
039D:  BSF    0C.7
039E:  BSF    0C.0
039F:  NOP
03A0:  NOP
03A1:  BTFSC  03.0
03A2:  GOTO   3CA
03A3:  BCF    03.5
03A4:  MOVF   0C,W
03A5:  ANDLW  7F
03A6:  BCF    03.6
03A7:  MOVWF  30
03A8:  BSF    03.6
03A9:  MOVF   0D,W
03AA:  BCF    03.6
03AB:  MOVWF  31
03AC:  BSF    03.6
03AD:  MOVF   0F,W
03AE:  BCF    03.6
03AF:  MOVWF  32
03B0:  MOVF   30,W
03B1:  MOVWF  3B
03B2:  CALL   148
03B3:  MOVF   31,W
03B4:  BSF    03.6
03B5:  MOVWF  0D
03B6:  BCF    03.6
03B7:  MOVF   32,W
03B8:  BSF    03.6
03B9:  MOVWF  0F
03BA:  BSF    03.5
03BB:  BSF    0C.7
03BC:  BSF    0C.0
03BD:  NOP
03BE:  NOP
03BF:  BCF    03.5
03C0:  BCF    03.6
03C1:  DECFSZ 2E,F
03C2:  GOTO   3C4
03C3:  GOTO   3C7
03C4:  BSF    03.5
03C5:  BSF    03.6
03C6:  GOTO   3CA
03C7:  GOTO   3E9
03C8:  BSF    03.5
03C9:  BSF    03.6
03CA:  BCF    03.5
03CB:  RLF    0C,W
03CC:  RLF    0E,W
03CD:  ANDLW  7F
03CE:  BCF    03.6
03CF:  MOVWF  30
03D0:  BSF    03.6
03D1:  MOVF   0D,W
03D2:  BCF    03.6
03D3:  MOVWF  31
03D4:  BSF    03.6
03D5:  MOVF   0F,W
03D6:  BCF    03.6
03D7:  MOVWF  32
03D8:  MOVF   30,W
03D9:  MOVWF  3B
03DA:  CALL   148
03DB:  MOVF   31,W
03DC:  BSF    03.6
03DD:  MOVWF  0D
03DE:  BCF    03.6
03DF:  MOVF   32,W
03E0:  BSF    03.6
03E1:  MOVWF  0F
03E2:  INCF   0D,F
03E3:  BTFSC  03.2
03E4:  INCF   0F,F
03E5:  BCF    03.0
03E6:  BCF    03.6
03E7:  DECFSZ 2E,F
03E8:  GOTO   39B
03E9:  BTFSC  2F.7
03EA:  BSF    0B.7
03EB:  RETURN
03EC:  CLRF   36
03ED:  MOVF   04,W
03EE:  MOVWF  35
03EF:  BCF    36.0
03F0:  BTFSC  03.7
03F1:  BSF    36.0
03F2:  SWAPF  2F,W
03F3:  IORLW  F0
03F4:  MOVWF  31
03F5:  ADDWF  31,F
03F6:  ADDLW  E2
03F7:  MOVWF  32
03F8:  ADDLW  32
03F9:  MOVWF  34
03FA:  MOVF   2F,W
03FB:  ANDLW  0F
03FC:  ADDWF  32,F
03FD:  ADDWF  32,F
03FE:  ADDWF  34,F
03FF:  ADDLW  E9
0400:  MOVWF  33
0401:  ADDWF  33,F
0402:  ADDWF  33,F
0403:  SWAPF  2E,W
0404:  ANDLW  0F
0405:  ADDWF  33,F
0406:  ADDWF  34,F
0407:  RLF    33,F
0408:  RLF    34,F
0409:  COMF   34,F
040A:  RLF    34,F
040B:  MOVF   2E,W
040C:  ANDLW  0F
040D:  ADDWF  34,F
040E:  RLF    31,F
040F:  MOVLW  07
0410:  MOVWF  30
0411:  MOVLW  0A
0412:  ADDWF  34,F
0413:  DECF   33,F
0414:  BTFSS  03.0
0415:  GOTO   412
0416:  ADDWF  33,F
0417:  DECF   32,F
0418:  BTFSS  03.0
0419:  GOTO   416
041A:  ADDWF  32,F
041B:  DECF   31,F
041C:  BTFSS  03.0
041D:  GOTO   41A
041E:  ADDWF  31,F
041F:  DECF   30,F
0420:  BTFSS  03.0
0421:  GOTO   41E
0422:  MOVLW  30
0423:  MOVWF  04
0424:  BCF    03.7
0425:  MOVLW  07
0426:  ANDWF  35,W
0427:  BCF    35.6
0428:  ADDWF  04,F
0429:  MOVLW  34
042A:  SUBWF  04,W
042B:  BTFSC  03.2
042C:  BSF    35.6
042D:  MOVF   00,W
042E:  MOVWF  77
042F:  BTFSS  03.2
0430:  GOTO   439
0431:  BTFSC  35.6
0432:  GOTO   439
0433:  BTFSC  35.4
0434:  GOTO   44B
0435:  BTFSC  35.3
0436:  GOTO   439
0437:  MOVLW  20
0438:  GOTO   43C
0439:  BSF    35.3
043A:  BCF    35.4
043B:  MOVLW  30
043C:  ADDWF  77,F
043D:  CLRF   2F
043E:  MOVF   04,W
043F:  MOVWF  2E
0440:  BCF    2F.0
0441:  BTFSC  03.7
0442:  BSF    2F.0
0443:  MOVF   77,W
0444:  MOVWF  3B
0445:  CALL   148
0446:  MOVF   2E,W
0447:  MOVWF  04
0448:  BCF    03.7
0449:  BTFSC  2F.0
044A:  BSF    03.7
044B:  INCF   04,F
044C:  BTFSS  35.6
044D:  GOTO   429
044E:  RETURN
044F:  BTFSC  03.1
0450:  GOTO   454
0451:  MOVLW  43
0452:  MOVWF  04
0453:  BCF    03.7
0454:  CLRF   77
0455:  CLRF   78
0456:  CLRF   79
0457:  CLRF   7A
0458:  CLRF   43
0459:  CLRF   44
045A:  CLRF   45
045B:  CLRF   46
045C:  MOVF   42,W
045D:  IORWF  41,W
045E:  IORWF  40,W
045F:  IORWF  3F,W
0460:  BTFSC  03.2
0461:  GOTO   492
0462:  MOVLW  20
0463:  MOVWF  47
0464:  BCF    03.0
0465:  RLF    3B,F
0466:  RLF    3C,F
0467:  RLF    3D,F
0468:  RLF    3E,F
0469:  RLF    43,F
046A:  RLF    44,F
046B:  RLF    45,F
046C:  RLF    46,F
046D:  MOVF   42,W
046E:  SUBWF  46,W
046F:  BTFSS  03.2
0470:  GOTO   47B
0471:  MOVF   41,W
0472:  SUBWF  45,W
0473:  BTFSS  03.2
0474:  GOTO   47B
0475:  MOVF   40,W
0476:  SUBWF  44,W
0477:  BTFSS  03.2
0478:  GOTO   47B
0479:  MOVF   3F,W
047A:  SUBWF  43,W
047B:  BTFSS  03.0
047C:  GOTO   48C
047D:  MOVF   3F,W
047E:  SUBWF  43,F
047F:  MOVF   40,W
0480:  BTFSS  03.0
0481:  INCFSZ 40,W
0482:  SUBWF  44,F
0483:  MOVF   41,W
0484:  BTFSS  03.0
0485:  INCFSZ 41,W
0486:  SUBWF  45,F
0487:  MOVF   42,W
0488:  BTFSS  03.0
0489:  INCFSZ 42,W
048A:  SUBWF  46,F
048B:  BSF    03.0
048C:  RLF    77,F
048D:  RLF    78,F
048E:  RLF    79,F
048F:  RLF    7A,F
0490:  DECFSZ 47,F
0491:  GOTO   464
0492:  MOVF   43,W
0493:  MOVWF  00
0494:  INCF   04,F
0495:  MOVF   44,W
0496:  MOVWF  00
0497:  INCF   04,F
0498:  MOVF   45,W
0499:  MOVWF  00
049A:  INCF   04,F
049B:  MOVF   46,W
049C:  MOVWF  00
049D:  RETURN
049E:  MOVF   04,W
049F:  MOVWF  33
04A0:  MOVF   32,W
04A1:  MOVWF  35
04A2:  BTFSC  03.2
04A3:  GOTO   4BD
04A4:  MOVF   31,W
04A5:  MOVWF  3E
04A6:  MOVF   30,W
04A7:  MOVWF  3D
04A8:  MOVF   2F,W
04A9:  MOVWF  3C
04AA:  MOVF   2E,W
04AB:  MOVWF  3B
04AC:  CLRF   42
04AD:  CLRF   41
04AE:  MOVLW  20
04AF:  MOVWF  40
04B0:  MOVLW  82
04B1:  MOVWF  3F
04B2:  CALL   1E2
04B3:  MOVF   7A,W
04B4:  MOVWF  31
04B5:  MOVF   79,W
04B6:  MOVWF  30
04B7:  MOVF   78,W
04B8:  MOVWF  2F
04B9:  MOVF   77,W
04BA:  MOVWF  2E
04BB:  DECFSZ 35,F
04BC:  GOTO   4A4
04BD:  MOVF   31,W
04BE:  MOVWF  3E
04BF:  MOVF   30,W
04C0:  MOVWF  3D
04C1:  MOVF   2F,W
04C2:  MOVWF  3C
04C3:  MOVF   2E,W
04C4:  MOVWF  3B
04C5:  MOVF   3B,W
04C6:  SUBLW  B6
04C7:  MOVWF  3B
04C8:  CLRF   7A
04C9:  MOVF   3C,W
04CA:  MOVWF  3F
04CB:  BSF    3C.7
04CC:  BCF    03.0
04CD:  RRF    3C,F
04CE:  RRF    3D,F
04CF:  RRF    3E,F
04D0:  RRF    7A,F
04D1:  RRF    79,F
04D2:  RRF    78,F
04D3:  RRF    77,F
04D4:  DECFSZ 3B,F
04D5:  GOTO   4CC
04D6:  BTFSS  3F.7
04D7:  GOTO   4E3
04D8:  COMF   77,F
04D9:  COMF   78,F
04DA:  COMF   79,F
04DB:  COMF   7A,F
04DC:  INCF   77,F
04DD:  BTFSC  03.2
04DE:  INCF   78,F
04DF:  BTFSC  03.2
04E0:  INCF   79,F
04E1:  BTFSC  03.2
04E2:  INCF   7A,F
04E3:  MOVF   7A,W
04E4:  MOVWF  31
04E5:  MOVF   79,W
04E6:  MOVWF  30
04E7:  MOVF   78,W
04E8:  MOVWF  2F
04E9:  MOVF   77,W
04EA:  MOVWF  2E
04EB:  BTFSS  31.7
04EC:  GOTO   4FA
04ED:  DECF   33,F
04EE:  BSF    33.5
04EF:  COMF   2E,F
04F0:  COMF   2F,F
04F1:  COMF   30,F
04F2:  COMF   31,F
04F3:  INCF   2E,F
04F4:  BTFSC  03.2
04F5:  INCF   2F,F
04F6:  BTFSC  03.2
04F7:  INCF   30,F
04F8:  BTFSC  03.2
04F9:  INCF   31,F
04FA:  MOVLW  3B
04FB:  MOVWF  3A
04FC:  MOVLW  9A
04FD:  MOVWF  39
04FE:  MOVLW  CA
04FF:  MOVWF  38
0500:  CLRF   37
0501:  MOVLW  0A
0502:  MOVWF  35
0503:  MOVF   32,W
0504:  BTFSC  03.2
0505:  INCF   33,F
0506:  BSF    03.1
0507:  MOVLW  2E
0508:  MOVWF  04
0509:  BCF    03.7
050A:  MOVF   31,W
050B:  MOVWF  3E
050C:  MOVF   30,W
050D:  MOVWF  3D
050E:  MOVF   2F,W
050F:  MOVWF  3C
0510:  MOVF   2E,W
0511:  MOVWF  3B
0512:  MOVF   3A,W
0513:  MOVWF  42
0514:  MOVF   39,W
0515:  MOVWF  41
0516:  MOVF   38,W
0517:  MOVWF  40
0518:  MOVF   37,W
0519:  MOVWF  3F
051A:  CALL   44F
051B:  MOVF   78,W
051C:  MOVF   77,F
051D:  BTFSS  03.2
051E:  GOTO   532
051F:  INCF   32,W
0520:  SUBWF  35,W
0521:  BTFSC  03.2
0522:  GOTO   532
0523:  MOVF   33,W
0524:  BTFSC  03.2
0525:  GOTO   534
0526:  ANDLW  0F
0527:  SUBWF  35,W
0528:  BTFSC  03.2
0529:  GOTO   52C
052A:  BTFSC  03.0
052B:  GOTO   564
052C:  BTFSC  33.7
052D:  GOTO   564
052E:  BTFSC  33.6
052F:  GOTO   534
0530:  MOVLW  20
0531:  GOTO   560
0532:  MOVLW  20
0533:  ANDWF  33,F
0534:  BTFSS  33.5
0535:  GOTO   542
0536:  BCF    33.5
0537:  MOVF   32,W
0538:  BTFSS  03.2
0539:  DECF   33,F
053A:  MOVF   77,W
053B:  MOVWF  33
053C:  MOVLW  2D
053D:  MOVWF  3B
053E:  CALL   148
053F:  MOVF   33,W
0540:  MOVWF  77
0541:  CLRF   33
0542:  MOVF   32,W
0543:  SUBWF  35,W
0544:  BTFSS  03.2
0545:  GOTO   550
0546:  MOVF   77,W
0547:  MOVWF  33
0548:  MOVLW  2E
0549:  MOVWF  3B
054A:  CALL   148
054B:  MOVF   33,W
054C:  MOVWF  77
054D:  MOVLW  20
054E:  ANDWF  33,F
054F:  MOVLW  00
0550:  MOVLW  30
0551:  BTFSS  33.5
0552:  GOTO   560
0553:  BCF    33.5
0554:  MOVF   32,W
0555:  BTFSS  03.2
0556:  DECF   33,F
0557:  MOVF   77,W
0558:  MOVWF  33
0559:  MOVLW  2D
055A:  MOVWF  3B
055B:  CALL   148
055C:  MOVF   33,W
055D:  MOVWF  77
055E:  CLRF   33
055F:  MOVLW  30
0560:  ADDWF  77,F
0561:  MOVF   77,W
0562:  MOVWF  3B
0563:  CALL   148
0564:  BCF    03.1
0565:  MOVF   3A,W
0566:  MOVWF  3E
0567:  MOVF   39,W
0568:  MOVWF  3D
0569:  MOVF   38,W
056A:  MOVWF  3C
056B:  MOVF   37,W
056C:  MOVWF  3B
056D:  CLRF   42
056E:  CLRF   41
056F:  CLRF   40
0570:  MOVLW  0A
0571:  MOVWF  3F
0572:  CALL   44F
0573:  MOVF   7A,W
0574:  MOVWF  3A
0575:  MOVF   79,W
0576:  MOVWF  39
0577:  MOVF   78,W
0578:  MOVWF  38
0579:  MOVF   77,W
057A:  MOVWF  37
057B:  DECFSZ 35,F
057C:  GOTO   506
057D:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #device ADC = 10 
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 4000000) 
*
0039:  MOVLW  48
003A:  MOVWF  04
003B:  BCF    03.7
003C:  MOVF   00,W
003D:  BTFSC  03.2
003E:  GOTO   04D
003F:  MOVLW  01
0040:  MOVWF  78
0041:  CLRF   77
0042:  DECFSZ 77,F
0043:  GOTO   042
0044:  DECFSZ 78,F
0045:  GOTO   041
0046:  MOVLW  4A
0047:  MOVWF  77
0048:  DECFSZ 77,F
0049:  GOTO   048
004A:  GOTO   04B
004B:  DECFSZ 00,F
004C:  GOTO   03F
004D:  RETURN
....................  
.................... #use fast_io(c) 
.................... #use fast_io(e) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00B7:  MOVLW  0F
00B8:  BSF    03.5
00B9:  ANDWF  06,W
00BA:  IORLW  F0
00BB:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00BC:  BCF    03.5
00BD:  BSF    06.2
....................    delay_cycles(1); 
00BE:  NOP
....................    lcd_output_enable(1); 
00BF:  BSF    06.0
....................    delay_cycles(1); 
00C0:  NOP
....................    high = lcd_read_nibble(); 
00C1:  CALL   0AB
00C2:  MOVF   78,W
00C3:  MOVWF  43
....................        
....................    lcd_output_enable(0); 
00C4:  BCF    06.0
....................    delay_cycles(1); 
00C5:  NOP
....................    lcd_output_enable(1); 
00C6:  BSF    06.0
....................    delay_us(1); 
00C7:  NOP
....................    low = lcd_read_nibble(); 
00C8:  CALL   0AB
00C9:  MOVF   78,W
00CA:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
00CB:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00CC:  MOVLW  0F
00CD:  BSF    03.5
00CE:  ANDWF  06,W
00CF:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00D0:  BCF    03.5
00D1:  SWAPF  43,W
00D2:  MOVWF  77
00D3:  MOVLW  F0
00D4:  ANDWF  77,F
00D5:  MOVF   77,W
00D6:  IORWF  42,W
00D7:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
00AB:  MOVF   06,W
00AC:  MOVWF  77
00AD:  SWAPF  06,W
00AE:  ANDLW  0F
00AF:  MOVWF  78
....................   #endif 
00B0:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
009F:  SWAPF  43,W
00A0:  ANDLW  F0
00A1:  MOVWF  77
00A2:  MOVLW  0F
00A3:  ANDWF  06,W
00A4:  IORWF  77,W
00A5:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
00A6:  NOP
....................    lcd_output_enable(1); 
00A7:  BSF    06.0
....................    delay_us(2); 
00A8:  GOTO   0A9
....................    lcd_output_enable(0); 
00A9:  BCF    06.0
00AA:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00B1:  BSF    03.5
00B2:  BCF    06.0
....................    lcd_rs_tris(); 
00B3:  BCF    06.1
....................    lcd_rw_tris(); 
00B4:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00B5:  BCF    03.5
00B6:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D8:  MOVF   78,W
00D9:  MOVWF  42
00DA:  BTFSC  42.7
00DB:  GOTO   0B7
....................    lcd_output_rs(address); 
00DC:  BTFSS  40.0
00DD:  BCF    06.1
00DE:  BTFSC  40.0
00DF:  BSF    06.1
....................    delay_cycles(1); 
00E0:  NOP
....................    lcd_output_rw(0); 
00E1:  BCF    06.2
....................    delay_cycles(1); 
00E2:  NOP
....................    lcd_output_enable(0); 
00E3:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
00E4:  SWAPF  41,W
00E5:  MOVWF  42
00E6:  MOVLW  0F
00E7:  ANDWF  42,F
00E8:  MOVF   42,W
00E9:  MOVWF  43
00EA:  CALL   09F
....................    lcd_send_nibble(n & 0xf); 
00EB:  MOVF   41,W
00EC:  ANDLW  0F
00ED:  MOVWF  42
00EE:  MOVWF  43
00EF:  CALL   09F
00F0:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00F1:  MOVLW  0F
00F2:  BSF    03.5
00F3:  ANDWF  06,W
00F4:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00F5:  BCF    06.0
....................    lcd_rs_tris(); 
00F6:  BCF    06.1
....................    lcd_rw_tris(); 
00F7:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00F8:  BCF    03.5
00F9:  BCF    06.1
....................    lcd_output_rw(0); 
00FA:  BCF    06.2
....................    lcd_output_enable(0); 
00FB:  BCF    06.0
00FC:  CLRF   27
00FD:  BTFSC  0B.7
00FE:  BSF    27.7
00FF:  BCF    0B.7
....................      
....................    delay_ms(15); 
0100:  MOVLW  0F
0101:  MOVWF  48
0102:  CALL   039
0103:  BTFSC  27.7
0104:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
0105:  MOVLW  01
0106:  MOVWF  2E
0107:  MOVF   2E,W
0108:  SUBLW  03
0109:  BTFSS  03.0
010A:  GOTO   119
....................    { 
....................        lcd_send_nibble(3); 
010B:  MOVLW  03
010C:  MOVWF  43
010D:  CALL   09F
010E:  CLRF   27
010F:  BTFSC  0B.7
0110:  BSF    27.7
0111:  BCF    0B.7
....................        delay_ms(5); 
0112:  MOVLW  05
0113:  MOVWF  48
0114:  CALL   039
0115:  BTFSC  27.7
0116:  BSF    0B.7
0117:  INCF   2E,F
0118:  GOTO   107
....................    } 
....................     
....................    lcd_send_nibble(2); 
0119:  MOVLW  02
011A:  MOVWF  43
011B:  CALL   09F
011C:  CLRF   27
011D:  BTFSC  0B.7
011E:  BSF    27.7
011F:  BCF    0B.7
....................    delay_ms(5); 
0120:  MOVLW  05
0121:  MOVWF  48
0122:  CALL   039
0123:  BTFSC  27.7
0124:  BSF    0B.7
....................    for(i=0;i<=3;++i) 
0125:  CLRF   2E
0126:  MOVF   2E,W
0127:  SUBLW  03
0128:  BTFSS  03.0
0129:  GOTO   133
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
012A:  MOVF   2E,W
012B:  CALL   031
012C:  MOVWF  2F
012D:  CLRF   40
012E:  MOVF   2F,W
012F:  MOVWF  41
0130:  CALL   0B1
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0131:  INCF   2E,F
0132:  GOTO   126
0133:  BCF    0A.3
0134:  BCF    0A.4
0135:  GOTO   5AB (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0136:  DECFSZ 3D,W
0137:  GOTO   139
0138:  GOTO   13C
....................       address=LCD_LINE_TWO; 
0139:  MOVLW  40
013A:  MOVWF  3E
013B:  GOTO   13D
....................    else 
....................       address=0; 
013C:  CLRF   3E
....................       
....................    address+=x-1; 
013D:  MOVLW  01
013E:  SUBWF  3C,W
013F:  ADDWF  3E,F
....................    lcd_send_byte(0,0x80|address); 
0140:  MOVF   3E,W
0141:  IORLW  80
0142:  MOVWF  3F
0143:  CLRF   40
0144:  MOVF   3F,W
0145:  MOVWF  41
0146:  CALL   0B1
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0147:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0148:  MOVF   3B,W
0149:  XORLW  07
014A:  BTFSC  03.2
014B:  GOTO   156
014C:  XORLW  0B
014D:  BTFSC  03.2
014E:  GOTO   15B
014F:  XORLW  06
0150:  BTFSC  03.2
0151:  GOTO   169
0152:  XORLW  02
0153:  BTFSC  03.2
0154:  GOTO   16F
0155:  GOTO   174
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0156:  MOVLW  01
0157:  MOVWF  3C
0158:  MOVWF  3D
0159:  CALL   136
015A:  GOTO   179
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
015B:  CLRF   40
015C:  MOVLW  01
015D:  MOVWF  41
015E:  CALL   0B1
015F:  CLRF   27
0160:  BTFSC  0B.7
0161:  BSF    27.7
0162:  BCF    0B.7
....................                      delay_ms(2); 
0163:  MOVLW  02
0164:  MOVWF  48
0165:  CALL   039
0166:  BTFSC  27.7
0167:  BSF    0B.7
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0168:  GOTO   179
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0169:  MOVLW  01
016A:  MOVWF  3C
016B:  MOVLW  02
016C:  MOVWF  3D
016D:  CALL   136
016E:  GOTO   179
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
016F:  CLRF   40
0170:  MOVLW  10
0171:  MOVWF  41
0172:  CALL   0B1
0173:  GOTO   179
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0174:  MOVLW  01
0175:  MOVWF  40
0176:  MOVF   3B,W
0177:  MOVWF  41
0178:  CALL   0B1
....................      #endif 
....................    } 
0179:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #INT_AD 
.................... void ADC_Interrupt() 
.................... { 
....................    output_high(pin_c5); 
*
004E:  BSF    07.5
....................    delay_ms(200); 
004F:  MOVLW  C8
0050:  MOVWF  48
0051:  CALL   039
....................    output_low(pin_c5); 
0052:  BCF    07.5
0053:  BCF    0C.6
0054:  BCF    0A.3
0055:  BCF    0A.4
0056:  GOTO   01D
.................... } 
....................  
.................... unsigned long int bilgi; 
.................... float voltaj; 
....................  
.................... void main() 
*
057E:  BSF    03.5
057F:  BSF    1F.0
0580:  BSF    1F.1
0581:  BSF    1F.2
0582:  BCF    1F.3
0583:  BCF    03.7
0584:  MOVLW  1F
0585:  ANDWF  03,F
.................... { 
....................    setup_psp(PSP_DISABLED); 
0586:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
0587:  BCF    03.5
0588:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
0589:  MOVLW  00
058A:  MOVWF  78
058B:  MOVWF  12
058C:  MOVLW  00
058D:  BSF    03.5
058E:  MOVWF  12
....................    //setup_adc_ports(NO_ANALOGS); 
....................    //setup_adc(ADC_OFF); 
....................    setup_CCP1(CCP_OFF); 
058F:  MOVLW  F0
0590:  BCF    03.5
0591:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF);  
0592:  ANDWF  1D,F
....................     
....................    set_tris_c(0x00); 
0593:  MOVLW  00
0594:  BSF    03.5
0595:  MOVWF  07
....................    set_tris_e(0x0F); 
0596:  BSF    09.0
0597:  BSF    09.1
0598:  BSF    09.2
....................     
....................    output_c(0x00); 
0599:  BCF    03.5
059A:  CLRF   07
....................     
....................    setup_adc(adc_clock_div_32); 
059B:  BCF    1F.6
059C:  BSF    1F.7
059D:  BSF    03.5
059E:  BSF    1F.7
059F:  BCF    03.5
05A0:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF); 
05A1:  BSF    03.5
05A2:  BCF    1F.0
05A3:  BCF    1F.1
05A4:  BCF    1F.2
05A5:  BSF    1F.3
....................     
....................    enable_interrupts(INT_AD); 
05A6:  BSF    0C.6
....................    enable_interrupts(GLOBAL); 
05A7:  MOVLW  C0
05A8:  BCF    03.5
05A9:  IORWF  0B,F
....................     
....................    lcd_init(); 
05AA:  GOTO   0F1
....................     
....................    printf(lcd_putc, "\f ADC App_w_pot "); 
05AB:  MOVLW  57
05AC:  BSF    03.6
05AD:  MOVWF  0D
05AE:  MOVLW  00
05AF:  MOVWF  0F
05B0:  BCF    03.6
05B1:  CALL   17A
....................    delay_ms(1500); 
05B2:  MOVLW  06
05B3:  MOVWF  2E
05B4:  CLRF   27
05B5:  BTFSC  0B.7
05B6:  BSF    27.7
05B7:  BCF    0B.7
05B8:  MOVLW  FA
05B9:  MOVWF  48
05BA:  CALL   039
05BB:  BTFSC  27.7
05BC:  BSF    0B.7
05BD:  DECFSZ 2E,F
05BE:  GOTO   5B4
....................     
....................    while(true){ 
....................       set_adc_channel(5); 
05BF:  MOVLW  28
05C0:  MOVWF  78
05C1:  MOVF   1F,W
05C2:  ANDLW  C7
05C3:  IORWF  78,W
05C4:  MOVWF  1F
....................        
....................       delay_us(20); 
05C5:  MOVLW  06
05C6:  MOVWF  77
05C7:  DECFSZ 77,F
05C8:  GOTO   5C7
05C9:  NOP
....................        
....................       bilgi = read_adc(); 
05CA:  BSF    1F.2
05CB:  BTFSC  1F.2
05CC:  GOTO   5CB
05CD:  BSF    03.5
05CE:  MOVF   1E,W
05CF:  BCF    03.5
05D0:  MOVWF  28
05D1:  MOVF   1E,W
05D2:  MOVWF  29
....................        
....................       voltaj = 1 + (0.001953125 * bilgi); 
05D3:  MOVF   29,W
05D4:  MOVWF  2F
05D5:  MOVF   28,W
05D6:  MOVWF  2E
05D7:  CALL   1C5
05D8:  CLRF   3E
05D9:  CLRF   3D
05DA:  CLRF   3C
05DB:  MOVLW  76
05DC:  MOVWF  3B
05DD:  MOVF   7A,W
05DE:  MOVWF  42
05DF:  MOVF   79,W
05E0:  MOVWF  41
05E1:  MOVF   78,W
05E2:  MOVWF  40
05E3:  MOVF   77,W
05E4:  MOVWF  3F
05E5:  CALL   1E2
05E6:  BCF    03.1
05E7:  CLRF   31
05E8:  CLRF   30
05E9:  CLRF   2F
05EA:  MOVLW  7F
05EB:  MOVWF  2E
05EC:  MOVF   7A,W
05ED:  MOVWF  35
05EE:  MOVF   79,W
05EF:  MOVWF  34
05F0:  MOVF   78,W
05F1:  MOVWF  33
05F2:  MOVF   77,W
05F3:  MOVWF  32
05F4:  CALL   257
05F5:  MOVF   7A,W
05F6:  MOVWF  2D
05F7:  MOVF   79,W
05F8:  MOVWF  2C
05F9:  MOVF   78,W
05FA:  MOVWF  2B
05FB:  MOVF   77,W
05FC:  MOVWF  2A
....................        
....................       printf(lcd_putc, "\fAN5 Kanali"); 
05FD:  MOVLW  60
05FE:  BSF    03.6
05FF:  MOVWF  0D
0600:  MOVLW  00
0601:  MOVWF  0F
0602:  BCF    03.6
0603:  CALL   17A
....................       delay_ms(1500); 
0604:  MOVLW  06
0605:  MOVWF  2E
0606:  CLRF   27
0607:  BTFSC  0B.7
0608:  BSF    27.7
0609:  BCF    0B.7
060A:  MOVLW  FA
060B:  MOVWF  48
060C:  CALL   039
060D:  BTFSC  27.7
060E:  BSF    0B.7
060F:  DECFSZ 2E,F
0610:  GOTO   606
....................       printf(lcd_putc, "\fDijital = %lu", bilgi); 
0611:  MOVLW  66
0612:  BSF    03.6
0613:  MOVWF  0D
0614:  MOVLW  00
0615:  MOVWF  0F
0616:  BCF    03.0
0617:  MOVLW  0B
0618:  BCF    03.6
0619:  MOVWF  2E
061A:  CALL   398
061B:  MOVLW  10
061C:  MOVWF  04
061D:  MOVF   29,W
061E:  MOVWF  2F
061F:  MOVF   28,W
0620:  MOVWF  2E
0621:  CALL   3EC
....................        
....................       printf(lcd_putc, "\nVoltaj = %fV", voltaj); 
0622:  MOVLW  6E
0623:  BSF    03.6
0624:  MOVWF  0D
0625:  MOVLW  00
0626:  MOVWF  0F
0627:  BCF    03.0
0628:  MOVLW  0A
0629:  BCF    03.6
062A:  MOVWF  2E
062B:  CALL   398
062C:  MOVLW  89
062D:  MOVWF  04
062E:  MOVF   2D,W
062F:  MOVWF  31
0630:  MOVF   2C,W
0631:  MOVWF  30
0632:  MOVF   2B,W
0633:  MOVWF  2F
0634:  MOVF   2A,W
0635:  MOVWF  2E
0636:  MOVLW  02
0637:  MOVWF  32
0638:  CALL   49E
0639:  MOVLW  56
063A:  MOVWF  3B
063B:  CALL   148
....................        
....................       delay_ms(2500); 
063C:  MOVLW  0A
063D:  MOVWF  2E
063E:  CLRF   27
063F:  BTFSC  0B.7
0640:  BSF    27.7
0641:  BCF    0B.7
0642:  MOVLW  FA
0643:  MOVWF  48
0644:  CALL   039
0645:  BTFSC  27.7
0646:  BSF    0B.7
0647:  DECFSZ 2E,F
0648:  GOTO   63E
....................        
....................       set_adc_channel(6); 
0649:  MOVLW  30
064A:  MOVWF  78
064B:  MOVF   1F,W
064C:  ANDLW  C7
064D:  IORWF  78,W
064E:  MOVWF  1F
....................        
....................       delay_us(20); 
064F:  MOVLW  06
0650:  MOVWF  77
0651:  DECFSZ 77,F
0652:  GOTO   651
0653:  NOP
....................        
....................       bilgi = read_adc(); 
0654:  BSF    1F.2
0655:  BTFSC  1F.2
0656:  GOTO   655
0657:  BSF    03.5
0658:  MOVF   1E,W
0659:  BCF    03.5
065A:  MOVWF  28
065B:  MOVF   1E,W
065C:  MOVWF  29
....................        
....................       voltaj = 1 + (0.001953125 * bilgi); 
065D:  MOVF   29,W
065E:  MOVWF  2F
065F:  MOVF   28,W
0660:  MOVWF  2E
0661:  CALL   1C5
0662:  CLRF   3E
0663:  CLRF   3D
0664:  CLRF   3C
0665:  MOVLW  76
0666:  MOVWF  3B
0667:  MOVF   7A,W
0668:  MOVWF  42
0669:  MOVF   79,W
066A:  MOVWF  41
066B:  MOVF   78,W
066C:  MOVWF  40
066D:  MOVF   77,W
066E:  MOVWF  3F
066F:  CALL   1E2
0670:  BCF    03.1
0671:  CLRF   31
0672:  CLRF   30
0673:  CLRF   2F
0674:  MOVLW  7F
0675:  MOVWF  2E
0676:  MOVF   7A,W
0677:  MOVWF  35
0678:  MOVF   79,W
0679:  MOVWF  34
067A:  MOVF   78,W
067B:  MOVWF  33
067C:  MOVF   77,W
067D:  MOVWF  32
067E:  CALL   257
067F:  MOVF   7A,W
0680:  MOVWF  2D
0681:  MOVF   79,W
0682:  MOVWF  2C
0683:  MOVF   78,W
0684:  MOVWF  2B
0685:  MOVF   77,W
0686:  MOVWF  2A
....................        
....................       printf(lcd_putc, "\fAN6 Kanali"); 
0687:  MOVLW  75
0688:  BSF    03.6
0689:  MOVWF  0D
068A:  MOVLW  00
068B:  MOVWF  0F
068C:  BCF    03.6
068D:  CALL   17A
....................       delay_ms(1500); 
068E:  MOVLW  06
068F:  MOVWF  2E
0690:  CLRF   27
0691:  BTFSC  0B.7
0692:  BSF    27.7
0693:  BCF    0B.7
0694:  MOVLW  FA
0695:  MOVWF  48
0696:  CALL   039
0697:  BTFSC  27.7
0698:  BSF    0B.7
0699:  DECFSZ 2E,F
069A:  GOTO   690
....................       printf(lcd_putc, "\fDijital = %lu", bilgi); 
069B:  MOVLW  7B
069C:  BSF    03.6
069D:  MOVWF  0D
069E:  MOVLW  00
069F:  MOVWF  0F
06A0:  BCF    03.0
06A1:  MOVLW  0B
06A2:  BCF    03.6
06A3:  MOVWF  2E
06A4:  CALL   398
06A5:  MOVLW  10
06A6:  MOVWF  04
06A7:  MOVF   29,W
06A8:  MOVWF  2F
06A9:  MOVF   28,W
06AA:  MOVWF  2E
06AB:  CALL   3EC
....................        
....................       printf(lcd_putc, "\nVoltaj = %fV", voltaj); 
06AC:  MOVLW  83
06AD:  BSF    03.6
06AE:  MOVWF  0D
06AF:  MOVLW  00
06B0:  MOVWF  0F
06B1:  BCF    03.0
06B2:  MOVLW  0A
06B3:  BCF    03.6
06B4:  MOVWF  2E
06B5:  CALL   398
06B6:  MOVLW  89
06B7:  MOVWF  04
06B8:  MOVF   2D,W
06B9:  MOVWF  31
06BA:  MOVF   2C,W
06BB:  MOVWF  30
06BC:  MOVF   2B,W
06BD:  MOVWF  2F
06BE:  MOVF   2A,W
06BF:  MOVWF  2E
06C0:  MOVLW  02
06C1:  MOVWF  32
06C2:  CALL   49E
06C3:  MOVLW  56
06C4:  MOVWF  3B
06C5:  CALL   148
....................        
....................       delay_ms(2500); 
06C6:  MOVLW  0A
06C7:  MOVWF  2E
06C8:  CLRF   27
06C9:  BTFSC  0B.7
06CA:  BSF    27.7
06CB:  BCF    0B.7
06CC:  MOVLW  FA
06CD:  MOVWF  48
06CE:  CALL   039
06CF:  BTFSC  27.7
06D0:  BSF    0B.7
06D1:  DECFSZ 2E,F
06D2:  GOTO   6C8
....................        
....................       set_adc_channel(7); 
06D3:  MOVLW  38
06D4:  MOVWF  78
06D5:  MOVF   1F,W
06D6:  ANDLW  C7
06D7:  IORWF  78,W
06D8:  MOVWF  1F
....................        
....................       delay_us(20); 
06D9:  MOVLW  06
06DA:  MOVWF  77
06DB:  DECFSZ 77,F
06DC:  GOTO   6DB
06DD:  NOP
....................        
....................       bilgi = read_adc(); 
06DE:  BSF    1F.2
06DF:  BTFSC  1F.2
06E0:  GOTO   6DF
06E1:  BSF    03.5
06E2:  MOVF   1E,W
06E3:  BCF    03.5
06E4:  MOVWF  28
06E5:  MOVF   1E,W
06E6:  MOVWF  29
....................        
....................       voltaj = 1 + (0.001953125 * bilgi); 
06E7:  MOVF   29,W
06E8:  MOVWF  2F
06E9:  MOVF   28,W
06EA:  MOVWF  2E
06EB:  CALL   1C5
06EC:  CLRF   3E
06ED:  CLRF   3D
06EE:  CLRF   3C
06EF:  MOVLW  76
06F0:  MOVWF  3B
06F1:  MOVF   7A,W
06F2:  MOVWF  42
06F3:  MOVF   79,W
06F4:  MOVWF  41
06F5:  MOVF   78,W
06F6:  MOVWF  40
06F7:  MOVF   77,W
06F8:  MOVWF  3F
06F9:  CALL   1E2
06FA:  BCF    03.1
06FB:  CLRF   31
06FC:  CLRF   30
06FD:  CLRF   2F
06FE:  MOVLW  7F
06FF:  MOVWF  2E
0700:  MOVF   7A,W
0701:  MOVWF  35
0702:  MOVF   79,W
0703:  MOVWF  34
0704:  MOVF   78,W
0705:  MOVWF  33
0706:  MOVF   77,W
0707:  MOVWF  32
0708:  CALL   257
0709:  MOVF   7A,W
070A:  MOVWF  2D
070B:  MOVF   79,W
070C:  MOVWF  2C
070D:  MOVF   78,W
070E:  MOVWF  2B
070F:  MOVF   77,W
0710:  MOVWF  2A
....................        
....................       printf(lcd_putc, "\fAN7 Kanali"); 
0711:  MOVLW  8A
0712:  BSF    03.6
0713:  MOVWF  0D
0714:  MOVLW  00
0715:  MOVWF  0F
0716:  BCF    03.6
0717:  CALL   17A
....................       delay_ms(1500); 
0718:  MOVLW  06
0719:  MOVWF  2E
071A:  CLRF   27
071B:  BTFSC  0B.7
071C:  BSF    27.7
071D:  BCF    0B.7
071E:  MOVLW  FA
071F:  MOVWF  48
0720:  CALL   039
0721:  BTFSC  27.7
0722:  BSF    0B.7
0723:  DECFSZ 2E,F
0724:  GOTO   71A
....................       printf(lcd_putc, "\fDijital = %lu", bilgi); 
0725:  MOVLW  90
0726:  BSF    03.6
0727:  MOVWF  0D
0728:  MOVLW  00
0729:  MOVWF  0F
072A:  BCF    03.0
072B:  MOVLW  0B
072C:  BCF    03.6
072D:  MOVWF  2E
072E:  CALL   398
072F:  MOVLW  10
0730:  MOVWF  04
0731:  MOVF   29,W
0732:  MOVWF  2F
0733:  MOVF   28,W
0734:  MOVWF  2E
0735:  CALL   3EC
....................        
....................       printf(lcd_putc, "\nVoltaj = %fV", voltaj); 
0736:  MOVLW  98
0737:  BSF    03.6
0738:  MOVWF  0D
0739:  MOVLW  00
073A:  MOVWF  0F
073B:  BCF    03.0
073C:  MOVLW  0A
073D:  BCF    03.6
073E:  MOVWF  2E
073F:  CALL   398
0740:  MOVLW  89
0741:  MOVWF  04
0742:  MOVF   2D,W
0743:  MOVWF  31
0744:  MOVF   2C,W
0745:  MOVWF  30
0746:  MOVF   2B,W
0747:  MOVWF  2F
0748:  MOVF   2A,W
0749:  MOVWF  2E
074A:  MOVLW  02
074B:  MOVWF  32
074C:  CALL   49E
074D:  MOVLW  56
074E:  MOVWF  3B
074F:  CALL   148
....................        
....................       delay_ms(2500); 
0750:  MOVLW  0A
0751:  MOVWF  2E
0752:  CLRF   27
0753:  BTFSC  0B.7
0754:  BSF    27.7
0755:  BCF    0B.7
0756:  MOVLW  FA
0757:  MOVWF  48
0758:  CALL   039
0759:  BTFSC  27.7
075A:  BSF    0B.7
075B:  DECFSZ 2E,F
075C:  GOTO   752
075D:  GOTO   5BF
....................    } 
....................     
.................... } 
....................  
075E:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
