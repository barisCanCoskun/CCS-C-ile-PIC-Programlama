D G "__PCM__" 0 250 ""5.007""
D G "__DEVICE__" 0 250 "877"
D G "__DATE__" 0 250 ""19-Jul-19""
D G "__TIME__" 0 250 ""15:50:33"" "Standard Header file for the PIC16F877 device ////////////////"
c L "set_tris_a" 1 5 13 "FUNCTION"
v L "value" 1 28 "int8" `53 
f B "set_tris_a" 1 28 "void(int8 value)" `52 
v L "value" 1 29 "int8" `55 
f B "set_tris_b" 1 29 "void(int8 value)" `54 
v L "value" 1 30 "int8" `57 
f B "set_tris_c" 1 30 "void(int8 value)" `56 
v L "value" 1 31 "int8" `59 
f B "set_tris_d" 1 31 "void(int8 value)" `58 
v L "value" 1 32 "int8" `61 
f B "set_tris_e" 1 32 "void(int8 value)" `60 
f B "get_tris_a" 1 33 "int8()" `62 
f B "get_tris_b" 1 34 "int8()" `63 
f B "get_tris_c" 1 35 "int8()" `64 
f B "get_tris_d" 1 36 "int8()" `65 
f B "get_tris_e" 1 37 "int8()" `66 
v L "value" 1 38 "int8" `68 
f B "output_a" 1 38 "void(int8 value)" `67 
v L "value" 1 39 "int8" `70 
f B "output_b" 1 39 "void(int8 value)" `69 
v L "value" 1 40 "int8" `72 
f B "output_c" 1 40 "void(int8 value)" `71 
v L "value" 1 41 "int8" `74 
f B "output_d" 1 41 "void(int8 value)" `73 
v L "value" 1 42 "int8" `76 
f B "output_e" 1 42 "void(int8 value)" `75 
f B "input_a" 1 43 "int8()" `77 
f B "input_b" 1 44 "int8()" `78 
f B "input_c" 1 45 "int8()" `79 
f B "input_d" 1 46 "int8()" `80 
f B "input_e" 1 47 "int8()" `81 
f B "input_change_a" 1 48 "int8()" `82 
f B "input_change_b" 1 49 "int8()" `83 
f B "input_change_c" 1 50 "int8()" `84 
f B "input_change_d" 1 51 "int8()" `85 
f B "input_change_e" 1 52 "int8()" `86 
v L "pin" 1 53 "int16" `88 
f B "input" 1 53 "int8(int16 pin)" `87 
v L "pin" 1 54 "int16" `90 
f B "input_state" 1 54 "int8(int16 pin)" `89 
v L "pin" 1 55 "int16" `92 
f B "output_low" 1 55 "void(int16 pin)" `91 
v L "pin" 1 56 "int16" `94 
f B "output_high" 1 56 "void(int16 pin)" `93 
v L "pin" 1 57 "int16" `96 
f B "output_toggle" 1 57 "void(int16 pin)" `95 
v L "pin" 1 58 "int16" `98 
v L "level" 1 58 "int8" `99 
f B "output_bit" 1 58 "void(int16 pin,int8 level)" `97 
v L "pin" 1 59 "int16" `101 
f B "output_float" 1 59 "void(int16 pin)" `100 
v L "pin" 1 60 "int16" `103 
f B "output_drive" 1 60 "void(int16 pin)" `102  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 64 "40"
d G "PIN_A1" 1 65 "41"
d G "PIN_A2" 1 66 "42"
d G "PIN_A3" 1 67 "43"
d G "PIN_A4" 1 68 "44"
d G "PIN_A5" 1 69 "45"
d G "PIN_B0" 1 71 "48"
d G "PIN_B1" 1 72 "49"
d G "PIN_B2" 1 73 "50"
d G "PIN_B3" 1 74 "51"
d G "PIN_B4" 1 75 "52"
d G "PIN_B5" 1 76 "53"
d G "PIN_B6" 1 77 "54"
d G "PIN_B7" 1 78 "55"
d G "PIN_C0" 1 80 "56"
d G "PIN_C1" 1 81 "57"
d G "PIN_C2" 1 82 "58"
d G "PIN_C3" 1 83 "59"
d G "PIN_C4" 1 84 "60"
d G "PIN_C5" 1 85 "61"
d G "PIN_C6" 1 86 "62"
d G "PIN_C7" 1 87 "63"
d G "PIN_D0" 1 89 "64"
d G "PIN_D1" 1 90 "65"
d G "PIN_D2" 1 91 "66"
d G "PIN_D3" 1 92 "67"
d G "PIN_D4" 1 93 "68"
d G "PIN_D5" 1 94 "69"
d G "PIN_D6" 1 95 "70"
d G "PIN_D7" 1 96 "71"
d G "PIN_E0" 1 98 "72"
d G "PIN_E1" 1 99 "73"
d G "PIN_E2" 1 100 "74"
d G "FALSE" 1 103 "0"
d G "TRUE" 1 104 "1"
d G "BYTE" 1 106 "int8"
d G "BOOLEAN" 1 107 "int1"
d G "getc" 1 109 "getch"
d G "fgetc" 1 110 "getch"
d G "getchar" 1 111 "getch"
d G "putc" 1 112 "putchar"
d G "fputc" 1 113 "putchar"
d G "fgets" 1 114 "gets"
d G "fputs" 1 115 "puts"
c L "output_drive" 1 5 3 "FUNCTION"
f B "restart_cause" 1 120 "int8()" `104 
f B "reset_cpu" 1 121 "void()" `105 
f B "sleep" 1 122 "void()" `106  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 124 "3"
d G "WDT_TIMEOUT" 1 125 "11"
d G "MCLR_FROM_SLEEP" 1 126 "19"
d G "MCLR_FROM_RUN" 1 127 "27"
d G "NORMAL_POWER_UP" 1 128 "25"
d G "BROWNOUT_RESTART" 1 129 "26"
c L "sleep" 1 5 5 "FUNCTION"
v L "mode" 1 136 "int8" `108 
f B "setup_timer_0" 1 136 "void(int8 mode)" `107 
v L "value" 1 137 "int8" `110 
f B "set_timer0" 1 137 "void(int8 value)" `109 
f B "get_timer0" 1 138 "int8()" `111 
v L "mode" 1 139 "int8" `113 
v L "prescaler" 1 139 "int8" `114 
f B "setup_counters" 1 139 "void(int8 mode,int8 prescaler)" `112 
v L "value" 1 140 "int8" `116 
f B "set_rtcc" 1 140 "void(int8 value)" `115 
f B "get_rtcc" 1 141 "int8()" `117  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 143 "0"
d G "T0_EXT_L_TO_H" 1 144 "32"
d G "T0_EXT_H_TO_L" 1 145 "48"
d G "T0_DIV_1" 1 147 "8"
d G "T0_DIV_2" 1 148 "0"
d G "T0_DIV_4" 1 149 "1"
d G "T0_DIV_8" 1 150 "2"
d G "T0_DIV_16" 1 151 "3"
d G "T0_DIV_32" 1 152 "4"
d G "T0_DIV_64" 1 153 "5"
d G "T0_DIV_128" 1 154 "6"
d G "T0_DIV_256" 1 155 "7"
d G "T0_8_BIT" 1 158 "0"
d G "RTCC_INTERNAL" 1 160 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 161 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 162 "48"
d G "RTCC_DIV_1" 1 163 "8"
d G "RTCC_DIV_2" 1 164 "0"
d G "RTCC_DIV_4" 1 165 "1"
d G "RTCC_DIV_8" 1 166 "2"
d G "RTCC_DIV_16" 1 167 "3"
d G "RTCC_DIV_32" 1 168 "4"
d G "RTCC_DIV_64" 1 169 "5"
d G "RTCC_DIV_128" 1 170 "6"
d G "RTCC_DIV_256" 1 171 "7"
d G "RTCC_8_BIT" 1 172 "0"
c L "get_rtcc" 1 5 8 "FUNCTION"
v L "mode" 1 183 "int16" `119 
f B "setup_wdt" 1 183 "void(int16 mode)" `118 
f B "restart_wdt" 1 184 "void()" `120  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 187 "8"
d G "WDT_36MS" 1 188 "9"
d G "WDT_72MS" 1 189 "10"
d G "WDT_144MS" 1 190 "11"
d G "WDT_288MS" 1 191 "12"
d G "WDT_576MS" 1 192 "13"
d G "WDT_1152MS" 1 193 "14"
d G "WDT_2304MS" 1 194 "15"
c L "restart_wdt" 1 5 3 "FUNCTION"
v L "mode" 1 200 "int16" `122 
f B "setup_timer_1" 1 200 "void(int16 mode)" `121 
f B "get_timer1" 1 201 "int16()" `123 
v L "value" 1 202 "int16" `125 
f B "set_timer1" 1 202 "void(int16 value)" `124  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 205 "0"
d G "T1_INTERNAL" 1 206 "0x85"
d G "T1_EXTERNAL" 1 207 "0x87"
d G "T1_EXTERNAL_SYNC" 1 208 "0x83"
d G "T1_CLK_OUT" 1 210 "8"
d G "T1_DIV_BY_1" 1 212 "0"
d G "T1_DIV_BY_2" 1 213 "0x10"
d G "T1_DIV_BY_4" 1 214 "0x20"
d G "T1_DIV_BY_8" 1 215 "0x30"
c L "set_timer1" 1 5 3 "FUNCTION"
v L "mode" 1 220 "int8" `127 
v L "period" 1 220 "int8" `128 
v L "postscale" 1 220 "int8" `129 
f B "setup_timer_2" 1 220 "void(int8 mode,int8 period,int8 postscale)" `126 
f B "get_timer2" 1 221 "int8()" `130 
v L "value" 1 222 "int8" `132 
f B "set_timer2" 1 222 "void(int8 value)" `131  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 224 "0"
d G "T2_DIV_BY_1" 1 225 "4"
d G "T2_DIV_BY_4" 1 226 "5"
d G "T2_DIV_BY_16" 1 227 "6"
c L "set_timer2" 1 5 4 "FUNCTION"
v L "mode" 1 233 "int32" `134 
f B "setup_ccp1" 1 233 "void(int32 mode)" `133 
v L "mode" 1 234 "int32" `136 
v L "pwm" 1 234 "int8" `137 
f G "setup_ccp1" 1 234 "void(int32 mode,int8 pwm)" `135 
v L "value" 1 235 "int16" `139 
f B "set_pwm1_duty" 1 235 "void(int16 value)" `138  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 237 "0"
d G "CCP_CAPTURE_FE" 1 238 "4"
d G "CCP_CAPTURE_RE" 1 239 "5"
d G "CCP_CAPTURE_DIV_4" 1 240 "6"
d G "CCP_CAPTURE_DIV_16" 1 241 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 242 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 243 "9"
d G "CCP_COMPARE_INT" 1 244 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 245 "0xB"
d G "CCP_PWM" 1 246 "0xC"
d G "CCP_PWM_PLUS_1" 1 247 "0x1c"
d G "CCP_PWM_PLUS_2" 1 248 "0x2c"
d G "CCP_PWM_PLUS_3" 1 249 "0x3c"
c L "set_pwm1_duty" 1 5 1 "FUNCTION"
v L "mode" 1 255 "int32" `144 
f B "setup_ccp2" 1 255 "void(int32 mode)" `143 
v L "mode" 1 256 "int32" `146 
v L "pwm" 1 256 "int8" `147 
f G "setup_ccp2" 1 256 "void(int32 mode,int8 pwm)" `145 
v L "value" 1 257 "int16" `149 
f B "set_pwm2_duty" 1 257 "void(int16 value)" `148 
c L "set_pwm2_duty" 1 5 5 "FUNCTION"
v L "mode" 1 266 "int8" `154 
f B "setup_psp" 1 266 "void(int8 mode)" `153 
f B "psp_output_full" 1 267 "int8()" `155 
f B "psp_input_full" 1 268 "int8()" `156 
f B "psp_overflow" 1 269 "int8()" `157  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 271 "0x10"
d G "PSP_DISABLED" 1 272 "0"
c L "psp_overflow" 1 5 3 "FUNCTION"
v L "mode" 1 279 "int32" `160 
f B "setup_spi" 1 279 "void(int32 mode)" `159 
v L "value" 1 280 "int8" `162 
f B "spi_write" 1 280 "void(int8 value)" `161 
f B "spi_read" 1 281 "int8()" `163 
v L "value" 1 282 "int8" `165 
f G "spi_read" 1 282 "int8(int8 value)" `164 
f B "spi_data_in" 1 283 "int8()" `166  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 285 "0x00"
d G "SPI_MASTER" 1 286 "0x20"
d G "SPI_SLAVE" 1 287 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 288 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 289 "0x00"
d G "SPI_CLK_DIV_4" 1 290 "0x00"
d G "SPI_CLK_DIV_16" 1 291 "0x01"
d G "SPI_CLK_DIV_64" 1 292 "0x02"
d G "SPI_CLK_T2" 1 293 "0x03"
d G "SPI_SS_DISABLED" 1 294 "0x01"
d G "SPI_XMIT_L_TO_H" 1 296 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 297 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 299 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 300 "0x8000"
d G "SPI_L_TO_H" 1 303 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 304 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 5 2 "FUNCTION"
v L "baud" 1 308 "int32" `168 
f B "setup_uart" 1 308 "void(int32 baud)" `167 
v L "baud" 1 309 "int32" `170 
v L "stream" 1 309 "int8" `171 
f G "setup_uart" 1 309 "void(int32 baud,int8 stream)" `169 
v L "baud" 1 310 "int32" `173 
v L "stream" 1 310 "int8" `174 
v L "clock" 1 310 "int32" `175 
f G "setup_uart" 1 310 "void(int32 baud,int8 stream,int32 clock)" `172 
v L "baud" 1 311 "int32" `177 
f B "set_uart_speed" 1 311 "void(int32 baud)" `176 
v L "baud" 1 312 "int32" `179 
v L "stream" 1 312 "int8" `180 
f G "set_uart_speed" 1 312 "void(int32 baud,int8 stream)" `178 
v L "baud" 1 313 "int32" `182 
v L "stream" 1 313 "int8" `183 
v L "clock" 1 313 "int32" `184 
f G "set_uart_speed" 1 313 "void(int32 baud,int8 stream,int32 clock)" `181  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 317 "2"
d G "UART_DATA" 1 318 "4"
c L "set_uart_speed" 1 5 4 "FUNCTION"
v L "mode" 1 325 "int16" `186 
f B "setup_adc" 1 325 "void(int16 mode)" `185 
f B "read_adc" 1 326 "int8()" `187 
v L "mode" 1 327 "int8" `189 
f G "read_adc" 1 327 "int8(int8 mode)" `188 
f G "read_adc" 1 328 "int16()" `190 
v L "mode" 1 329 "int8" `192 
f G "read_adc" 1 329 "int16(int8 mode)" `191 
f B "adc_done" 1 330 "int8()" `193  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 332 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 333 "0x100"
d G "ADC_CLOCK_DIV_8" 1 334 "0x40"
d G "ADC_CLOCK_DIV_32" 1 335 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 336 "0xc0" "Internal 2-6us"
c L "adc_done" 1 5 1 "FUNCTION"
v L "setting" 1 339 "int8" `195 
f B "setup_adc_ports" 1 339 "void(int8 setting)" `194 
v L "channel" 1 340 "int8" `197 
f B "set_adc_channel" 1 340 "void(int8 channel)" `196  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 342 "7" "None"
d G "ALL_ANALOG" 1 343 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 1 344 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 1 345 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 346 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 347 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 348 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 1 349 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 1 350 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 1 351 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 1 352 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 1 353 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 354 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 355 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 356 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 357 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 1 358 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 1 359 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 360 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 361 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 362 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 1 363 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 1 364 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 1 365 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 1 366 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 367 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 368 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 369 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 372 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 373 "1"
d G "ADC_READ_ONLY" 1 374 "6"
c L "set_adc_channel" 1 5 3 "FUNCTION"
v L "x" 1 380 "sint8" `199 
f B "abs" 1 380 "sint8(sint8 x)" `198 
v L "x" 1 381 "sint16" `201 
f G "abs" 1 381 "sint16(sint16 x)" `200 
v L "x" 1 382 "sint32" `203 
f G "abs" 1 382 "sint32(sint32 x)" `202 
v L "x" 1 383 "float" `205 
f G "abs" 1 383 "float(float x)" `204 
v L "??65535" 1 384 "int8" `207 
v L "??65535" 1 384 "int8" `208 
f B "_mul" 1 384 "int16(int8 ,int8 )" `206 
v L "??65535" 1 385 "sint8" `207 
v L "??65535" 1 385 "sint8" `211 
f G "_mul" 1 385 "sint16(sint8 ,sint8 )" `209 
v L "??65535" 1 386 "int16" `207 
v L "??65535" 1 386 "int16" `214 
f G "_mul" 1 386 "int32(int16 ,int16 )" `212 
v L "??65535" 1 387 "sint16" `207 
v L "??65535" 1 387 "sint16" `217 
f G "_mul" 1 387 "sint32(sint16 ,sint16 )" `215  "Memory Manipulation Prototypes:"
v L "bank" 1 390 "int8" `219 
v L "offset" 1 390 "int8" `220 
f B "read_bank" 1 390 "int8(int8 bank,int8 offset)" `218 
v L "bank" 1 391 "int8" `222 
v L "offset" 1 391 "int8" `223 
v L "value" 1 391 "int8" `224 
f B "write_bank" 1 391 "void(int8 bank,int8 offset,int8 value)" `221 
v L "dest" 1 392 "*int8" `226 
v L "src" 1 392 "*int8" `227 
f B "strcpy" 1 392 "void(*int8 dest,*int8 src)" `225 
v L "dest" 1 393 "*int8" `229 
v L "src" 1 393 "*int8" `230 
f B "strcopy" 1 393 "void(*int8 dest,*int8 src)" `228 
v L "destination" 1 394 "*int8" `232 
v L "value" 1 394 "int8" `233 
v L "num" 1 394 "int16" `234 
f B "memset" 1 394 "void(*int8 destination,int8 value,int16 num)" `231 
v L "destination" 1 395 "*int8" `236 
v L "source" 1 395 "*int8" `237 
v L "num" 1 395 "int16" `238 
f B "memcpy" 1 395 "void(*int8 destination,*int8 source,int16 num)" `235  "String Prototypes:"
v L "cvalue" 1 398 "int8" `240 
f B "toupper" 1 398 "int8(int8 cvalue)" `239 
v L "cvalue" 1 399 "int8" `242 
f B "tolower" 1 399 "int8(int8 cvalue)" `241 
v L "string" 1 400 "*int8" `244 
v L "cstring" 1 400 "*int8" `245 
f B "sprintf" 1 400 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `243  "Data Manipulators Prototypes:"
v L "address" 1 403 "*int8" `248 
v L "bytes" 1 403 "int8" `249 
v L "value" 1 403 "int8" `250 
f B "shift_left" 1 403 "int8(*int8 address,int8 bytes,int8 value)" `247 
v L "address" 1 404 "*int8" `252 
v L "bytes" 1 404 "int8" `253 
v L "value" 1 404 "int8" `254 
f B "shift_right" 1 404 "int8(*int8 address,int8 bytes,int8 value)" `251 
v L "address" 1 405 "*int8" `256 
v L "bytes" 1 405 "int8" `257 
f B "rotate_left" 1 405 "void(*int8 address,int8 bytes)" `255 
v L "address" 1 406 "*int8" `259 
v L "bytes" 1 406 "int8" `260 
f B "rotate_right" 1 406 "void(*int8 address,int8 bytes)" `258 
v L "value" 1 407 "int8" `262 
f B "swap" 1 407 "void(int8 value)" `261 
v L "var" 1 408 "int16" `264 
v L "offset" 1 408 "int8" `265 
f B "make8" 1 408 "int8(int16 var,int8 offset)" `263 
v L "var" 1 409 "int32" `264 
v L "offset" 1 409 "int8" `268 
f G "make8" 1 409 "int8(int32 var,int8 offset)" `266 
v L "varhigh" 1 410 "int8" `270 
v L "varlow" 1 410 "int8" `271 
f B "make16" 1 410 "int16(int8 varhigh,int8 varlow)" `269 
v L "var1" 1 411 "int16" `273 
f B "make32" 1 411 "int32(int16 var1)" `272 
v L "var1" 1 412 "int16" `275 
v L "var2" 1 412 "int16" `276 
f G "make32" 1 412 "int32(int16 var1,int16 var2)" `274 
v L "var1" 1 413 "int16" `275 
v L "var2" 1 413 "int8" `279 
f G "make32" 1 413 "int32(int16 var1,int8 var2)" `277 
v L "var1" 1 414 "int16" `281 
v L "var2" 1 414 "int8" `282 
v L "var3" 1 414 "int8" `283 
f G "make32" 1 414 "int32(int16 var1,int8 var2,int8 var3)" `280 
v L "var1" 1 415 "int8" `285 
f G "make32" 1 415 "int32(int8 var1)" `284 
v L "var1" 1 416 "int8" `275 
v L "var2" 1 416 "int8" `288 
f G "make32" 1 416 "int32(int8 var1,int8 var2)" `286 
v L "var1" 1 417 "int8" `281 
v L "var2" 1 417 "int8" `282 
v L "var3" 1 417 "int8" `292 
f G "make32" 1 417 "int32(int8 var1,int8 var2,int8 var3)" `289 
v L "var1" 1 418 "int8" `294 
v L "var2" 1 418 "int8" `295 
v L "var3" 1 418 "int8" `296 
v L "var4" 1 418 "int8" `297 
f G "make32" 1 418 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `293 
v L "var1" 1 419 "int8" `275 
v L "var2" 1 419 "int16" `300 
f G "make32" 1 419 "int32(int8 var1,int16 var2)" `298 
v L "var1" 1 420 "int8" `281 
v L "var2" 1 420 "int16" `282 
v L "var3" 1 420 "int8" `304 
f G "make32" 1 420 "int32(int8 var1,int16 var2,int8 var3)" `301 
v L "var1" 1 421 "int8" `281 
v L "var2" 1 421 "int8" `282 
v L "var3" 1 421 "int16" `308 
f G "make32" 1 421 "int32(int8 var1,int8 var2,int16 var3)" `305 
v L "var" 1 422 "int8" `310 
v L "bit" 1 422 "int8" `311 
f B "bit_set" 1 422 "void(int8 var,int8 bit)" `309 
v L "var" 1 423 "int16" `310 
v L "bit" 1 423 "int8" `314 
f G "bit_set" 1 423 "void(int16 var,int8 bit)" `312 
v L "var" 1 424 "int32" `310 
v L "bit" 1 424 "int8" `317 
f G "bit_set" 1 424 "void(int32 var,int8 bit)" `315 
v L "var" 1 425 "int8" `319 
v L "bit" 1 425 "int8" `320 
f B "bit_clear" 1 425 "void(int8 var,int8 bit)" `318 
v L "var" 1 426 "int16" `319 
v L "bit" 1 426 "int8" `323 
f G "bit_clear" 1 426 "void(int16 var,int8 bit)" `321 
v L "var" 1 427 "int32" `319 
v L "bit" 1 427 "int8" `326 
f G "bit_clear" 1 427 "void(int32 var,int8 bit)" `324 
v L "var" 1 428 "int8" `328 
v L "bit" 1 428 "int8" `329 
f B "bit_test" 1 428 "int8(int8 var,int8 bit)" `327 
v L "var" 1 429 "int16" `328 
v L "bit" 1 429 "int8" `332 
f G "bit_test" 1 429 "int8(int16 var,int8 bit)" `330 
v L "var" 1 430 "int32" `328 
v L "bit" 1 430 "int8" `335 
f G "bit_test" 1 430 "int8(int32 var,int8 bit)" `333  "#use delay() Prototypes:"
v L "count" 1 433 "int8" `337 
f B "delay_cycles" 1 433 "void(int8 count)" `336 
v L "time" 1 434 "int16" `339 
f B "delay_ms" 1 434 "void(int16 time)" `338 
v L "time" 1 435 "int16" `341 
f B "delay_us" 1 435 "void(int16 time)" `340  "#use rs232() Prototypes:"
v L "cdata" 1 438 "int8" `343 
f B "putchar" 1 438 "void(int8 cdata)" `342 
v L "cdata" 1 439 "int8" `345 
v L "stream" 1 439 "int8" `346 
f G "putchar" 1 439 "void(int8 cdata,int8 stream)" `344 
v L "string" 1 440 "*int8" `348 
f B "puts" 1 440 "void(*int8 string)" `347 
v L "string" 1 441 "*int8" `350 
v L "stream" 1 441 "int8" `351 
f G "puts" 1 441 "void(*int8 string,int8 stream)" `349 
f B "getch" 1 442 "int8()" `352 
v L "stream" 1 443 "int8" `354 
f G "getch" 1 443 "int8(int8 stream)" `353 
v L "string" 1 444 "*int8" `356 
f B "gets" 1 444 "void(*int8 string)" `355 
v L "string" 1 445 "*int8" `358 
v L "stream" 1 445 "int8" `359 
f G "gets" 1 445 "void(*int8 string,int8 stream)" `357 
f B "kbhit" 1 446 "int8()" `360 
v L "stream" 1 447 "int8" `362 
f G "kbhit" 1 447 "int8(int8 stream)" `361 
v L "string" 1 448 "*int8" `364 
f B "printf" 1 448 "void(*int8 string,*int8 _VA_LIST)" `363 
v L "stream" 1 449 "int8" `367 
v L "string" 1 449 "*int8" `368 
f B "fprintf" 1 449 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `366 
f B "putc_send" 1 450 "void()" `370 
v L "stream" 1 451 "int8" `372 
f B "fputc_send" 1 451 "void(int8 stream)" `371 
f B "rcv_buffer_full" 1 452 "int8()" `373 
v L "stream" 1 453 "int8" `375 
f G "rcv_buffer_full" 1 453 "int8(int8 stream)" `374 
f B "rcv_buffer_bytes" 1 454 "int16()" `376 
v L "stream" 1 455 "int8" `378 
f G "rcv_buffer_bytes" 1 455 "int16(int8 stream)" `377 
f B "tx_buffer_full" 1 456 "int8()" `379 
v L "stream" 1 457 "int8" `381 
f G "tx_buffer_full" 1 457 "int8(int8 stream)" `380 
f B "tx_buffer_bytes" 1 458 "int16()" `382 
v L "stream" 1 459 "int8" `384 
f G "tx_buffer_bytes" 1 459 "int16(int8 stream)" `383  "#use i2c() Prototypes:"
f B "i2c_read" 1 462 "int8()" `385 
v L "stream" 1 463 "int8" `387 
f G "i2c_read" 1 463 "int8(int8 stream)" `386 
v L "stream" 1 464 "int8" `389 
v L "ack" 1 464 "int8" `390 
f G "i2c_read" 1 464 "int8(int8 stream,int8 ack)" `388 
v L "data" 1 465 "int8" `392 
f B "i2c_write" 1 465 "int8(int8 data)" `391 
v L "stream" 1 466 "int8" `394 
v L "data" 1 466 "int8" `395 
f G "i2c_write" 1 466 "int8(int8 stream,int8 data)" `393 
f B "i2c_start" 1 467 "void()" `396 
v L "stream" 1 468 "int8" `398 
f G "i2c_start" 1 468 "void(int8 stream)" `397 
v L "stream" 1 469 "int8" `400 
v L "restart" 1 469 "int8" `401 
f G "i2c_start" 1 469 "void(int8 stream,int8 restart)" `399 
f B "i2c_stop" 1 470 "void()" `402 
v L "stream" 1 471 "int8" `404 
f G "i2c_stop" 1 471 "void(int8 stream)" `403 
f B "i2c_isr_state" 1 472 "int8()" `405 
v L "addr" 1 473 "int8" `407 
f B "i2c_slaveaddr" 1 473 "void(int8 addr)" `406 
v L "stream" 1 474 "int8" `409 
v L "addr" 1 474 "int8" `410 
f G "i2c_slaveaddr" 1 474 "void(int8 stream,int8 addr)" `408 
f B "i2c_poll" 1 475 "int8()" `411 
v L "stream" 1 476 "int8" `413 
f G "i2c_poll" 1 476 "int8(int8 stream)" `412 
v L "baud" 1 477 "int32" `415 
f B "i2c_init" 1 477 "void(int32 baud)" `414 
v L "stream" 1 478 "int8" `417 
v L "baud" 1 478 "int32" `418 
f G "i2c_init" 1 478 "void(int8 stream,int32 baud)" `416  "#use spi() Prototypes:"
f B "spi_xfer" 1 481 "int8()" `419 
f G "spi_xfer" 1 482 "int16()" `420 
f G "spi_xfer" 1 483 "int32()" `421 
v L "data" 1 484 "int8" `423 
f G "spi_xfer" 1 484 "int8(int8 data)" `422 
v L "data" 1 485 "int16" `425 
f G "spi_xfer" 1 485 "int16(int16 data)" `424 
v L "data" 1 486 "int32" `427 
f G "spi_xfer" 1 486 "int32(int32 data)" `426 
v L "stream" 1 487 "int8" `429 
v L "data" 1 487 "int8" `430 
f G "spi_xfer" 1 487 "int8(int8 stream,int8 data)" `428 
v L "stream" 1 488 "int8" `429 
v L "data" 1 488 "int16" `433 
f G "spi_xfer" 1 488 "int16(int8 stream,int16 data)" `431 
v L "stream" 1 489 "int8" `429 
v L "data" 1 489 "int32" `436 
f G "spi_xfer" 1 489 "int32(int8 stream,int32 data)" `434 
v L "stream" 1 490 "int8" `438 
v L "data" 1 490 "int8" `439 
v L "bits" 1 490 "int8" `440 
f G "spi_xfer" 1 490 "int8(int8 stream,int8 data,int8 bits)" `437 
v L "stream" 1 491 "int8" `438 
v L "data" 1 491 "int16" `439 
v L "bits" 1 491 "int8" `444 
f G "spi_xfer" 1 491 "int16(int8 stream,int16 data,int8 bits)" `441 
v L "stream" 1 492 "int8" `438 
v L "data" 1 492 "int32" `439 
v L "bits" 1 492 "int8" `448 
f G "spi_xfer" 1 492 "int32(int8 stream,int32 data,int8 bits)" `445 
v L "baud" 1 493 "int32" `450 
f B "spi_init" 1 493 "void(int32 baud)" `449 
v L "stream" 1 494 "int8" `452 
v L "baud" 1 494 "int32" `453 
f G "spi_init" 1 494 "void(int8 stream,int32 baud)" `451 
v L "baud" 1 495 "int32" `455 
f B "spi_speed" 1 495 "void(int32 baud)" `454 
v L "stream" 1 496 "int8" `457 
v L "baud" 1 496 "int32" `458 
f G "spi_speed" 1 496 "void(int8 stream,int32 baud)" `456 
v L "stream" 1 497 "int8" `460 
v L "baud" 1 497 "int32" `461 
v L "clock" 1 497 "int32" `462 
f G "spi_speed" 1 497 "void(int8 stream,int32 baud,int32 clock)" `459 
v L "data" 1 498 "int8" `464 
f B "spi_prewrite" 1 498 "void(int8 data)" `463 
v L "data" 1 499 "int16" `466 
f G "spi_prewrite" 1 499 "void(int16 data)" `465 
v L "data" 1 500 "int32" `468 
f G "spi_prewrite" 1 500 "void(int32 data)" `467 
v L "??65535" 1 501 "int8" `470 
v L "data" 1 501 "int8" `471 
f G "spi_prewrite" 1 501 "void(int8 ,int8 data)" `469 
v L "??65535" 1 502 "int8" `470 
v L "data" 1 502 "int16" `474 
f G "spi_prewrite" 1 502 "void(int8 ,int16 data)" `472 
v L "??65535" 1 503 "int8" `470 
v L "data" 1 503 "int32" `477 
f G "spi_prewrite" 1 503 "void(int8 ,int32 data)" `475 
f B "spi_xfer_in" 1 504 "int8()" `478 
f G "spi_xfer_in" 1 505 "int16()" `479 
f G "spi_xfer_in" 1 506 "int32()" `480 
v L "bits" 1 507 "int8" `482 
f G "spi_xfer_in" 1 507 "int8(int8 bits)" `481 
v L "bits" 1 508 "int8" `484 
f G "spi_xfer_in" 1 508 "int16(int8 bits)" `483 
v L "bits" 1 509 "int8" `486 
f G "spi_xfer_in" 1 509 "int32(int8 bits)" `485 
v L "stream" 1 510 "int8" `488 
v L "bits" 1 510 "int8" `489 
f G "spi_xfer_in" 1 510 "int8(int8 stream,int8 bits)" `487 
v L "stream" 1 511 "int8" `488 
v L "bits" 1 511 "int8" `492 
f G "spi_xfer_in" 1 511 "int16(int8 stream,int8 bits)" `490 
v L "stream" 1 512 "int8" `488 
v L "bits" 1 512 "int8" `495 
f G "spi_xfer_in" 1 512 "int32(int8 stream,int8 bits)" `493  "#use rtos() Prototypes:"
f B "rtos_run" 1 515 "void()" `496 
f B "rtos_yield" 1 516 "void()" `497 
v L "task" 1 517 "int8" `499 
f B "rtos_enable" 1 517 "void(int8 task)" `498 
v L "task" 1 518 "int8" `501 
f B "rtos_disable" 1 518 "void(int8 task)" `500 
f B "rtos_terminate" 1 519 "void()" `502 
v L "flag" 1 520 "int8" `504 
f B "rtos_await" 1 520 "void(int8 flag)" `503 
v L "sem" 1 521 "int8" `506 
f B "rtos_wait" 1 521 "void(int8 sem)" `505 
v L "sem" 1 522 "int8" `508 
f B "rtos_signal" 1 522 "void(int8 sem)" `507 
v L "task" 1 523 "int8" `510 
v L "msg" 1 523 "int8" `511 
f B "rtos_msg_send" 1 523 "void(int8 task,int8 msg)" `509 
f B "rtos_msg_read" 1 524 "int8()" `512 
f B "rtos_msg_poll" 1 525 "int8()" `513 
v L "task" 1 526 "int8" `515 
f B "rtos_overrun" 1 526 "int8(int8 task)" `514 
v L "task" 1 527 "int8" `517 
v L "stat" 1 527 "*int8" `518 
f B "rtos_stats" 1 527 "void(int8 task,*int8 stat)" `516  "#use timer() Prototypes:"
f B "get_ticks" 1 530 "int8()" `519 
f G "get_ticks" 1 531 "int16()" `520 
f G "get_ticks" 1 532 "int32()" `521 
v L "stream" 1 533 "int8" `523 
f G "get_ticks" 1 533 "int8(int8 stream)" `522 
v L "stream" 1 534 "int8" `525 
f G "get_ticks" 1 534 "int16(int8 stream)" `524 
v L "stream" 1 535 "int8" `527 
f G "get_ticks" 1 535 "int32(int8 stream)" `526 
v L "value" 1 536 "int8" `529 
f B "set_ticks" 1 536 "void(int8 value)" `528 
v L "value" 1 537 "int16" `531 
f G "set_ticks" 1 537 "void(int16 value)" `530 
v L "value" 1 538 "int32" `533 
f G "set_ticks" 1 538 "void(int32 value)" `532 
v L "stream" 1 539 "int8" `535 
v L "value" 1 539 "int8" `536 
f G "set_ticks" 1 539 "void(int8 stream,int8 value)" `534 
v L "stream" 1 540 "int8" `535 
v L "value" 1 540 "int16" `539 
f G "set_ticks" 1 540 "void(int8 stream,int16 value)" `537 
v L "stream" 1 541 "int8" `535 
v L "value" 1 541 "int32" `542 
f G "set_ticks" 1 541 "void(int8 stream,int32 value)" `540  "#use pwm() Prototypes:"
f B "pwm_on" 1 544 "void()" `543 
v L "stream" 1 545 "int8" `545 
f G "pwm_on" 1 545 "void(int8 stream)" `544 
f B "pwm_off" 1 546 "void()" `546 
v L "stream" 1 547 "int8" `548 
f G "pwm_off" 1 547 "void(int8 stream)" `547 
v L "duty" 1 548 "int16" `550 
f B "pwm_set_duty" 1 548 "void(int16 duty)" `549 
v L "stream" 1 549 "int8" `552 
v L "duty" 1 549 "int16" `553 
f G "pwm_set_duty" 1 549 "void(int8 stream,int16 duty)" `551 
v L "percent" 1 550 "int16" `555 
f B "pwm_set_duty_percent" 1 550 "void(int16 percent)" `554 
v L "stream" 1 551 "int8" `557 
v L "percent" 1 551 "int16" `558 
f G "pwm_set_duty_percent" 1 551 "void(int8 stream,int16 percent)" `556 
v L "frequency" 1 552 "int32" `560 
f B "pwm_set_frequency" 1 552 "void(int32 frequency)" `559 
v L "stream" 1 553 "int8" `562 
v L "frequency" 1 553 "int32" `563 
f G "pwm_set_frequency" 1 553 "void(int8 stream,int32 frequency)" `561  "#use capture() Prototypes:"
f B "get_capture_time" 1 556 "int16()" `564 
v L "stream" 1 557 "int8" `566 
f G "get_capture_time" 1 557 "int16(int8 stream)" `565 
f B "get_capture_event" 1 558 "int8()" `567 
v L "stream" 1 559 "int8" `569 
f G "get_capture_event" 1 559 "int8(int8 stream)" `568  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 572 "int16" `571 
f B "goto_address" 1 572 "void(int16 address)" `570 
v L "label" 1 573 "int16" `573 
f B "label_address" 1 573 "int16(int16 label)" `572  "Program Memory Prototypes:"
v L "address" 1 576 "int16" `575 
v L "dataptr" 1 576 "*int8" `576 
v L "count" 1 576 "int16" `577 
f B "read_program_memory" 1 576 "void(int16 address,*int8 dataptr,int16 count)" `574 
v L "address" 1 577 "int16" `579 
f B "read_program_eeprom" 1 577 "int16(int16 address)" `578 
v L "address" 1 578 "int16" `581 
f B "erase_program_eeprom" 1 578 "void(int16 address)" `580 
v L "address" 1 579 "int16" `583 
v L "dataptr" 1 579 "*int8" `584 
v L "count" 1 579 "int16" `585 
f B "write_program_memory" 1 579 "void(int16 address,*int8 dataptr,int16 count)" `582 
v L "address" 1 580 "int16" `587 
v L "data" 1 580 "int16" `588 
f B "write_program_eeprom" 1 580 "void(int16 address,int16 data)" `586  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 585 "int16" `589 
v L "address" 1 590 "__EEADDRESS__" `591 
f B "read_eeprom" 1 590 "int8(__EEADDRESS__ address)" `590 
v L "address" 1 591 "__EEADDRESS__" `593 
v L "value" 1 591 "int8" `594 
f B "write_eeprom" 1 591 "void(__EEADDRESS__ address,int8 value)" `592  "INT"
c L "write_eeprom" 1 5 4 "FUNCTION"
v L "interrupt" 1 598 "int32" `596 
f B "enable_interrupts" 1 598 "void(int32 interrupt)" `595 
v L "interrupt" 1 599 "int32" `598 
f B "disable_interrupts" 1 599 "void(int32 interrupt)" `597 
v L "interrupt" 1 600 "int32" `600 
f B "clear_interrupt" 1 600 "void(int32 interrupt)" `599 
v L "interrupt" 1 601 "int32" `602 
f B "interrupt_active" 1 601 "int8(int32 interrupt)" `601 
v L "source" 1 602 "int8" `604 
v L "edge" 1 602 "int8" `605 
f B "ext_int_edge" 1 602 "void(int8 source,int8 edge)" `603 
v L "address" 1 603 "int16" `607 
f B "jump_to_irs" 1 603 "void(int16 address)" `606  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 605 "0x40"
d G "H_TO_L" 1 606 "0"
d G "GLOBAL" 1 608 "0x0BC0"
d G "PERIPH" 1 609 "0x0B40"
d G "INT_RTCC" 1 610 "0x000B20"
d G "INT_RB" 1 611 "0x00FF0B08"
d G "INT_EXT_L2H" 1 612 "0x50000B10"
d G "INT_EXT_H2L" 1 613 "0x60000B10"
d G "INT_EXT" 1 614 "0x000B10"
d G "INT_AD" 1 615 "0x008C40"
d G "INT_TBE" 1 616 "0x008C10"
d G "INT_RDA" 1 617 "0x008C20"
d G "INT_TIMER1" 1 618 "0x008C01"
d G "INT_TIMER2" 1 619 "0x008C02"
d G "INT_CCP1" 1 620 "0x008C04"
d G "INT_CCP2" 1 621 "0x008D01"
d G "INT_SSP" 1 622 "0x008C08"
d G "INT_PSP" 1 623 "0x008C80"
d G "INT_BUSCOL" 1 624 "0x008D08"
d G "INT_EEPROM" 1 625 "0x008D10"
d G "INT_TIMER0" 1 626 "0x000B20"
D G "__INPUT_C__" 2 57 ""
D G "_CTYPE" 3 12 ""
D G "islower" 3 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 3 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 3 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 3 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 3 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 3 19 "(x)  ((x)==' ')"
D G "isxdigit" 3 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 3 21 "(x)  ((x)<' ')"
D G "isprint" 3 22 "(x)  ((x)>=' ')"
D G "isgraph" 3 23 "(x)  ((x)>' ')"
D G "ispunct" 3 24 "(x)  (((x)>' ')&&!isalnum(x))"
D G "InputKbhit" 2 66 "()    kbhit()"
D G "InputPutc" 2 67 "(c)    putc(c)"
D G "InputGetc" 2 68 "()     getc()"
F G "gethex1" 2 71 "int8()" `615 
V L "digit" 2 72 "int8" `616 
F G "gethex" 2 84 "int8()" `617 
V L "lo" 2 85 "int8" `618 
V L "hi" 2 85 "int8" `619 
V L "s" 2 95 "*int8" `621 
V L "max" 2 95 "int8" `622 
F G "get_string" 2 95 "void(*int8 s,int8 max)" `620 
V L "len" 2 96 "int8" `623 
V L "c" 2 97 "int8" `624 
C L "get_string" 2 103 1 "FUNCTION"
D G "_STDLIB" 4 12 ""
D G "RAND_MAX" 4 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 4 25 "1"
T G "div_t" 4 33 "{sint8 quot,sint8 rem}" `628 
T G "ldiv_t" 4 38 "{sint16 quot,sint16 rem}" `632  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 5 13 ""
D G "ptrdiff_t" 5 18 "unsigned int16"
D G "size_t" 5 24 "unsigned int16"
D G "wchar_t" 5 26 "char"
D G "NULL" 5 27 "0"
D G "offsetof" 5 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 4 43 2 "FUNCTION"
C L "atoi" 4 46 1 "*"
C L "atoi" 4 46 1 "*"
V L "s" 4 50 "*int8" `634 
F G "atoi" 4 50 "sint8(*int8 s)" `633  "Syntax: signed int32  atoi32(char * s)"
V L "s" 4 58 "*int8" `636 
F G "atoi32" 4 58 "sint32(*int8 s)" `635  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 4 46 2 "FUNCTION"
V L "num" 4 79 "sint32" `638 
V L "base" 4 79 "int8" `639 
V L "s" 4 79 "*int8" `640 
F G "itoa" 4 79 "*int8(sint32 num,int8 base,*int8 s)" `637  "Standard template: signed int16  atol(char * s)"
C L "itoa" 4 81 1 "*"
C L "itoa" 4 81 1 "*"
V L "s" 4 85 "*int8" `642 
F G "atol" 4 85 "sint16(*int8 s)" `641  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
V L "s" 4 93 "*int8" `644 
V L "endptr" 4 93 "*int8" `645 
V L "base" 4 93 "sint8" `646 
F G "strtol" 4 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `643  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
V L "s" 4 101 "*int8" `648 
V L "endptr" 4 101 "*int8" `649 
V L "base" 4 101 "sint8" `650 
F G "strtoul" 4 101 "int16(*int8 s,*int8 endptr,sint8 base)" `647  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 4 95 2 "FUNCTION"
C L "strtoul" 4 103 1 "*"
C L "strtoul" 4 103 1 "*"
C L "strtoul" 4 103 1 "*"
V L "s" 4 110 "*int8" `652 
V L "endptr" 4 110 "*int8" `653 
F G "strtof" 4 110 "float(*int8 s,*int8 endptr)" `651  "provided for compatibility"
D G "strtof48" 4 116 "(s, e) strtof(s, e)"
D G "strtod" 4 117 "(s, e) strtof(s, e)"
C L "strtof" 4 103 1 "FUNCTION"
C L "strtof" 4 120 1 "*"
D G "atof" 4 124 "(s)   strtof(s, 0)"
C L "strtof" 4 120 1 "FUNCTION"
C L "strtof" 4 143 1 "*"
C L "strtof" 4 143 1 "*"
C L "strtof" 4 143 1 "*"
V L "s" 4 149 "*int8" `655 
F G "atoe" 4 149 "float(*int8 s)" `654  "Pseudo-random sequence generation functions"
C L "atoe" 4 143 1 "FUNCTION"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
F G "rand" 4 169 "int16()" `656  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
V L "seed" 4 191 "int32" `658 
F G "srand" 4 191 "void(int32 seed)" `657  "Memory management functions"
C L "srand" 4 171 3 "FUNCTION"
V L "string" 4 205 "*int8" `660 
F G "system" 4 205 "sint8(*int8 string)" `659  "Searching and sorting utilities"
C L "system" 4 171 1 "FUNCTION"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 4 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
D G "labs" 4 249 "abs"
V L "numer" 4 251 "sint8" `662 
V L "denom" 4 251 "sint8" `663 
F G "div" 4 251 "div_t(sint8 numer,sint8 denom)" `661 
V L "numer" 4 252 "sint16" `665 
V L "denom" 4 252 "sint16" `666 
F G "ldiv" 4 252 "ldiv_t(sint16 numer,sint16 denom)" `664  "Multibyte character functions"
C L "ldiv" 4 229 4 "FUNCTION"
C L "ldiv" 5 2 7 "FUNCTION"
D G "_STRING" 6 12 ""
C L "ldiv" 5 2 7 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
C L "ldiv" 6 19 10 "FUNCTION"
V L "s1" 6 34 "*int8" `668 
V L "s2" 6 34 "*int8" `669 
V L "n" 6 34 "int16" `670 
F G "memmove" 6 35 "*int8(*int8 s1,*int8 s2,int16 n)" `667 
V L "sc1" 6 36 "*int8" `671 
V L "sc2" 6 37 "*int8" `672 
D G "strcopy" 6 54 "strcpy"
C L "strncpy" 6 19 4 "FUNCTION"
V L "s1" 6 61 "*int8" `674 
V L "s2" 6 61 "*int8" `675 
V L "n" 6 61 "int16" `676 
F G "strncpy" 6 62 "*int8(*int8 s1,*int8 s2,int16 n)" `673 
V L "s" 6 63 "*int8" `677 
C L "strcat" 6 19 3 "FUNCTION"
V L "s1" 6 78 "*int8" `679 
V L "s2" 6 78 "*int8" `680 
F G "strcat" 6 79 "*int8(*int8 s1,*int8 s2)" `678 
V L "s" 6 80 "*int8" `681 
C L "strncat" 6 19 2 "FUNCTION"
V L "s1" 6 96 "*int8" `683 
V L "s2" 6 96 "*int8" `684 
V L "n" 6 96 "int16" `685 
F G "strncat" 6 97 "*int8(*int8 s1,*int8 s2,int16 n)" `682 
V L "s" 6 98 "*int8" `686 
C L "memcmp" 6 19 3 "FUNCTION"
V L "s1" 6 120 "*int8" `688 
V L "s2" 6 120 "*int8" `689 
V L "n" 6 120 "int16" `690 
F G "memcmp" 6 121 "sint8(*int8 s1,*int8 s2,int16 n)" `687 
V L "su1" 6 122 "*int8" `691 
V L "su2" 6 122 "*int8" `692 
C L "strcmp" 6 19 2 "FUNCTION"
V L "s1" 6 134 "*int8" `694 
V L "s2" 6 134 "*int8" `695 
F G "strcmp" 6 135 "sint8(*int8 s1,*int8 s2)" `693 
C L "strcoll" 6 19 2 "FUNCTION"
V L "s1" 6 144 "*int8" `697 
V L "s2" 6 144 "*int8" `698 
F G "strcoll" 6 145 "sint8(*int8 s1,*int8 s2)" `696 
C L "strncmp" 6 19 4 "FUNCTION"
V L "s1" 6 157 "*int8" `700 
V L "s2" 6 157 "*int8" `701 
V L "n" 6 157 "int16" `702 
F G "strncmp" 6 158 "sint8(*int8 s1,*int8 s2,int16 n)" `699 
C L "strxfrm" 6 19 3 "FUNCTION"
V L "s1" 6 169 "*int8" `704 
V L "s2" 6 169 "*int8" `705 
V L "n" 6 169 "int16" `706 
F G "strxfrm" 6 170 "int16(*int8 s1,*int8 s2,int16 n)" `703 
V L "s" 6 171 "*int8" `707 
V L "n1" 6 172 "int8" `708 
C L "memchr" 6 19 3 "FUNCTION"
V L "s" 6 191 "*int8" `710 
V L "c" 6 191 "int8" `711 
V L "n" 6 191 "int16" `712 
F G "memchr" 6 192 "*int8(*int8 s,int8 c,int16 n)" `709 
V L "uc" 6 193 "int8" `713 
V L "su" 6 194 "*int8" `714 
C L "strchr" 6 19 2 "FUNCTION"
V L "s" 6 205 "*int8" `716 
V L "c" 6 205 "int8" `717 
F G "strchr" 6 206 "*int8(*int8 s,int8 c)" `715 
C L "strcspn" 6 19 4 "FUNCTION"
V L "s1" 6 217 "*int8" `719 
V L "s2" 6 217 "*int8" `720 
F G "strcspn" 6 218 "int8(*int8 s1,*int8 s2)" `718 
V L "sc1" 6 219 "*int8" `721 
V L "sc2" 6 219 "*int8" `722 
C L "strpbrk" 6 19 4 "FUNCTION"
V L "s1" 6 232 "*int8" `724 
V L "s2" 6 232 "*int8" `725 
F G "strpbrk" 6 233 "*int8(*int8 s1,*int8 s2)" `723 
V L "sc1" 6 234 "*int8" `726 
V L "sc2" 6 234 "*int8" `727 
C L "strrchr" 6 19 2 "FUNCTION"
V L "s" 6 247 "*int8" `729 
V L "c" 6 247 "int8" `730 
F G "strrchr" 6 248 "*int8(*int8 s,int8 c)" `728 
V L "p" 6 249 "*int8" `731 
C L "strspn" 6 19 2 "FUNCTION"
V L "s1" 6 262 "*int8" `733 
V L "s2" 6 262 "*int8" `734 
F G "strspn" 6 263 "int8(*int8 s1,*int8 s2)" `732 
V L "sc1" 6 264 "*int8" `735 
V L "sc2" 6 264 "*int8" `736 
C L "strstr" 6 19 6 "FUNCTION"
V L "s1" 6 281 "*int8" `738 
V L "s2" 6 281 "*int8" `739 
F G "strstr" 6 282 "*int8(*int8 s1,*int8 s2)" `737 
V L "s" 6 283 "*int8" `740 
V L "t" 6 283 "*int8" `741 
C L "strtok" 6 19 13 "FUNCTION"
V L "s1" 6 320 "*int8" `743 
V L "s2" 6 320 "*int8" `744 
F G "strtok" 6 321 "*int8(*int8 s1,*int8 s2)" `742 
V L "beg" 6 322 "*int8" `745 
V L "end" 6 322 "*int8" `746 
V L "save" 6 323 "*int8" `747 
C L "strlen" 6 19 6 "FUNCTION"
V L "s" 6 369 "*int8" `749 
F G "strlen" 6 370 "int8(*int8 s)" `748 
V L "sc" 6 371 "*int8" `750 
C L "stricmp" 6 19 2 "FUNCTION"
V L "s1" 6 380 "*int8" `752 
V L "s2" 6 380 "*int8" `753 
F G "stricmp" 6 381 "sint8(*int8 s1,*int8 s2)" `751 
C L "strlwr" 6 19 3 "FUNCTION"
V L "s" 6 394 "*int8" `757 
F G "strlwr" 6 395 "*int8(*int8 s)" `756 
V L "p" 6 396 "*int8" `758 
C L "strupr" 6 19 3 "FUNCTION"
V L "s" 6 408 "*int8" `760 
F G "strupr" 6 409 "*int8(*int8 s)" `759 
V L "p" 6 410 "*int8" `761 
V L "numer" 4 274 "sint8" `662 
V L "denom" 4 274 "sint8" `764 
F G "div" 4 275 "div_t(sint8 numer,sint8 denom)" `661 
V L "val" 4 276 "div_t" `762 
V L "numer" 4 282 "sint16" `665 
V L "denom" 4 282 "sint16" `771 
F G "ldiv" 4 283 "ldiv_t(sint16 numer,sint16 denom)" `664 
V L "val" 4 284 "ldiv_t" `769 
V L "s" 4 361 "*int8" `777 
F G "atoe" 4 362 "float(*int8 s)" `654 
V L "pow10" 4 363 "float" `776 
V L "result" 4 364 "float" `777 
V L "sign" 4 365 "int8" `778 
V L "expsign" 4 366 "int8" `779 
V L "c" 4 367 "int8" `780 
V L "ptr" 4 368 "int8" `781 
V L "i" 4 369 "int8" `782 
V L "exp" 4 370 "float" `783 
V L "expcnt" 4 371 "int8" `784 
C L "atoe" 4 397 1 "FUNCTION"
V L "s" 4 429 "*int8" `797 
F G "atoi" 4 430 "sint8(*int8 s)" `633 
V L "result" 4 431 "sint8" `796 
V L "sign" 4 432 "int8" `797 
V L "base" 4 432 "int8" `798 
V L "index" 4 432 "int8" `799 
V L "c" 4 433 "int8" `800 
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
V L "s" 4 498 "*int8" `802 
F G "atol" 4 499 "sint16(*int8 s)" `641 
V L "result" 4 500 "sint16" `801 
V L "sign" 4 501 "int8" `802 
V L "base" 4 501 "int8" `803 
V L "index" 4 501 "int8" `804 
V L "c" 4 502 "int8" `805 
C L "atol" 4 397 1 "FUNCTION"
C L "atol" 4 397 1 "FUNCTION"
C L "atol" 4 397 1 "FUNCTION"
C L "atol" 4 397 1 "FUNCTION"
C L "mult_with10" 4 397 1 "FUNCTION"
V L "num" 4 565 "int32" `807 
F G "mult_with10" 4 566 "sint32(int32 num)" `806 
V L "s" 4 571 "*int8" `809 
F G "atoi32" 4 572 "sint32(*int8 s)" `635 
V L "result" 4 573 "sint32" `808 
V L "sign" 4 574 "int8" `809 
V L "base" 4 574 "int8" `810 
V L "index" 4 574 "int8" `811 
V L "c" 4 575 "int8" `812 
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
V L "num" 4 770 "sint32" `638 
V L "base" 4 770 "int8" `639 
V L "s" 4 770 "*int8" `816 
F G "itoa" 4 771 "*int8(sint32 num,int8 base,*int8 s)" `637 
V L "temp" 4 772 "int32" `813 
V L "i" 4 773 "int8" `814 
V L "sign" 4 773 "int8" `815 
V L "cnt" 4 773 "int8" `816 
V L "c" 4 774 "int8" `817 
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
V L "s" 4 885 "*int8" `652 
V L "endptr" 4 885 "*int8" `826 
F G "strtof" 4 886 "float(*int8 s,*int8 endptr)" `651 
V L "pow10" 4 887 "float" `824 
V L "result" 4 888 "float" `825 
V L "skip" 4 889 "int1" `826 
V L "sign" 4 889 "int1" `827 
V L "point" 4 889 "int1" `828 
V L "c" 4 890 "int8" `829 
V L "ptr" 4 891 "int8" `830 
V L "s" 4 1103 "*int8" `648 
V L "endptr" 4 1103 "*int8" `649 
V L "base" 4 1103 "sint8" `835 
F G "strtoul" 4 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `647 
V L "sc" 4 1105 "*int8" `832 
V L "s1" 4 1105 "*int8" `833 
V L "sd" 4 1105 "*int8" `834 
V L "x" 4 1106 "int16" `835 
V L "sign" 4 1107 "int8" `836 
V L "digits" 4 1108 "int8[1]" `837 
C L "strtoul" 4 397 1 "FUNCTION"
C L "strtoul" 4 397 1 "FUNCTION"
C L "strtoul" 4 397 1 "FUNCTION"
V L "s" 4 1165 "*int8" `644 
V L "endptr" 4 1165 "*int8" `645 
V L "base" 4 1165 "sint8" `842 
F G "strtol" 4 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `643 
V L "sc" 4 1167 "*int8" `839 
V L "s1" 4 1167 "*int8" `840 
V L "sd" 4 1167 "*int8" `841 
V L "x" 4 1168 "sint16" `842 
V L "sign" 4 1169 "int8" `843 
V L "digits" 4 1170 "int8[1]" `844 
C L "strtol" 4 397 1 "FUNCTION"
C L "strtol" 4 397 1 "FUNCTION"
C L "strtol" 4 397 1 "FUNCTION"
V L "string" 4 1228 "*int8" `847 
F G "system" 4 1229 "sint8(*int8 string)" `659 
V L "s" 4 1233 "*int8" `847 
V L "n" 4 1233 "int16" `848 
F G "mblen" 4 1234 "int8(*int8 s,int16 n)" `846 
V L "pwc" 4 1238 "*int8" `850 
V L "s" 4 1238 "*int8" `851 
V L "n" 4 1238 "int16" `852 
F G "mbtowc" 4 1239 "int8(*int8 pwc,*int8 s,int16 n)" `849 
V L "s" 4 1244 "*int8" `854 
V L "wchar" 4 1244 "int8" `855 
F G "wctomb" 4 1245 "int8(*int8 s,int8 wchar)" `853 
V L "pwcs" 4 1250 "*int8" `857 
V L "s" 4 1250 "*int8" `858 
V L "n" 4 1250 "int16" `859 
F G "mbstowcs" 4 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `856 
V L "s" 4 1256 "*int8" `861 
V L "pwcs" 4 1256 "*int8" `862 
V L "n" 4 1256 "int16" `863 
F G "wcstombs" 4 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `860 
V G "_Randseed" 4 1266 "int32" `864 
F G "rand" 4 1269 "int16()" `656 
V L "seed" 4 1274 "int32" `869 
F G "srand" 4 1275 "void(int32 seed)" `657 
V L "p1" 4 1284 "*int8" `869 
V L "p2" 4 1284 "*int8" `870 
T G "*_Cmpfun" 4 1284 "sint8(*int8 p1,*int8 p2)" `868 
V L "qdata" 4 1291 "*int8" `873 
V L "qitems" 4 1291 "int8" `874 
V L "qsize" 4 1291 "int8" `875 
V L "cmp" 4 1291 "_Cmpfun" `876 
F G "qsort" 4 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `872 
V L "m" 4 1292 "int8" `877 
V L "j" 4 1292 "int8" `878 
V L "i" 4 1292 "int8" `879 
V L "l" 4 1292 "int8" `880 
V L "done" 4 1293 "int1" `881 
V L "t" 4 1294 "int8[16]" `882 
V L "key" 4 1319 "*int8" `885 
V L "base" 4 1319 "*int8" `886 
V L "num" 4 1319 "int16" `887 
V L "width" 4 1319 "int16" `888 
V L "cmp" 4 1319 "_Cmpfun" `889 
F G "bsearch" 4 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `884 
V L "p" 4 1321 "*int8" `890 
V L "q" 4 1321 "*int8" `891 
V L "n" 4 1322 "int16" `892 
V L "pivot" 4 1323 "int16" `893 
V L "val" 4 1324 "sint8" `894 
C L "bsearch" 4 397 1 "FUNCTION"
D G "CS" 0 13 "PIN_C2"
V G "_adres" 0 15 "int8[4]" `898 
V G "veri" 0 15 "int8" `899 
V G "adres_high" 0 15 "int8" `900 
V G "adres_low" 0 15 "int8" `901 
V G "i" 0 15 "int8" `902 
V G "adres" 0 16 "int16" `903 
V G "islem" 0 17 "int8" `904 
F G "SPI_interrupt" 0 21 "void()" `905 
F G "MAIN" 0 28 "void()" `907 
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
C L "MAIN" 0 45 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
