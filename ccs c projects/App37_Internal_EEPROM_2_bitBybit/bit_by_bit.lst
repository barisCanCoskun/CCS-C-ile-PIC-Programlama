CCS PCM C Compiler, Version 5.007, 61971               25-Jun-19 15:08

               Filename:   Y:\ccs c\ccs c projects\App37_Internal_EEPROM_2_bitBybit\bit_by_bit.lst

               ROM used:   1578 words (19%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           53 (14%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   57A
0003:  NOP
....................  
.................... #include <16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,22
000D:  DATA 45,28
000E:  DATA D2,27
000F:  DATA 4D,10
0010:  DATA 41,32
0011:  DATA F2,32
0012:  DATA F3,1E
0013:  DATA 00,00
0014:  DATA C5,22
0015:  DATA 50,29
0016:  DATA CF,26
0017:  DATA 20,2B
0018:  DATA 65,39
0019:  DATA 69,10
001A:  DATA 3D,00
*
00F3:  MOVF   0B,W
00F4:  MOVWF  24
00F5:  BCF    0B.7
00F6:  BSF    03.5
00F7:  BSF    03.6
00F8:  BSF    0C.7
00F9:  BSF    0C.0
00FA:  NOP
00FB:  NOP
00FC:  BCF    03.5
00FD:  MOVF   0C,W
00FE:  ANDLW  7F
00FF:  BTFSC  03.2
0100:  GOTO   13A
0101:  BCF    03.6
0102:  MOVWF  25
0103:  BSF    03.6
0104:  MOVF   0D,W
0105:  BCF    03.6
0106:  MOVWF  26
0107:  BSF    03.6
0108:  MOVF   0F,W
0109:  BCF    03.6
010A:  MOVWF  27
010B:  MOVF   25,W
010C:  MOVWF  28
010D:  CALL   0C7
010E:  MOVF   26,W
010F:  BSF    03.6
0110:  MOVWF  0D
0111:  BCF    03.6
0112:  MOVF   27,W
0113:  BSF    03.6
0114:  MOVWF  0F
0115:  BSF    03.5
0116:  BSF    0C.7
0117:  BSF    0C.0
0118:  NOP
0119:  NOP
011A:  BCF    03.5
011B:  RLF    0C,W
011C:  RLF    0E,W
011D:  ANDLW  7F
011E:  BTFSC  03.2
011F:  GOTO   13A
0120:  BCF    03.6
0121:  MOVWF  25
0122:  BSF    03.6
0123:  MOVF   0D,W
0124:  BCF    03.6
0125:  MOVWF  26
0126:  BSF    03.6
0127:  MOVF   0F,W
0128:  BCF    03.6
0129:  MOVWF  27
012A:  MOVF   25,W
012B:  MOVWF  28
012C:  CALL   0C7
012D:  MOVF   26,W
012E:  BSF    03.6
012F:  MOVWF  0D
0130:  BCF    03.6
0131:  MOVF   27,W
0132:  BSF    03.6
0133:  MOVWF  0F
0134:  INCF   0D,F
0135:  BTFSC  03.2
0136:  INCF   0F,F
0137:  BCF    03.6
0138:  GOTO   0F6
0139:  BSF    03.6
013A:  BCF    03.6
013B:  BTFSC  24.7
013C:  BSF    0B.7
013D:  RETURN
013E:  MOVLW  8E
013F:  MOVWF  77
0140:  MOVF   41,W
0141:  MOVWF  78
0142:  MOVF   40,W
0143:  MOVWF  79
0144:  CLRF   7A
0145:  MOVF   78,F
0146:  BTFSS  03.2
0147:  GOTO   152
0148:  MOVF   79,W
0149:  MOVWF  78
014A:  CLRF   79
014B:  MOVLW  08
014C:  SUBWF  77,F
014D:  MOVF   78,F
014E:  BTFSS  03.2
014F:  GOTO   152
0150:  CLRF   77
0151:  GOTO   15A
0152:  BCF    03.0
0153:  BTFSC  78.7
0154:  GOTO   159
0155:  RLF    79,F
0156:  RLF    78,F
0157:  DECF   77,F
0158:  GOTO   152
0159:  BCF    78.7
015A:  RETURN
015B:  MOVF   3D,W
015C:  MOVWF  44
015D:  MOVF   41,W
015E:  XORWF  44,F
015F:  BTFSS  44.7
0160:  GOTO   166
0161:  BCF    03.2
0162:  BCF    03.0
0163:  BTFSC  3D.7
0164:  BSF    03.0
0165:  GOTO   199
0166:  MOVF   3D,W
0167:  MOVWF  44
0168:  MOVF   40,W
0169:  MOVWF  45
016A:  MOVF   3C,W
016B:  SUBWF  45,F
016C:  BTFSC  03.2
016D:  GOTO   174
016E:  BTFSS  44.7
016F:  GOTO   199
0170:  MOVF   03,W
0171:  XORLW  01
0172:  MOVWF  03
0173:  GOTO   199
0174:  MOVF   41,W
0175:  MOVWF  45
0176:  MOVF   3D,W
0177:  SUBWF  45,F
0178:  BTFSC  03.2
0179:  GOTO   180
017A:  BTFSS  44.7
017B:  GOTO   199
017C:  MOVF   03,W
017D:  XORLW  01
017E:  MOVWF  03
017F:  GOTO   199
0180:  MOVF   42,W
0181:  MOVWF  45
0182:  MOVF   3E,W
0183:  SUBWF  45,F
0184:  BTFSC  03.2
0185:  GOTO   18C
0186:  BTFSS  44.7
0187:  GOTO   199
0188:  MOVF   03,W
0189:  XORLW  01
018A:  MOVWF  03
018B:  GOTO   199
018C:  MOVF   43,W
018D:  MOVWF  45
018E:  MOVF   3F,W
018F:  SUBWF  45,F
0190:  BTFSC  03.2
0191:  GOTO   198
0192:  BTFSS  44.7
0193:  GOTO   199
0194:  MOVF   03,W
0195:  XORLW  01
0196:  MOVWF  03
0197:  GOTO   199
0198:  BCF    03.0
0199:  RETURN
019A:  MOVLW  8E
019B:  MOVWF  77
019C:  MOVF   3C,W
019D:  SUBWF  77,F
019E:  MOVF   3D,W
019F:  MOVWF  79
01A0:  MOVF   3E,W
01A1:  MOVWF  78
01A2:  BSF    79.7
01A3:  MOVF   77,F
01A4:  BTFSC  03.2
01A5:  GOTO   1B1
01A6:  BCF    03.0
01A7:  MOVF   79,F
01A8:  BTFSS  03.2
01A9:  GOTO   1AD
01AA:  MOVF   78,F
01AB:  BTFSC  03.2
01AC:  GOTO   1B1
01AD:  RRF    79,F
01AE:  RRF    78,F
01AF:  DECFSZ 77,F
01B0:  GOTO   1A6
01B1:  BTFSS  3D.7
01B2:  GOTO   1B8
01B3:  COMF   78,F
01B4:  COMF   79,F
01B5:  INCF   78,F
01B6:  BTFSC  03.2
01B7:  INCF   79,F
01B8:  RETURN
01B9:  MOVF   3C,W
01BA:  BTFSC  03.2
01BB:  GOTO   229
01BC:  MOVWF  44
01BD:  MOVF   40,W
01BE:  BTFSC  03.2
01BF:  GOTO   229
01C0:  ADDWF  44,F
01C1:  BTFSC  03.0
01C2:  GOTO   1CA
01C3:  MOVLW  7F
01C4:  SUBWF  44,F
01C5:  BTFSS  03.0
01C6:  GOTO   229
01C7:  BTFSC  03.2
01C8:  GOTO   229
01C9:  GOTO   1CE
01CA:  MOVLW  81
01CB:  ADDWF  44,F
01CC:  BTFSC  03.0
01CD:  GOTO   229
01CE:  MOVF   44,W
01CF:  MOVWF  77
01D0:  CLRF   78
01D1:  CLRF   79
01D2:  CLRF   7A
01D3:  MOVF   3D,W
01D4:  MOVWF  48
01D5:  BSF    48.7
01D6:  MOVF   3E,W
01D7:  MOVWF  47
01D8:  MOVF   3F,W
01D9:  MOVWF  46
01DA:  MOVLW  18
01DB:  MOVWF  44
01DC:  CLRF   45
01DD:  BTFSS  46.0
01DE:  GOTO   1F7
01DF:  MOVF   43,W
01E0:  ADDWF  7A,F
01E1:  BTFSS  03.0
01E2:  GOTO   1E9
01E3:  INCF   79,F
01E4:  BTFSS  03.2
01E5:  GOTO   1E9
01E6:  INCF   78,F
01E7:  BTFSC  03.2
01E8:  BSF    45.7
01E9:  MOVF   42,W
01EA:  ADDWF  79,F
01EB:  BTFSS  03.0
01EC:  GOTO   1F0
01ED:  INCF   78,F
01EE:  BTFSC  03.2
01EF:  BSF    45.7
01F0:  MOVF   41,W
01F1:  MOVWF  3E
01F2:  BSF    3E.7
01F3:  MOVF   3E,W
01F4:  ADDWF  78,F
01F5:  BTFSC  03.0
01F6:  BSF    45.7
01F7:  RLF    45,F
01F8:  RRF    78,F
01F9:  RRF    79,F
01FA:  RRF    7A,F
01FB:  RRF    48,F
01FC:  RRF    47,F
01FD:  RRF    46,F
01FE:  BCF    03.0
01FF:  DECFSZ 44,F
0200:  GOTO   1DC
0201:  MOVLW  01
0202:  ADDWF  77,F
0203:  BTFSC  03.0
0204:  GOTO   229
0205:  BTFSC  78.7
0206:  GOTO   20E
0207:  RLF    48,F
0208:  RLF    7A,F
0209:  RLF    79,F
020A:  RLF    78,F
020B:  DECF   77,F
020C:  BTFSC  03.2
020D:  GOTO   229
020E:  BTFSS  48.7
020F:  GOTO   21F
0210:  INCF   7A,F
0211:  BTFSS  03.2
0212:  GOTO   21F
0213:  INCF   79,F
0214:  BTFSS  03.2
0215:  GOTO   21F
0216:  INCF   78,F
0217:  BTFSS  03.2
0218:  GOTO   21F
0219:  RRF    78,F
021A:  RRF    79,F
021B:  RRF    7A,F
021C:  INCF   77,F
021D:  BTFSC  03.2
021E:  GOTO   229
021F:  MOVF   3D,W
0220:  MOVWF  45
0221:  MOVF   41,W
0222:  XORWF  45,F
0223:  BTFSS  45.7
0224:  GOTO   227
0225:  BSF    78.7
0226:  GOTO   22D
0227:  BCF    78.7
0228:  GOTO   22D
0229:  CLRF   77
022A:  CLRF   78
022B:  CLRF   79
022C:  CLRF   7A
022D:  RETURN
022E:  MOVLW  80
022F:  BTFSC  03.1
0230:  XORWF  45,F
0231:  CLRF   4A
0232:  CLRF   4B
0233:  MOVF   41,W
0234:  MOVWF  49
0235:  MOVF   45,W
0236:  XORWF  49,F
0237:  MOVF   40,W
0238:  BTFSC  03.2
0239:  GOTO   31E
023A:  MOVWF  48
023B:  MOVWF  77
023C:  MOVF   44,W
023D:  BTFSC  03.2
023E:  GOTO   327
023F:  SUBWF  48,F
0240:  BTFSC  03.2
0241:  GOTO   2C3
0242:  BTFSS  03.0
0243:  GOTO   281
0244:  MOVF   45,W
0245:  MOVWF  4E
0246:  BSF    4E.7
0247:  MOVF   46,W
0248:  MOVWF  4D
0249:  MOVF   47,W
024A:  MOVWF  4C
024B:  CLRF   4B
024C:  BCF    03.0
024D:  RRF    4E,F
024E:  RRF    4D,F
024F:  RRF    4C,F
0250:  RRF    4B,F
0251:  DECFSZ 48,F
0252:  GOTO   24B
0253:  BTFSS  49.7
0254:  GOTO   258
0255:  BSF    4A.0
0256:  GOTO   33B
0257:  BCF    4A.0
0258:  BCF    48.0
0259:  BSF    4A.4
025A:  MOVLW  43
025B:  MOVWF  04
025C:  BCF    03.7
025D:  GOTO   350
025E:  BCF    4A.4
025F:  BTFSC  49.7
0260:  GOTO   26B
0261:  BTFSS  48.0
0262:  GOTO   276
0263:  RRF    4E,F
0264:  RRF    4D,F
0265:  RRF    4C,F
0266:  RRF    4B,F
0267:  INCF   77,F
0268:  BTFSC  03.2
0269:  GOTO   336
026A:  GOTO   276
026B:  BTFSC  4E.7
026C:  GOTO   279
026D:  BCF    03.0
026E:  RLF    4B,F
026F:  RLF    4C,F
0270:  RLF    4D,F
0271:  RLF    4E,F
0272:  DECF   77,F
0273:  BTFSC  03.2
0274:  GOTO   336
0275:  GOTO   26B
0276:  BSF    4A.6
0277:  GOTO   2E3
0278:  BCF    4A.6
0279:  MOVF   41,W
027A:  MOVWF  49
027B:  BTFSS  49.7
027C:  GOTO   27F
027D:  BSF    4E.7
027E:  GOTO   32F
027F:  BCF    4E.7
0280:  GOTO   32F
0281:  MOVF   44,W
0282:  MOVWF  48
0283:  MOVWF  77
0284:  MOVF   40,W
0285:  SUBWF  48,F
0286:  MOVF   41,W
0287:  MOVWF  4E
0288:  BSF    4E.7
0289:  MOVF   42,W
028A:  MOVWF  4D
028B:  MOVF   43,W
028C:  MOVWF  4C
028D:  CLRF   4B
028E:  BCF    03.0
028F:  RRF    4E,F
0290:  RRF    4D,F
0291:  RRF    4C,F
0292:  RRF    4B,F
0293:  DECFSZ 48,F
0294:  GOTO   28D
0295:  BTFSS  49.7
0296:  GOTO   29A
0297:  BSF    4A.1
0298:  GOTO   33B
0299:  BCF    4A.1
029A:  BCF    48.0
029B:  BSF    4A.5
029C:  MOVLW  47
029D:  MOVWF  04
029E:  BCF    03.7
029F:  GOTO   350
02A0:  BCF    4A.5
02A1:  BTFSC  49.7
02A2:  GOTO   2AD
02A3:  BTFSS  48.0
02A4:  GOTO   2B8
02A5:  RRF    4E,F
02A6:  RRF    4D,F
02A7:  RRF    4C,F
02A8:  RRF    4B,F
02A9:  INCF   77,F
02AA:  BTFSC  03.2
02AB:  GOTO   336
02AC:  GOTO   2B8
02AD:  BTFSC  4E.7
02AE:  GOTO   2BB
02AF:  BCF    03.0
02B0:  RLF    4B,F
02B1:  RLF    4C,F
02B2:  RLF    4D,F
02B3:  RLF    4E,F
02B4:  DECF   77,F
02B5:  BTFSC  03.2
02B6:  GOTO   336
02B7:  GOTO   2AD
02B8:  BSF    4A.7
02B9:  GOTO   2E3
02BA:  BCF    4A.7
02BB:  MOVF   45,W
02BC:  MOVWF  49
02BD:  BTFSS  49.7
02BE:  GOTO   2C1
02BF:  BSF    4E.7
02C0:  GOTO   32F
02C1:  BCF    4E.7
02C2:  GOTO   32F
02C3:  MOVF   45,W
02C4:  MOVWF  4E
02C5:  BSF    4E.7
02C6:  MOVF   46,W
02C7:  MOVWF  4D
02C8:  MOVF   47,W
02C9:  MOVWF  4C
02CA:  BTFSS  49.7
02CB:  GOTO   2D0
02CC:  BCF    4E.7
02CD:  BSF    4A.2
02CE:  GOTO   33B
02CF:  BCF    4A.2
02D0:  CLRF   4B
02D1:  BCF    48.0
02D2:  MOVLW  43
02D3:  MOVWF  04
02D4:  BCF    03.7
02D5:  GOTO   350
02D6:  BTFSC  49.7
02D7:  GOTO   2F9
02D8:  MOVF   41,W
02D9:  MOVWF  49
02DA:  BTFSS  48.0
02DB:  GOTO   2E3
02DC:  RRF    4E,F
02DD:  RRF    4D,F
02DE:  RRF    4C,F
02DF:  RRF    4B,F
02E0:  INCF   77,F
02E1:  BTFSC  03.2
02E2:  GOTO   336
02E3:  BTFSS  4B.7
02E4:  GOTO   2F4
02E5:  INCF   4C,F
02E6:  BTFSS  03.2
02E7:  GOTO   2F4
02E8:  INCF   4D,F
02E9:  BTFSS  03.2
02EA:  GOTO   2F4
02EB:  INCF   4E,F
02EC:  BTFSS  03.2
02ED:  GOTO   2F4
02EE:  RRF    4E,F
02EF:  RRF    4D,F
02F0:  RRF    4C,F
02F1:  INCF   77,F
02F2:  BTFSC  03.2
02F3:  GOTO   336
02F4:  BTFSC  4A.6
02F5:  GOTO   278
02F6:  BTFSC  4A.7
02F7:  GOTO   2BA
02F8:  GOTO   318
02F9:  MOVLW  80
02FA:  XORWF  4E,F
02FB:  BTFSS  4E.7
02FC:  GOTO   301
02FD:  GOTO   33B
02FE:  MOVF   45,W
02FF:  MOVWF  49
0300:  GOTO   30E
0301:  MOVF   41,W
0302:  MOVWF  49
0303:  MOVF   4E,F
0304:  BTFSS  03.2
0305:  GOTO   30E
0306:  MOVF   4D,F
0307:  BTFSS  03.2
0308:  GOTO   30E
0309:  MOVF   4C,F
030A:  BTFSS  03.2
030B:  GOTO   30E
030C:  CLRF   77
030D:  GOTO   32F
030E:  BTFSC  4E.7
030F:  GOTO   318
0310:  BCF    03.0
0311:  RLF    4B,F
0312:  RLF    4C,F
0313:  RLF    4D,F
0314:  RLF    4E,F
0315:  DECFSZ 77,F
0316:  GOTO   30E
0317:  GOTO   336
0318:  BTFSS  49.7
0319:  GOTO   31C
031A:  BSF    4E.7
031B:  GOTO   32F
031C:  BCF    4E.7
031D:  GOTO   32F
031E:  MOVF   44,W
031F:  MOVWF  77
0320:  MOVF   45,W
0321:  MOVWF  4E
0322:  MOVF   46,W
0323:  MOVWF  4D
0324:  MOVF   47,W
0325:  MOVWF  4C
0326:  GOTO   32F
0327:  MOVF   40,W
0328:  MOVWF  77
0329:  MOVF   41,W
032A:  MOVWF  4E
032B:  MOVF   42,W
032C:  MOVWF  4D
032D:  MOVF   43,W
032E:  MOVWF  4C
032F:  MOVF   4E,W
0330:  MOVWF  78
0331:  MOVF   4D,W
0332:  MOVWF  79
0333:  MOVF   4C,W
0334:  MOVWF  7A
0335:  GOTO   36E
0336:  CLRF   77
0337:  CLRF   78
0338:  CLRF   79
0339:  CLRF   7A
033A:  GOTO   36E
033B:  CLRF   4B
033C:  COMF   4C,F
033D:  COMF   4D,F
033E:  COMF   4E,F
033F:  COMF   4B,F
0340:  INCF   4B,F
0341:  BTFSS  03.2
0342:  GOTO   349
0343:  INCF   4C,F
0344:  BTFSS  03.2
0345:  GOTO   349
0346:  INCF   4D,F
0347:  BTFSC  03.2
0348:  INCF   4E,F
0349:  BTFSC  4A.0
034A:  GOTO   257
034B:  BTFSC  4A.1
034C:  GOTO   299
034D:  BTFSC  4A.2
034E:  GOTO   2CF
034F:  GOTO   2FE
0350:  MOVF   00,W
0351:  ADDWF  4C,F
0352:  BTFSS  03.0
0353:  GOTO   35A
0354:  INCF   4D,F
0355:  BTFSS  03.2
0356:  GOTO   35A
0357:  INCF   4E,F
0358:  BTFSC  03.2
0359:  BSF    48.0
035A:  DECF   04,F
035B:  MOVF   00,W
035C:  ADDWF  4D,F
035D:  BTFSS  03.0
035E:  GOTO   362
035F:  INCF   4E,F
0360:  BTFSC  03.2
0361:  BSF    48.0
0362:  DECF   04,F
0363:  MOVF   00,W
0364:  BTFSS  00.7
0365:  XORLW  80
0366:  ADDWF  4E,F
0367:  BTFSC  03.0
0368:  BSF    48.0
0369:  BTFSC  4A.4
036A:  GOTO   25E
036B:  BTFSC  4A.5
036C:  GOTO   2A0
036D:  GOTO   2D6
036E:  RETURN
*
050B:  MOVF   27,W
050C:  CLRF   78
050D:  SUBWF  26,W
050E:  BTFSC  03.0
050F:  GOTO   513
0510:  MOVF   26,W
0511:  MOVWF  77
0512:  GOTO   51F
0513:  CLRF   77
0514:  MOVLW  08
0515:  MOVWF  28
0516:  RLF    26,F
0517:  RLF    77,F
0518:  MOVF   27,W
0519:  SUBWF  77,W
051A:  BTFSC  03.0
051B:  MOVWF  77
051C:  RLF    78,F
051D:  DECFSZ 28,F
051E:  GOTO   516
051F:  RETURN
0520:  MOVF   78,W
0521:  MOVF   24,W
0522:  MOVWF  26
0523:  MOVLW  64
0524:  MOVWF  27
0525:  CALL   50B
0526:  MOVF   77,W
0527:  MOVWF  24
0528:  MOVF   78,W
0529:  MOVLW  30
052A:  BTFSS  03.2
052B:  GOTO   533
052C:  BTFSS  25.1
052D:  GOTO   53A
052E:  BTFSC  25.3
052F:  GOTO   53A
0530:  BTFSC  25.4
0531:  MOVLW  20
0532:  GOTO   536
0533:  BCF    25.3
0534:  BCF    25.4
0535:  BSF    25.0
0536:  ADDWF  78,F
0537:  MOVF   78,W
0538:  MOVWF  28
0539:  CALL   0C7
053A:  MOVF   24,W
053B:  MOVWF  26
053C:  MOVLW  0A
053D:  MOVWF  27
053E:  CALL   50B
053F:  MOVF   77,W
0540:  MOVWF  24
0541:  MOVF   78,W
0542:  MOVLW  30
0543:  BTFSS  03.2
0544:  GOTO   54B
0545:  BTFSC  25.3
0546:  GOTO   54F
0547:  BTFSS  25.0
0548:  GOTO   54F
0549:  BTFSC  25.4
054A:  MOVLW  20
054B:  ADDWF  78,F
054C:  MOVF   78,W
054D:  MOVWF  28
054E:  CALL   0C7
054F:  MOVLW  30
0550:  ADDWF  24,F
0551:  MOVF   24,W
0552:  MOVWF  28
0553:  CALL   0C7
0554:  BCF    0A.3
0555:  BCF    0A.4
0556:  GOTO   60E (RETURN)
0557:  BTFSC  26.7
0558:  GOTO   569
0559:  MOVLW  0F
055A:  MOVWF  77
055B:  SWAPF  25,W
055C:  ANDWF  77,F
055D:  MOVLW  0A
055E:  SUBWF  77,W
055F:  BTFSC  03.0
0560:  GOTO   564
0561:  MOVLW  30
0562:  ADDWF  77,F
0563:  GOTO   566
0564:  MOVF   26,W
0565:  ADDWF  77,F
0566:  MOVF   77,W
0567:  MOVWF  28
0568:  CALL   0C7
0569:  MOVLW  0F
056A:  ANDWF  25,F
056B:  MOVLW  0A
056C:  SUBWF  25,W
056D:  BTFSC  03.0
056E:  GOTO   571
056F:  MOVLW  30
0570:  GOTO   573
0571:  BCF    26.7
0572:  MOVF   26,W
0573:  ADDWF  25,F
0574:  MOVF   25,W
0575:  MOVWF  28
0576:  CALL   0C7
0577:  BCF    0A.3
0578:  BCF    0A.4
0579:  GOTO   622 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 4000000) 
*
001B:  MOVLW  29
001C:  MOVWF  04
001D:  BCF    03.7
001E:  MOVF   00,W
001F:  BTFSC  03.2
0020:  GOTO   02F
0021:  MOVLW  01
0022:  MOVWF  78
0023:  CLRF   77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  DECFSZ 78,F
0027:  GOTO   023
0028:  MOVLW  4A
0029:  MOVWF  77
002A:  DECFSZ 77,F
002B:  GOTO   02A
002C:  GOTO   02D
002D:  DECFSZ 00,F
002E:  GOTO   021
002F:  RETURN
....................  
.................... #use fast_io(a) 
....................  
.................... #define use_portb_lcd true 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0048:  MOVLW  0F
0049:  BSF    03.5
004A:  ANDWF  06,W
004B:  IORLW  F0
004C:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004D:  BCF    03.5
004E:  BSF    06.2
....................    delay_cycles(1); 
004F:  NOP
....................    lcd_output_enable(1); 
0050:  BSF    06.0
....................    delay_cycles(1); 
0051:  NOP
....................    high = lcd_read_nibble(); 
0052:  CALL   03C
0053:  MOVF   78,W
0054:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
0055:  BCF    06.0
....................    delay_cycles(1); 
0056:  NOP
....................    lcd_output_enable(1); 
0057:  BSF    06.0
....................    delay_us(1); 
0058:  NOP
....................    low = lcd_read_nibble(); 
0059:  CALL   03C
005A:  MOVF   78,W
005B:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
005C:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005D:  MOVLW  0F
005E:  BSF    03.5
005F:  ANDWF  06,W
0060:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0061:  BCF    03.5
0062:  SWAPF  30,W
0063:  MOVWF  77
0064:  MOVLW  F0
0065:  ANDWF  77,F
0066:  MOVF   77,W
0067:  IORWF  2F,W
0068:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003C:  MOVF   06,W
003D:  MOVWF  77
003E:  SWAPF  06,W
003F:  ANDLW  0F
0040:  MOVWF  78
....................   #endif 
0041:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0030:  SWAPF  30,W
0031:  ANDLW  F0
0032:  MOVWF  77
0033:  MOVLW  0F
0034:  ANDWF  06,W
0035:  IORWF  77,W
0036:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0037:  NOP
....................    lcd_output_enable(1); 
0038:  BSF    06.0
....................    delay_us(2); 
0039:  GOTO   03A
....................    lcd_output_enable(0); 
003A:  BCF    06.0
003B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0042:  BSF    03.5
0043:  BCF    06.0
....................    lcd_rs_tris(); 
0044:  BCF    06.1
....................    lcd_rw_tris(); 
0045:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0046:  BCF    03.5
0047:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0069:  MOVF   78,W
006A:  MOVWF  2F
006B:  BTFSC  2F.7
006C:  GOTO   048
....................    lcd_output_rs(address); 
006D:  BTFSS  2D.0
006E:  BCF    06.1
006F:  BTFSC  2D.0
0070:  BSF    06.1
....................    delay_cycles(1); 
0071:  NOP
....................    lcd_output_rw(0); 
0072:  BCF    06.2
....................    delay_cycles(1); 
0073:  NOP
....................    lcd_output_enable(0); 
0074:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0075:  SWAPF  2E,W
0076:  MOVWF  2F
0077:  MOVLW  0F
0078:  ANDWF  2F,F
0079:  MOVF   2F,W
007A:  MOVWF  30
007B:  CALL   030
....................    lcd_send_nibble(n & 0xf); 
007C:  MOVF   2E,W
007D:  ANDLW  0F
007E:  MOVWF  2F
007F:  MOVWF  30
0080:  CALL   030
0081:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0082:  MOVLW  0F
0083:  BSF    03.5
0084:  ANDWF  06,W
0085:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0086:  BCF    06.0
....................    lcd_rs_tris(); 
0087:  BCF    06.1
....................    lcd_rw_tris(); 
0088:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0089:  BCF    03.5
008A:  BCF    06.1
....................    lcd_output_rw(0); 
008B:  BCF    06.2
....................    lcd_output_enable(0); 
008C:  BCF    06.0
....................      
....................    delay_ms(15); 
008D:  MOVLW  0F
008E:  MOVWF  29
008F:  CALL   01B
....................    for(i=1;i<=3;++i) 
0090:  MOVLW  01
0091:  MOVWF  24
0092:  MOVF   24,W
0093:  SUBLW  03
0094:  BTFSS  03.0
0095:  GOTO   09E
....................    { 
....................        lcd_send_nibble(3); 
0096:  MOVLW  03
0097:  MOVWF  30
0098:  CALL   030
....................        delay_ms(5); 
0099:  MOVLW  05
009A:  MOVWF  29
009B:  CALL   01B
009C:  INCF   24,F
009D:  GOTO   092
....................    } 
....................     
....................    lcd_send_nibble(2); 
009E:  MOVLW  02
009F:  MOVWF  30
00A0:  CALL   030
....................    delay_ms(5); 
00A1:  MOVLW  05
00A2:  MOVWF  29
00A3:  CALL   01B
....................    for(i=0;i<=3;++i) 
00A4:  CLRF   24
00A5:  MOVF   24,W
00A6:  SUBLW  03
00A7:  BTFSS  03.0
00A8:  GOTO   0B2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A9:  MOVF   24,W
00AA:  CALL   004
00AB:  MOVWF  25
00AC:  CLRF   2D
00AD:  MOVF   25,W
00AE:  MOVWF  2E
00AF:  CALL   042
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B0:  INCF   24,F
00B1:  GOTO   0A5
00B2:  BCF    0A.3
00B3:  BCF    0A.4
00B4:  GOTO   59C (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B5:  DECFSZ 2A,W
00B6:  GOTO   0B8
00B7:  GOTO   0BB
....................       address=LCD_LINE_TWO; 
00B8:  MOVLW  40
00B9:  MOVWF  2B
00BA:  GOTO   0BC
....................    else 
....................       address=0; 
00BB:  CLRF   2B
....................       
....................    address+=x-1; 
00BC:  MOVLW  01
00BD:  SUBWF  29,W
00BE:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address); 
00BF:  MOVF   2B,W
00C0:  IORLW  80
00C1:  MOVWF  2C
00C2:  CLRF   2D
00C3:  MOVF   2C,W
00C4:  MOVWF  2E
00C5:  CALL   042
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C6:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C7:  MOVF   28,W
00C8:  XORLW  07
00C9:  BTFSC  03.2
00CA:  GOTO   0D5
00CB:  XORLW  0B
00CC:  BTFSC  03.2
00CD:  GOTO   0DA
00CE:  XORLW  06
00CF:  BTFSC  03.2
00D0:  GOTO   0E2
00D1:  XORLW  02
00D2:  BTFSC  03.2
00D3:  GOTO   0E8
00D4:  GOTO   0ED
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D5:  MOVLW  01
00D6:  MOVWF  29
00D7:  MOVWF  2A
00D8:  CALL   0B5
00D9:  GOTO   0F2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00DA:  CLRF   2D
00DB:  MOVLW  01
00DC:  MOVWF  2E
00DD:  CALL   042
....................                      delay_ms(2); 
00DE:  MOVLW  02
00DF:  MOVWF  29
00E0:  CALL   01B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E1:  GOTO   0F2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E2:  MOVLW  01
00E3:  MOVWF  29
00E4:  MOVLW  02
00E5:  MOVWF  2A
00E6:  CALL   0B5
00E7:  GOTO   0F2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E8:  CLRF   2D
00E9:  MOVLW  10
00EA:  MOVWF  2E
00EB:  CALL   042
00EC:  GOTO   0F2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00ED:  MOVLW  01
00EE:  MOVWF  2D
00EF:  MOVF   28,W
00F0:  MOVWF  2E
00F1:  CALL   042
....................      #endif 
....................    } 
00F2:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
0378:  BCF    3B.0
....................    y = x; 
0379:  MOVF   2F,W
037A:  MOVWF  34
037B:  MOVF   2E,W
037C:  MOVWF  33
037D:  MOVF   2D,W
037E:  MOVWF  32
037F:  MOVF   2C,W
0380:  MOVWF  31
....................  
....................    if (x < 0) 
0381:  MOVF   2F,W
0382:  MOVWF  3F
0383:  MOVF   2E,W
0384:  MOVWF  3E
0385:  MOVF   2D,W
0386:  MOVWF  3D
0387:  MOVF   2C,W
0388:  MOVWF  3C
0389:  CLRF   43
038A:  CLRF   42
038B:  CLRF   41
038C:  CLRF   40
038D:  CALL   15B
038E:  BTFSS  03.0
038F:  GOTO   394
....................    { 
....................       s = 1; 
0390:  BSF    3B.0
....................       y = -y; 
0391:  MOVF   32,W
0392:  XORLW  80
0393:  MOVWF  32
....................    } 
....................  
....................    if (y <= 32768.0) 
0394:  MOVF   34,W
0395:  MOVWF  3F
0396:  MOVF   33,W
0397:  MOVWF  3E
0398:  MOVF   32,W
0399:  MOVWF  3D
039A:  MOVF   31,W
039B:  MOVWF  3C
039C:  CLRF   43
039D:  CLRF   42
039E:  CLRF   41
039F:  MOVLW  8E
03A0:  MOVWF  40
03A1:  CALL   15B
03A2:  BTFSC  03.0
03A3:  GOTO   3A6
03A4:  BTFSS  03.2
03A5:  GOTO   3BD
....................       res = (float32)(unsigned int16)y; 
03A6:  MOVF   34,W
03A7:  MOVWF  3F
03A8:  MOVF   33,W
03A9:  MOVWF  3E
03AA:  MOVF   32,W
03AB:  MOVWF  3D
03AC:  MOVF   31,W
03AD:  MOVWF  3C
03AE:  CALL   19A
03AF:  MOVF   79,W
03B0:  MOVWF  41
03B1:  MOVF   78,W
03B2:  MOVWF  40
03B3:  CALL   13E
03B4:  MOVF   7A,W
03B5:  MOVWF  38
03B6:  MOVF   79,W
03B7:  MOVWF  37
03B8:  MOVF   78,W
03B9:  MOVWF  36
03BA:  MOVF   77,W
03BB:  MOVWF  35
03BC:  GOTO   47A
....................  
....................  else if (y < 10000000.0) 
03BD:  MOVF   34,W
03BE:  MOVWF  3F
03BF:  MOVF   33,W
03C0:  MOVWF  3E
03C1:  MOVF   32,W
03C2:  MOVWF  3D
03C3:  MOVF   31,W
03C4:  MOVWF  3C
03C5:  MOVLW  80
03C6:  MOVWF  43
03C7:  MOVLW  96
03C8:  MOVWF  42
03C9:  MOVLW  18
03CA:  MOVWF  41
03CB:  MOVLW  96
03CC:  MOVWF  40
03CD:  CALL   15B
03CE:  BTFSS  03.0
03CF:  GOTO   472
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
03D0:  MOVF   34,W
03D1:  MOVWF  3F
03D2:  MOVF   33,W
03D3:  MOVWF  3E
03D4:  MOVF   32,W
03D5:  MOVWF  3D
03D6:  MOVF   31,W
03D7:  MOVWF  3C
03D8:  CLRF   43
03D9:  CLRF   42
03DA:  CLRF   41
03DB:  MOVLW  70
03DC:  MOVWF  40
03DD:  CALL   1B9
03DE:  MOVF   7A,W
03DF:  MOVWF  3F
03E0:  MOVF   79,W
03E1:  MOVWF  3E
03E2:  MOVF   78,W
03E3:  MOVWF  3D
03E4:  MOVF   77,W
03E5:  MOVWF  3C
03E6:  CALL   19A
03E7:  MOVF   79,W
03E8:  MOVWF  3A
03E9:  MOVF   78,W
03EA:  MOVWF  39
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
03EB:  MOVF   34,W
03EC:  MOVWF  3F
03ED:  MOVF   33,W
03EE:  MOVWF  3E
03EF:  MOVF   32,W
03F0:  MOVWF  3D
03F1:  MOVF   31,W
03F2:  MOVWF  3C
03F3:  CLRF   43
03F4:  CLRF   42
03F5:  CLRF   41
03F6:  MOVLW  70
03F7:  MOVWF  40
03F8:  CALL   1B9
03F9:  MOVF   7A,W
03FA:  MOVWF  3F
03FB:  MOVF   79,W
03FC:  MOVWF  3E
03FD:  MOVF   78,W
03FE:  MOVWF  3D
03FF:  MOVF   77,W
0400:  MOVWF  3C
0401:  MOVF   3A,W
0402:  MOVWF  41
0403:  MOVF   39,W
0404:  MOVWF  40
0405:  CALL   13E
0406:  BSF    03.1
0407:  MOVF   3F,W
0408:  MOVWF  43
0409:  MOVF   3E,W
040A:  MOVWF  42
040B:  MOVF   3D,W
040C:  MOVWF  41
040D:  MOVF   3C,W
040E:  MOVWF  40
040F:  MOVF   7A,W
0410:  MOVWF  47
0411:  MOVF   79,W
0412:  MOVWF  46
0413:  MOVF   78,W
0414:  MOVWF  45
0415:  MOVF   77,W
0416:  MOVWF  44
0417:  CALL   22E
0418:  CLRF   3F
0419:  CLRF   3E
041A:  CLRF   3D
041B:  MOVLW  8E
041C:  MOVWF  3C
041D:  MOVF   7A,W
041E:  MOVWF  43
041F:  MOVF   79,W
0420:  MOVWF  42
0421:  MOVF   78,W
0422:  MOVWF  41
0423:  MOVF   77,W
0424:  MOVWF  40
0425:  CALL   1B9
0426:  MOVF   7A,W
0427:  MOVWF  34
0428:  MOVF   79,W
0429:  MOVWF  33
042A:  MOVF   78,W
042B:  MOVWF  32
042C:  MOVF   77,W
042D:  MOVWF  31
....................       res = 32768.0*(float32)l; 
042E:  MOVF   3A,W
042F:  MOVWF  41
0430:  MOVF   39,W
0431:  MOVWF  40
0432:  CALL   13E
0433:  CLRF   3F
0434:  CLRF   3E
0435:  CLRF   3D
0436:  MOVLW  8E
0437:  MOVWF  3C
0438:  MOVF   7A,W
0439:  MOVWF  43
043A:  MOVF   79,W
043B:  MOVWF  42
043C:  MOVF   78,W
043D:  MOVWF  41
043E:  MOVF   77,W
043F:  MOVWF  40
0440:  CALL   1B9
0441:  MOVF   7A,W
0442:  MOVWF  38
0443:  MOVF   79,W
0444:  MOVWF  37
0445:  MOVF   78,W
0446:  MOVWF  36
0447:  MOVF   77,W
0448:  MOVWF  35
....................       res += (float32)(unsigned int16)y; 
0449:  MOVF   34,W
044A:  MOVWF  3F
044B:  MOVF   33,W
044C:  MOVWF  3E
044D:  MOVF   32,W
044E:  MOVWF  3D
044F:  MOVF   31,W
0450:  MOVWF  3C
0451:  CALL   19A
0452:  MOVF   79,W
0453:  MOVWF  41
0454:  MOVF   78,W
0455:  MOVWF  40
0456:  CALL   13E
0457:  BCF    03.1
0458:  MOVF   38,W
0459:  MOVWF  43
045A:  MOVF   37,W
045B:  MOVWF  42
045C:  MOVF   36,W
045D:  MOVWF  41
045E:  MOVF   35,W
045F:  MOVWF  40
0460:  MOVF   7A,W
0461:  MOVWF  47
0462:  MOVF   79,W
0463:  MOVWF  46
0464:  MOVF   78,W
0465:  MOVWF  45
0466:  MOVF   77,W
0467:  MOVWF  44
0468:  CALL   22E
0469:  MOVF   7A,W
046A:  MOVWF  38
046B:  MOVF   79,W
046C:  MOVWF  37
046D:  MOVF   78,W
046E:  MOVWF  36
046F:  MOVF   77,W
0470:  MOVWF  35
....................    } 
0471:  GOTO   47A
....................  
....................  else 
....................   res = y; 
0472:  MOVF   34,W
0473:  MOVWF  38
0474:  MOVF   33,W
0475:  MOVWF  37
0476:  MOVF   32,W
0477:  MOVWF  36
0478:  MOVF   31,W
0479:  MOVWF  35
....................  
....................  y = y - (float32)(unsigned int16)y; 
047A:  MOVF   34,W
047B:  MOVWF  3F
047C:  MOVF   33,W
047D:  MOVWF  3E
047E:  MOVF   32,W
047F:  MOVWF  3D
0480:  MOVF   31,W
0481:  MOVWF  3C
0482:  CALL   19A
0483:  MOVF   79,W
0484:  MOVWF  41
0485:  MOVF   78,W
0486:  MOVWF  40
0487:  CALL   13E
0488:  BSF    03.1
0489:  MOVF   34,W
048A:  MOVWF  43
048B:  MOVF   33,W
048C:  MOVWF  42
048D:  MOVF   32,W
048E:  MOVWF  41
048F:  MOVF   31,W
0490:  MOVWF  40
0491:  MOVF   7A,W
0492:  MOVWF  47
0493:  MOVF   79,W
0494:  MOVWF  46
0495:  MOVF   78,W
0496:  MOVWF  45
0497:  MOVF   77,W
0498:  MOVWF  44
0499:  CALL   22E
049A:  MOVF   7A,W
049B:  MOVWF  34
049C:  MOVF   79,W
049D:  MOVWF  33
049E:  MOVF   78,W
049F:  MOVWF  32
04A0:  MOVF   77,W
04A1:  MOVWF  31
....................  
....................  if (s) 
04A2:  BTFSS  3B.0
04A3:  GOTO   4A7
....................   res = -res; 
04A4:  MOVF   36,W
04A5:  XORLW  80
04A6:  MOVWF  36
....................  
....................  if (y != 0) 
04A7:  MOVF   34,W
04A8:  MOVWF  3F
04A9:  MOVF   33,W
04AA:  MOVWF  3E
04AB:  MOVF   32,W
04AC:  MOVWF  3D
04AD:  MOVF   31,W
04AE:  MOVWF  3C
04AF:  CLRF   43
04B0:  CLRF   42
04B1:  CLRF   41
04B2:  CLRF   40
04B3:  CALL   15B
04B4:  BTFSC  03.2
04B5:  GOTO   4ED
....................  { 
....................   if (s == 1 && n == 0) 
04B6:  BTFSS  3B.0
04B7:  GOTO   4D2
04B8:  MOVF   30,F
04B9:  BTFSS  03.2
04BA:  GOTO   4D2
....................    res -= 1.0; 
04BB:  BSF    03.1
04BC:  MOVF   38,W
04BD:  MOVWF  43
04BE:  MOVF   37,W
04BF:  MOVWF  42
04C0:  MOVF   36,W
04C1:  MOVWF  41
04C2:  MOVF   35,W
04C3:  MOVWF  40
04C4:  CLRF   47
04C5:  CLRF   46
04C6:  CLRF   45
04C7:  MOVLW  7F
04C8:  MOVWF  44
04C9:  CALL   22E
04CA:  MOVF   7A,W
04CB:  MOVWF  38
04CC:  MOVF   79,W
04CD:  MOVWF  37
04CE:  MOVF   78,W
04CF:  MOVWF  36
04D0:  MOVF   77,W
04D1:  MOVWF  35
....................  
....................   if (s == 0 && n == 1) 
04D2:  BTFSC  3B.0
04D3:  GOTO   4ED
04D4:  DECFSZ 30,W
04D5:  GOTO   4ED
....................    res += 1.0; 
04D6:  BCF    03.1
04D7:  MOVF   38,W
04D8:  MOVWF  43
04D9:  MOVF   37,W
04DA:  MOVWF  42
04DB:  MOVF   36,W
04DC:  MOVWF  41
04DD:  MOVF   35,W
04DE:  MOVWF  40
04DF:  CLRF   47
04E0:  CLRF   46
04E1:  CLRF   45
04E2:  MOVLW  7F
04E3:  MOVWF  44
04E4:  CALL   22E
04E5:  MOVF   7A,W
04E6:  MOVWF  38
04E7:  MOVF   79,W
04E8:  MOVWF  37
04E9:  MOVF   78,W
04EA:  MOVWF  36
04EB:  MOVF   77,W
04EC:  MOVWF  35
....................  } 
....................  if (x == 0) 
04ED:  MOVF   2F,W
04EE:  MOVWF  3F
04EF:  MOVF   2E,W
04F0:  MOVWF  3E
04F1:  MOVF   2D,W
04F2:  MOVWF  3D
04F3:  MOVF   2C,W
04F4:  MOVWF  3C
04F5:  CLRF   43
04F6:  CLRF   42
04F7:  CLRF   41
04F8:  CLRF   40
04F9:  CALL   15B
04FA:  BTFSS  03.2
04FB:  GOTO   500
....................     res = 0; 
04FC:  CLRF   38
04FD:  CLRF   37
04FE:  CLRF   36
04FF:  CLRF   35
....................  
....................  return (res); 
0500:  MOVF   35,W
0501:  MOVWF  77
0502:  MOVF   36,W
0503:  MOVWF  78
0504:  MOVF   37,W
0505:  MOVWF  79
0506:  MOVF   38,W
0507:  MOVWF  7A
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
*
036F:  MOVF   2B,W
0370:  MOVWF  2F
0371:  MOVF   2A,W
0372:  MOVWF  2E
0373:  MOVF   29,W
0374:  MOVWF  2D
0375:  MOVF   28,W
0376:  MOVWF  2C
0377:  CLRF   30
*
0508:  BCF    0A.3
0509:  BCF    0A.4
050A:  GOTO   5E0 (RETURN)
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... int16 i; 
.................... unsigned int8 eeprom_adres, data[1] = {0}; 
*
0582:  BCF    03.5
0583:  CLRF   23
....................  
.................... void main() 
*
057A:  BSF    03.5
057B:  BSF    1F.0
057C:  BSF    1F.1
057D:  BSF    1F.2
057E:  BCF    1F.3
057F:  BCF    03.7
0580:  MOVLW  1F
0581:  ANDWF  03,F
.................... { 
....................    setup_psp(PSP_DISABLED); 
*
0584:  BSF    03.5
0585:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
0586:  BCF    03.5
0587:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
0588:  MOVLW  00
0589:  MOVWF  78
058A:  MOVWF  12
058B:  MOVLW  00
058C:  BSF    03.5
058D:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
058E:  BSF    1F.0
058F:  BSF    1F.1
0590:  BSF    1F.2
0591:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0592:  BCF    03.5
0593:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
0594:  MOVLW  F0
0595:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
0596:  ANDWF  1D,F
....................     
....................    set_tris_a(0x03); 
0597:  MOVLW  03
0598:  BSF    03.5
0599:  MOVWF  05
....................     
....................    lcd_init(); 
059A:  BCF    03.5
059B:  GOTO   082
....................     
....................    printf(lcd_putc, "\fEEPROM Adres="); 
059C:  MOVLW  0C
059D:  BSF    03.6
059E:  MOVWF  0D
059F:  MOVLW  00
05A0:  MOVWF  0F
05A1:  BCF    03.6
05A2:  CALL   0F3
....................     
....................    lcd_gotoxy(1, 2); 
05A3:  MOVLW  01
05A4:  MOVWF  29
05A5:  MOVLW  02
05A6:  MOVWF  2A
05A7:  CALL   0B5
....................    printf(lcd_putc, "EEPROM Veri ="); 
05A8:  MOVLW  14
05A9:  BSF    03.6
05AA:  MOVWF  0D
05AB:  MOVLW  00
05AC:  MOVWF  0F
05AD:  BCF    03.6
05AE:  CALL   0F3
....................     
....................    while(true){ 
....................        
....................       for(i = 0; i <= 2047; i++){ 
05AF:  CLRF   21
05B0:  CLRF   20
05B1:  MOVF   21,W
05B2:  SUBLW  07
05B3:  BTFSS  03.0
05B4:  GOTO   628
....................          while(!input(PIN_A0)); 
05B5:  BTFSS  05.0
05B6:  GOTO   5B5
....................          delay_ms(40); 
05B7:  MOVLW  28
05B8:  MOVWF  29
05B9:  CALL   01B
....................           
....................          shift_left(data, 1, input(PIN_A1)); 
05BA:  BTFSC  05.1
05BB:  GOTO   5BE
05BC:  BCF    03.0
05BD:  GOTO   5BF
05BE:  BSF    03.0
05BF:  RLF    23,F
....................           
....................          eeprom_adres = floor(i / 8); 
05C0:  RRF    21,W
05C1:  MOVWF  7A
05C2:  RRF    20,W
05C3:  MOVWF  79
05C4:  RRF    7A,F
05C5:  RRF    79,F
05C6:  RRF    7A,F
05C7:  RRF    79,F
05C8:  MOVLW  1F
05C9:  ANDWF  7A,F
05CA:  MOVF   79,W
05CB:  MOVWF  40
05CC:  MOVF   7A,W
05CD:  MOVWF  41
05CE:  CALL   13E
05CF:  MOVF   7A,W
05D0:  MOVWF  27
05D1:  MOVF   79,W
05D2:  MOVWF  26
05D3:  MOVF   78,W
05D4:  MOVWF  25
05D5:  MOVF   77,W
05D6:  MOVWF  24
05D7:  MOVF   7A,W
05D8:  MOVWF  2B
05D9:  MOVF   79,W
05DA:  MOVWF  2A
05DB:  MOVF   78,W
05DC:  MOVWF  29
05DD:  MOVF   77,W
05DE:  MOVWF  28
05DF:  GOTO   36F
05E0:  MOVF   7A,W
05E1:  MOVWF  3F
05E2:  MOVF   79,W
05E3:  MOVWF  3E
05E4:  MOVF   78,W
05E5:  MOVWF  3D
05E6:  MOVF   77,W
05E7:  MOVWF  3C
05E8:  CALL   19A
05E9:  MOVF   78,W
05EA:  MOVWF  22
....................          write_eeprom(eeprom_adres, data[0]); 
05EB:  MOVF   0B,W
05EC:  MOVWF  77
05ED:  BCF    0B.7
05EE:  MOVF   22,W
05EF:  BSF    03.6
05F0:  MOVWF  0D
05F1:  BCF    03.6
05F2:  MOVF   23,W
05F3:  BSF    03.6
05F4:  MOVWF  0C
05F5:  BSF    03.5
05F6:  BCF    0C.7
05F7:  BSF    0C.2
05F8:  MOVLW  55
05F9:  MOVWF  0D
05FA:  MOVLW  AA
05FB:  MOVWF  0D
05FC:  BSF    0C.1
05FD:  BTFSC  0C.1
05FE:  GOTO   5FD
05FF:  BCF    0C.2
0600:  MOVF   77,W
0601:  BCF    03.5
0602:  BCF    03.6
0603:  IORWF  0B,F
....................           
....................          lcd_gotoxy(14, 1); 
0604:  MOVLW  0E
0605:  MOVWF  29
0606:  MOVLW  01
0607:  MOVWF  2A
0608:  CALL   0B5
....................          printf(lcd_putc, "%3u", eeprom_adres); 
0609:  MOVF   22,W
060A:  MOVWF  24
060B:  MOVLW  13
060C:  MOVWF  25
060D:  GOTO   520
....................           
....................          lcd_gotoxy(14, 2); 
060E:  MOVLW  0E
060F:  MOVWF  29
0610:  MOVLW  02
0611:  MOVWF  2A
0612:  CALL   0B5
....................          printf(lcd_putc, "%x", read_eeprom(eeprom_adres)); 
0613:  MOVF   22,W
0614:  BSF    03.6
0615:  MOVWF  0D
0616:  BSF    03.5
0617:  BCF    0C.7
0618:  BSF    0C.0
0619:  BCF    03.5
061A:  MOVF   0C,W
061B:  BCF    03.6
061C:  MOVWF  24
061D:  MOVF   24,W
061E:  MOVWF  25
061F:  MOVLW  57
0620:  MOVWF  26
0621:  GOTO   557
....................           
....................          while(input(PIN_A0)); 
0622:  BTFSC  05.0
0623:  GOTO   622
0624:  INCF   20,F
0625:  BTFSC  03.2
0626:  INCF   21,F
0627:  GOTO   5B1
....................       } 
0628:  GOTO   5AF
....................    } 
....................     
.................... } 
....................  
0629:  SLEEP
....................     
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
