CCS PCM C Compiler, Version 5.084d, 1               16-Jun-19 19:15
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   Y:\ccs c projects\App29_keypad_with_LCD\keypad_with_LCD.lst

               ROM used:   635 words (8%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           25 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   22D
0003:  NOP
....................  
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 0C,21
0005:  DATA E1,39
0006:  DATA 69,36
0007:  DATA 61,37
0008:  DATA 20,2A
0009:  DATA F5,39
000A:  DATA 3D,00
*
00EE:  MOVF   0B,W
00EF:  MOVWF  23
00F0:  BCF    0B.7
00F1:  BSF    03.5
00F2:  BSF    03.6
00F3:  BSF    0C.7
00F4:  BSF    0C.0
00F5:  NOP
00F6:  NOP
00F7:  BCF    03.5
00F8:  BCF    03.6
00F9:  BTFSC  23.7
00FA:  BSF    0B.7
00FB:  BSF    03.6
00FC:  MOVF   0C,W
00FD:  ANDLW  7F
00FE:  BTFSC  03.2
00FF:  GOTO   142
0100:  BCF    03.6
0101:  MOVWF  23
0102:  BSF    03.6
0103:  MOVF   0D,W
0104:  BCF    03.6
0105:  MOVWF  24
0106:  BSF    03.6
0107:  MOVF   0F,W
0108:  BCF    03.6
0109:  MOVWF  25
010A:  MOVF   23,W
010B:  MOVWF  2A
010C:  CALL   0C2
010D:  MOVF   24,W
010E:  BSF    03.6
010F:  MOVWF  0D
0110:  BCF    03.6
0111:  MOVF   25,W
0112:  BSF    03.6
0113:  MOVWF  0F
0114:  BCF    03.6
0115:  MOVF   0B,W
0116:  MOVWF  26
0117:  BCF    0B.7
0118:  BSF    03.5
0119:  BSF    03.6
011A:  BSF    0C.7
011B:  BSF    0C.0
011C:  NOP
011D:  NOP
011E:  BCF    03.5
011F:  BCF    03.6
0120:  BTFSC  26.7
0121:  BSF    0B.7
0122:  BSF    03.6
0123:  RLF    0C,W
0124:  RLF    0E,W
0125:  ANDLW  7F
0126:  BTFSC  03.2
0127:  GOTO   142
0128:  BCF    03.6
0129:  MOVWF  23
012A:  BSF    03.6
012B:  MOVF   0D,W
012C:  BCF    03.6
012D:  MOVWF  24
012E:  BSF    03.6
012F:  MOVF   0F,W
0130:  BCF    03.6
0131:  MOVWF  25
0132:  MOVF   23,W
0133:  MOVWF  2A
0134:  CALL   0C2
0135:  MOVF   24,W
0136:  BSF    03.6
0137:  MOVWF  0D
0138:  BCF    03.6
0139:  MOVF   25,W
013A:  BSF    03.6
013B:  MOVWF  0F
013C:  INCF   0D,F
013D:  BTFSC  03.2
013E:  INCF   0F,F
013F:  BCF    03.6
0140:  GOTO   0EE
0141:  BSF    03.6
0142:  BCF    03.6
0143:  BCF    0A.3
0144:  BCF    0A.4
0145:  GOTO   259 (RETURN)
*
01C1:  MOVF   2B,W
01C2:  CLRF   78
01C3:  SUBWF  2A,W
01C4:  BTFSC  03.0
01C5:  GOTO   1C9
01C6:  MOVF   2A,W
01C7:  MOVWF  77
01C8:  GOTO   1D5
01C9:  CLRF   77
01CA:  MOVLW  08
01CB:  MOVWF  2C
01CC:  RLF    2A,F
01CD:  RLF    77,F
01CE:  MOVF   2B,W
01CF:  SUBWF  77,W
01D0:  BTFSC  03.0
01D1:  MOVWF  77
01D2:  RLF    78,F
01D3:  DECFSZ 2C,F
01D4:  GOTO   1CC
01D5:  RETURN
01D6:  MOVLW  20
01D7:  BTFSS  25.4
01D8:  MOVLW  30
01D9:  MOVWF  26
01DA:  MOVF   24,W
01DB:  MOVWF  77
01DC:  BTFSS  24.7
01DD:  GOTO   1E6
01DE:  COMF   77,F
01DF:  INCF   77,F
01E0:  MOVF   77,W
01E1:  MOVWF  24
01E2:  MOVLW  2D
01E3:  MOVWF  26
01E4:  BSF    25.7
01E5:  BSF    25.0
01E6:  MOVF   24,W
01E7:  MOVWF  2A
01E8:  MOVLW  64
01E9:  MOVWF  2B
01EA:  CALL   1C1
01EB:  MOVF   77,W
01EC:  MOVWF  24
01ED:  MOVLW  30
01EE:  ADDWF  78,W
01EF:  MOVWF  27
01F0:  MOVF   24,W
01F1:  MOVWF  2A
01F2:  MOVLW  0A
01F3:  MOVWF  2B
01F4:  CALL   1C1
01F5:  MOVLW  30
01F6:  ADDWF  77,W
01F7:  MOVWF  29
01F8:  MOVLW  30
01F9:  ADDWF  78,W
01FA:  MOVWF  28
01FB:  MOVF   26,W
01FC:  MOVWF  77
01FD:  MOVLW  30
01FE:  SUBWF  27,W
01FF:  BTFSC  03.2
0200:  GOTO   205
0201:  BSF    25.1
0202:  BTFSC  25.7
0203:  BSF    25.2
0204:  GOTO   219
0205:  MOVF   26,W
0206:  MOVWF  27
0207:  MOVLW  20
0208:  MOVWF  26
0209:  MOVLW  30
020A:  SUBWF  28,W
020B:  BTFSC  03.2
020C:  GOTO   211
020D:  BSF    25.0
020E:  BTFSC  25.7
020F:  BSF    25.1
0210:  GOTO   219
0211:  BTFSS  03.2
0212:  BSF    25.0
0213:  BTFSS  03.2
0214:  GOTO   219
0215:  MOVF   27,W
0216:  MOVWF  28
0217:  MOVLW  20
0218:  MOVWF  27
0219:  BTFSC  25.2
021A:  GOTO   220
021B:  BTFSC  25.1
021C:  GOTO   223
021D:  BTFSC  25.0
021E:  GOTO   226
021F:  GOTO   229
0220:  MOVF   26,W
0221:  MOVWF  2A
0222:  CALL   0C2
0223:  MOVF   27,W
0224:  MOVWF  2A
0225:  CALL   0C2
0226:  MOVF   28,W
0227:  MOVWF  2A
0228:  CALL   0C2
0229:  MOVF   29,W
022A:  MOVWF  2A
022B:  CALL   0C2
022C:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 4000000) 
*
000B:  MOVLW  2B
000C:  MOVWF  04
000D:  BCF    03.7
000E:  MOVF   00,W
000F:  BTFSC  03.2
0010:  GOTO   01F
0011:  MOVLW  01
0012:  MOVWF  78
0013:  CLRF   77
0014:  DECFSZ 77,F
0015:  GOTO   014
0016:  DECFSZ 78,F
0017:  GOTO   013
0018:  MOVLW  4A
0019:  MOVWF  77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  GOTO   01D
001D:  DECFSZ 00,F
001E:  GOTO   011
001F:  RETURN
....................  
.................... #use fast_io(b) 
.................... #use fast_io(d) 
....................  
.................... #define use_portb_lcd TRUE 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0038:  MOVLW  0F
0039:  BSF    03.5
003A:  ANDWF  06,W
003B:  IORLW  F0
003C:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003D:  BCF    03.5
003E:  BSF    06.2
....................    delay_cycles(1); 
003F:  NOP
....................    lcd_output_enable(1); 
0040:  BSF    06.0
....................    delay_cycles(1); 
0041:  NOP
....................    high = lcd_read_nibble(); 
0042:  CALL   02C
0043:  MOVF   78,W
0044:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
0045:  BCF    06.0
....................    delay_cycles(1); 
0046:  NOP
....................    lcd_output_enable(1); 
0047:  BSF    06.0
....................    delay_us(1); 
0048:  NOP
....................    low = lcd_read_nibble(); 
0049:  CALL   02C
004A:  MOVF   78,W
004B:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
004C:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004D:  MOVLW  0F
004E:  BSF    03.5
004F:  ANDWF  06,W
0050:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0051:  BCF    03.5
0052:  SWAPF  32,W
0053:  MOVWF  77
0054:  MOVLW  F0
0055:  ANDWF  77,F
0056:  MOVF   77,W
0057:  IORWF  31,W
0058:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002C:  MOVF   06,W
002D:  MOVWF  77
002E:  SWAPF  06,W
002F:  ANDLW  0F
0030:  MOVWF  78
....................   #endif 
0031:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0020:  SWAPF  32,W
0021:  ANDLW  F0
0022:  MOVWF  77
0023:  MOVLW  0F
0024:  ANDWF  06,W
0025:  IORWF  77,W
0026:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0027:  NOP
....................    lcd_output_enable(1); 
0028:  BSF    06.0
....................    delay_us(2); 
0029:  GOTO   02A
....................    lcd_output_enable(0); 
002A:  BCF    06.0
002B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0032:  BSF    03.5
0033:  BCF    06.0
....................    lcd_rs_tris(); 
0034:  BCF    06.1
....................    lcd_rw_tris(); 
0035:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0036:  BCF    03.5
0037:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0059:  MOVF   78,W
005A:  MOVWF  31
005B:  BTFSC  31.7
005C:  GOTO   038
....................    lcd_output_rs(address); 
005D:  BTFSS  2F.0
005E:  BCF    06.1
005F:  BTFSC  2F.0
0060:  BSF    06.1
....................    delay_cycles(1); 
0061:  NOP
....................    lcd_output_rw(0); 
0062:  BCF    06.2
....................    delay_cycles(1); 
0063:  NOP
....................    lcd_output_enable(0); 
0064:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0065:  SWAPF  30,W
0066:  MOVWF  31
0067:  MOVLW  0F
0068:  ANDWF  31,F
0069:  MOVF   31,W
006A:  MOVWF  32
006B:  CALL   020
....................    lcd_send_nibble(n & 0xf); 
006C:  MOVF   30,W
006D:  ANDLW  0F
006E:  MOVWF  31
006F:  MOVWF  32
0070:  CALL   020
0071:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0072:  MOVLW  28
0073:  MOVWF  24
0074:  MOVLW  0C
0075:  MOVWF  25
0076:  MOVLW  01
0077:  MOVWF  26
0078:  MOVLW  06
0079:  MOVWF  27
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
007A:  BCF    06.0
....................    lcd_output_rs(0); 
007B:  BCF    06.1
....................    lcd_output_rw(0); 
007C:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007D:  MOVLW  0F
007E:  BSF    03.5
007F:  ANDWF  06,W
0080:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0081:  BCF    06.0
....................    lcd_rs_tris(); 
0082:  BCF    06.1
....................    lcd_rw_tris(); 
0083:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0084:  MOVLW  0F
0085:  BCF    03.5
0086:  MOVWF  2B
0087:  CALL   00B
....................    for(i=1;i<=3;++i) 
0088:  MOVLW  01
0089:  MOVWF  23
008A:  MOVF   23,W
008B:  SUBLW  03
008C:  BTFSS  03.0
008D:  GOTO   096
....................    { 
....................        lcd_send_nibble(3); 
008E:  MOVLW  03
008F:  MOVWF  32
0090:  CALL   020
....................        delay_ms(5); 
0091:  MOVLW  05
0092:  MOVWF  2B
0093:  CALL   00B
0094:  INCF   23,F
0095:  GOTO   08A
....................    } 
....................     
....................    lcd_send_nibble(2); 
0096:  MOVLW  02
0097:  MOVWF  32
0098:  CALL   020
....................    delay_ms(5); 
0099:  MOVLW  05
009A:  MOVWF  2B
009B:  CALL   00B
....................    for(i=0;i<=3;++i) 
009C:  CLRF   23
009D:  MOVF   23,W
009E:  SUBLW  03
009F:  BTFSS  03.0
00A0:  GOTO   0AD
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A1:  MOVLW  24
00A2:  ADDWF  23,W
00A3:  MOVWF  04
00A4:  BCF    03.7
00A5:  MOVF   00,W
00A6:  MOVWF  28
00A7:  CLRF   2F
00A8:  MOVF   28,W
00A9:  MOVWF  30
00AA:  CALL   032
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AB:  INCF   23,F
00AC:  GOTO   09D
00AD:  BCF    0A.3
00AE:  BCF    0A.4
00AF:  GOTO   252 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B0:  DECFSZ 2C,W
00B1:  GOTO   0B3
00B2:  GOTO   0B6
....................       address=LCD_LINE_TWO; 
00B3:  MOVLW  40
00B4:  MOVWF  2D
00B5:  GOTO   0B7
....................    else 
....................       address=0; 
00B6:  CLRF   2D
....................       
....................    address+=x-1; 
00B7:  MOVLW  01
00B8:  SUBWF  2B,W
00B9:  ADDWF  2D,F
....................    lcd_send_byte(0,0x80|address); 
00BA:  MOVF   2D,W
00BB:  IORLW  80
00BC:  MOVWF  2E
00BD:  CLRF   2F
00BE:  MOVF   2E,W
00BF:  MOVWF  30
00C0:  CALL   032
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C1:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C2:  MOVF   2A,W
00C3:  XORLW  07
00C4:  BTFSC  03.2
00C5:  GOTO   0D0
00C6:  XORLW  0B
00C7:  BTFSC  03.2
00C8:  GOTO   0D5
00C9:  XORLW  06
00CA:  BTFSC  03.2
00CB:  GOTO   0DD
00CC:  XORLW  02
00CD:  BTFSC  03.2
00CE:  GOTO   0E3
00CF:  GOTO   0E8
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D0:  MOVLW  01
00D1:  MOVWF  2B
00D2:  MOVWF  2C
00D3:  CALL   0B0
00D4:  GOTO   0ED
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00D5:  CLRF   2F
00D6:  MOVLW  01
00D7:  MOVWF  30
00D8:  CALL   032
....................                      delay_ms(2); 
00D9:  MOVLW  02
00DA:  MOVWF  2B
00DB:  CALL   00B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00DC:  GOTO   0ED
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00DD:  MOVLW  01
00DE:  MOVWF  2B
00DF:  MOVLW  02
00E0:  MOVWF  2C
00E1:  CALL   0B0
00E2:  GOTO   0ED
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E3:  CLRF   2F
00E4:  MOVLW  10
00E5:  MOVWF  30
00E6:  CALL   032
00E7:  GOTO   0ED
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00E8:  MOVLW  01
00E9:  MOVWF  2F
00EA:  MOVF   2A,W
00EB:  MOVWF  30
00EC:  CALL   032
....................      #endif 
....................    } 
00ED:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #define sut1 pin_d0 
.................... #define sut2 pin_d1 
.................... #define sut3 pin_d2 
.................... #define sut4 pin_d3 
....................  
.................... #define sat1 pin_d4 
.................... #define sat2 pin_d5 
.................... #define sat3 pin_d6 
.................... #define sat4 pin_d7 
....................  
.................... char tus = 0; 
....................  
.................... char keypad_read() 
.................... { 
....................    output_d(0x00); 
*
0146:  CLRF   08
....................     
....................    output_high(sat1); 
0147:  BSF    08.4
....................    if(input(sut1)){ 
0148:  BTFSS  08.0
0149:  GOTO   14F
....................       delay_ms(20); 
014A:  MOVLW  14
014B:  MOVWF  2B
014C:  CALL   00B
....................       tus = 1; 
014D:  MOVLW  01
014E:  MOVWF  20
....................    } 
....................    if(input(sut2)){ 
014F:  BTFSS  08.1
0150:  GOTO   156
....................       delay_ms(20); 
0151:  MOVLW  14
0152:  MOVWF  2B
0153:  CALL   00B
....................       tus = 2; 
0154:  MOVLW  02
0155:  MOVWF  20
....................    } 
....................    if(input(sut3)){ 
0156:  BTFSS  08.2
0157:  GOTO   15D
....................       delay_ms(20); 
0158:  MOVLW  14
0159:  MOVWF  2B
015A:  CALL   00B
....................       tus = 3; 
015B:  MOVLW  03
015C:  MOVWF  20
....................    } 
....................    if(input(sut4)){ 
015D:  BTFSS  08.3
015E:  GOTO   164
....................       delay_ms(20); 
015F:  MOVLW  14
0160:  MOVWF  2B
0161:  CALL   00B
....................       tus = 0xA; 
0162:  MOVLW  0A
0163:  MOVWF  20
....................    } 
....................    output_low(sat1); 
0164:  BCF    08.4
....................     
....................    output_high(sat2); 
0165:  BSF    08.5
....................    if(input(sut1)){ 
0166:  BTFSS  08.0
0167:  GOTO   16D
....................       delay_ms(20); 
0168:  MOVLW  14
0169:  MOVWF  2B
016A:  CALL   00B
....................       tus = 4; 
016B:  MOVLW  04
016C:  MOVWF  20
....................    } 
....................    if(input(sut2)){ 
016D:  BTFSS  08.1
016E:  GOTO   174
....................       delay_ms(20); 
016F:  MOVLW  14
0170:  MOVWF  2B
0171:  CALL   00B
....................       tus = 5; 
0172:  MOVLW  05
0173:  MOVWF  20
....................    } 
....................    if(input(sut3)){ 
0174:  BTFSS  08.2
0175:  GOTO   17B
....................       delay_ms(20); 
0176:  MOVLW  14
0177:  MOVWF  2B
0178:  CALL   00B
....................       tus = 6; 
0179:  MOVLW  06
017A:  MOVWF  20
....................    } 
....................    if(input(sut4)){ 
017B:  BTFSS  08.3
017C:  GOTO   182
....................       delay_ms(20); 
017D:  MOVLW  14
017E:  MOVWF  2B
017F:  CALL   00B
....................       tus = 0xB; 
0180:  MOVLW  0B
0181:  MOVWF  20
....................    } 
....................    output_low(sat2); 
0182:  BCF    08.5
....................     
....................    output_high(sat3); 
0183:  BSF    08.6
....................    if(input(sut1)){ 
0184:  BTFSS  08.0
0185:  GOTO   18B
....................       delay_ms(20); 
0186:  MOVLW  14
0187:  MOVWF  2B
0188:  CALL   00B
....................       tus = 7; 
0189:  MOVLW  07
018A:  MOVWF  20
....................    } 
....................    if(input(sut2)){ 
018B:  BTFSS  08.1
018C:  GOTO   192
....................       delay_ms(20); 
018D:  MOVLW  14
018E:  MOVWF  2B
018F:  CALL   00B
....................       tus = 8; 
0190:  MOVLW  08
0191:  MOVWF  20
....................    } 
....................    if(input(sut3)){ 
0192:  BTFSS  08.2
0193:  GOTO   199
....................       delay_ms(20); 
0194:  MOVLW  14
0195:  MOVWF  2B
0196:  CALL   00B
....................       tus = 9; 
0197:  MOVLW  09
0198:  MOVWF  20
....................    } 
....................    if(input(sut4)){ 
0199:  BTFSS  08.3
019A:  GOTO   1A0
....................       delay_ms(20); 
019B:  MOVLW  14
019C:  MOVWF  2B
019D:  CALL   00B
....................       tus = 0xC; 
019E:  MOVLW  0C
019F:  MOVWF  20
....................    } 
....................    output_low(sat3); 
01A0:  BCF    08.6
....................     
....................    output_high(sat4); 
01A1:  BSF    08.7
....................    if(input(sut1)){ 
01A2:  BTFSS  08.0
01A3:  GOTO   1A9
....................       delay_ms(20); 
01A4:  MOVLW  14
01A5:  MOVWF  2B
01A6:  CALL   00B
....................       tus = 0xE; 
01A7:  MOVLW  0E
01A8:  MOVWF  20
....................    } 
....................    if(input(sut2)){ 
01A9:  BTFSS  08.1
01AA:  GOTO   1AF
....................       delay_ms(20); 
01AB:  MOVLW  14
01AC:  MOVWF  2B
01AD:  CALL   00B
....................       tus = 0; 
01AE:  CLRF   20
....................    } 
....................    if(input(sut3)){ 
01AF:  BTFSS  08.2
01B0:  GOTO   1B6
....................       delay_ms(20); 
01B1:  MOVLW  14
01B2:  MOVWF  2B
01B3:  CALL   00B
....................       tus = 0xF; 
01B4:  MOVLW  0F
01B5:  MOVWF  20
....................    } 
....................    if(input(sut4)){ 
01B6:  BTFSS  08.3
01B7:  GOTO   1BD
....................       delay_ms(20); 
01B8:  MOVLW  14
01B9:  MOVWF  2B
01BA:  CALL   00B
....................       tus = 0xD; 
01BB:  MOVLW  0D
01BC:  MOVWF  20
....................    } 
....................    output_low(sat4); 
01BD:  BCF    08.7
....................     
....................    return tus; 
01BE:  MOVF   20,W
01BF:  MOVWF  78
01C0:  RETURN
.................... } 
....................  
.................... void main() 
*
022D:  MOVF   03,W
022E:  ANDLW  1F
022F:  MOVWF  03
0230:  CLRF   20
0231:  CLRF   22
0232:  CLRF   21
0233:  BSF    03.5
0234:  BSF    1F.0
0235:  BSF    1F.1
0236:  BSF    1F.2
0237:  BCF    1F.3
0238:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
0239:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
023A:  BCF    03.5
023B:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
023C:  MOVLW  00
023D:  MOVWF  78
023E:  MOVWF  12
023F:  MOVLW  00
0240:  BSF    03.5
0241:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
0242:  BSF    1F.0
0243:  BSF    1F.1
0244:  BSF    1F.2
0245:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0246:  BCF    03.5
0247:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
0248:  MOVLW  F0
0249:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF);  
024A:  ANDWF  1D,F
....................     
....................    set_tris_b(0x00); 
024B:  MOVLW  00
024C:  BSF    03.5
024D:  MOVWF  06
....................    set_tris_d(0x0f); 
024E:  MOVLW  0F
024F:  MOVWF  08
....................     
....................    lcd_init(); 
0250:  BCF    03.5
0251:  GOTO   072
....................     
....................    printf(lcd_putc, "\fBasilan Tus="); 
0252:  MOVLW  04
0253:  BSF    03.6
0254:  MOVWF  0D
0255:  MOVLW  00
0256:  MOVWF  0F
0257:  BCF    03.6
0258:  GOTO   0EE
....................     
....................    while(true){ 
....................          lcd_gotoxy(13, 1); 
0259:  MOVLW  0D
025A:  MOVWF  2B
025B:  MOVLW  01
025C:  MOVWF  2C
025D:  CALL   0B0
....................           
....................          if(keypad_read() != '\0'){ 
025E:  CALL   146
025F:  MOVF   78,F
0260:  BTFSC  03.2
0261:  GOTO   279
....................             if(keypad_read() > 9) 
0262:  CALL   146
0263:  MOVF   78,W
0264:  SUBLW  09
0265:  BTFSC  03.0
0266:  GOTO   26F
....................                printf(lcd_putc, "%d", keypad_read()); 
0267:  CALL   146
0268:  MOVF   78,W
0269:  MOVWF  23
026A:  MOVWF  24
026B:  MOVLW  18
026C:  MOVWF  25
026D:  CALL   1D6
026E:  GOTO   279
....................             else 
....................                printf(lcd_putc, "%d ", keypad_read()); 
026F:  CALL   146
0270:  MOVF   78,W
0271:  MOVWF  23
0272:  MOVWF  24
0273:  MOVLW  18
0274:  MOVWF  25
0275:  CALL   1D6
0276:  MOVLW  20
0277:  MOVWF  2A
0278:  CALL   0C2
....................       } 
0279:  GOTO   259
....................    } 
....................     
.................... } 
....................  
027A:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
