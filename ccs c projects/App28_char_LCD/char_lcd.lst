CCS PCM C Compiler, Version 5.084d, 1               16-Jun-19 17:31
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   Y:\ccs c projects\App28_char_LCD\char_lcd.lst

               ROM used:   1158 words (14%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           39 (11%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3DE
0003:  NOP
....................  
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 0C,10
0005:  DATA 20,10
0006:  DATA A0,21
0007:  DATA C3,29
0008:  DATA A0,21
0009:  DATA 00,00
000A:  DATA 0A,10
000B:  DATA 20,10
000C:  DATA C4,32
000D:  DATA 72,36
000E:  DATA E5,3C
000F:  DATA E9,31
0010:  DATA E9,39
0011:  DATA 69,00
0012:  DATA 0C,2C
0013:  DATA 20,22
0014:  DATA C5,23
0015:  DATA 45,29
0016:  DATA 49,10
0017:  DATA 3D,10
0018:  DATA 25,32
0019:  DATA 00,00
001A:  DATA 0C,05
001B:  DATA 59,10
001C:  DATA C4,22
001D:  DATA C7,22
001E:  DATA D2,24
001F:  DATA A0,1E
0020:  DATA A0,12
0021:  DATA 66,00
0022:  DATA 0C,22
0023:  DATA 49,29
0024:  DATA 45,27
0025:  DATA 43,00
*
010B:  MOVF   0B,W
010C:  MOVWF  28
010D:  BCF    0B.7
010E:  BSF    03.5
010F:  BSF    03.6
0110:  BSF    0C.7
0111:  BSF    0C.0
0112:  NOP
0113:  NOP
0114:  BCF    03.5
0115:  BCF    03.6
0116:  BTFSC  28.7
0117:  BSF    0B.7
0118:  BSF    03.6
0119:  MOVF   0C,W
011A:  ANDLW  7F
011B:  BTFSC  03.2
011C:  GOTO   15F
011D:  BCF    03.6
011E:  MOVWF  28
011F:  BSF    03.6
0120:  MOVF   0D,W
0121:  BCF    03.6
0122:  MOVWF  29
0123:  BSF    03.6
0124:  MOVF   0F,W
0125:  BCF    03.6
0126:  MOVWF  2A
0127:  MOVF   28,W
0128:  MOVWF  35
0129:  CALL   0DF
012A:  MOVF   29,W
012B:  BSF    03.6
012C:  MOVWF  0D
012D:  BCF    03.6
012E:  MOVF   2A,W
012F:  BSF    03.6
0130:  MOVWF  0F
0131:  BCF    03.6
0132:  MOVF   0B,W
0133:  MOVWF  2B
0134:  BCF    0B.7
0135:  BSF    03.5
0136:  BSF    03.6
0137:  BSF    0C.7
0138:  BSF    0C.0
0139:  NOP
013A:  NOP
013B:  BCF    03.5
013C:  BCF    03.6
013D:  BTFSC  2B.7
013E:  BSF    0B.7
013F:  BSF    03.6
0140:  RLF    0C,W
0141:  RLF    0E,W
0142:  ANDLW  7F
0143:  BTFSC  03.2
0144:  GOTO   15F
0145:  BCF    03.6
0146:  MOVWF  28
0147:  BSF    03.6
0148:  MOVF   0D,W
0149:  BCF    03.6
014A:  MOVWF  29
014B:  BSF    03.6
014C:  MOVF   0F,W
014D:  BCF    03.6
014E:  MOVWF  2A
014F:  MOVF   28,W
0150:  MOVWF  35
0151:  CALL   0DF
0152:  MOVF   29,W
0153:  BSF    03.6
0154:  MOVWF  0D
0155:  BCF    03.6
0156:  MOVF   2A,W
0157:  BSF    03.6
0158:  MOVWF  0F
0159:  INCF   0D,F
015A:  BTFSC  03.2
015B:  INCF   0F,F
015C:  BCF    03.6
015D:  GOTO   10B
015E:  BSF    03.6
015F:  BCF    03.6
0160:  RETURN
0161:  MOVF   0B,W
0162:  MOVWF  29
0163:  BCF    0B.7
0164:  BSF    03.5
0165:  BSF    03.6
0166:  BSF    0C.7
0167:  BSF    0C.0
0168:  NOP
0169:  NOP
016A:  BCF    03.5
016B:  BCF    03.6
016C:  BTFSC  29.7
016D:  BSF    0B.7
016E:  BTFSC  03.0
016F:  GOTO   198
0170:  BSF    03.6
0171:  MOVF   0C,W
0172:  ANDLW  7F
0173:  BCF    03.6
0174:  MOVWF  29
0175:  BSF    03.6
0176:  MOVF   0D,W
0177:  BCF    03.6
0178:  MOVWF  2A
0179:  BSF    03.6
017A:  MOVF   0F,W
017B:  BCF    03.6
017C:  MOVWF  2B
017D:  MOVF   29,W
017E:  MOVWF  35
017F:  CALL   0DF
0180:  MOVF   2A,W
0181:  BSF    03.6
0182:  MOVWF  0D
0183:  BCF    03.6
0184:  MOVF   2B,W
0185:  BSF    03.6
0186:  MOVWF  0F
0187:  BCF    03.6
0188:  MOVF   0B,W
0189:  MOVWF  2C
018A:  BCF    0B.7
018B:  BSF    03.5
018C:  BSF    03.6
018D:  BSF    0C.7
018E:  BSF    0C.0
018F:  NOP
0190:  NOP
0191:  BCF    03.5
0192:  BCF    03.6
0193:  BTFSC  2C.7
0194:  BSF    0B.7
0195:  DECFSZ 28,F
0196:  GOTO   198
0197:  GOTO   1B7
0198:  BSF    03.6
0199:  RLF    0C,W
019A:  RLF    0E,W
019B:  ANDLW  7F
019C:  BCF    03.6
019D:  MOVWF  29
019E:  BSF    03.6
019F:  MOVF   0D,W
01A0:  BCF    03.6
01A1:  MOVWF  2A
01A2:  BSF    03.6
01A3:  MOVF   0F,W
01A4:  BCF    03.6
01A5:  MOVWF  2B
01A6:  MOVF   29,W
01A7:  MOVWF  35
01A8:  CALL   0DF
01A9:  MOVF   2A,W
01AA:  BSF    03.6
01AB:  MOVWF  0D
01AC:  BCF    03.6
01AD:  MOVF   2B,W
01AE:  BSF    03.6
01AF:  MOVWF  0F
01B0:  INCF   0D,F
01B1:  BTFSC  03.2
01B2:  INCF   0F,F
01B3:  BCF    03.0
01B4:  BCF    03.6
01B5:  DECFSZ 28,F
01B6:  GOTO   161
01B7:  RETURN
01B8:  MOVF   2F,W
01B9:  CLRF   78
01BA:  SUBWF  2E,W
01BB:  BTFSC  03.0
01BC:  GOTO   1C0
01BD:  MOVF   2E,W
01BE:  MOVWF  77
01BF:  GOTO   1CC
01C0:  CLRF   77
01C1:  MOVLW  08
01C2:  MOVWF  30
01C3:  RLF    2E,F
01C4:  RLF    77,F
01C5:  MOVF   2F,W
01C6:  SUBWF  77,W
01C7:  BTFSC  03.0
01C8:  MOVWF  77
01C9:  RLF    78,F
01CA:  DECFSZ 30,F
01CB:  GOTO   1C3
01CC:  RETURN
01CD:  MOVLW  20
01CE:  BTFSS  29.4
01CF:  MOVLW  30
01D0:  MOVWF  2A
01D1:  MOVF   28,W
01D2:  MOVWF  77
01D3:  BTFSS  28.7
01D4:  GOTO   1DD
01D5:  COMF   77,F
01D6:  INCF   77,F
01D7:  MOVF   77,W
01D8:  MOVWF  28
01D9:  MOVLW  2D
01DA:  MOVWF  2A
01DB:  BSF    29.7
01DC:  BSF    29.0
01DD:  MOVF   28,W
01DE:  MOVWF  2E
01DF:  MOVLW  64
01E0:  MOVWF  2F
01E1:  CALL   1B8
01E2:  MOVF   77,W
01E3:  MOVWF  28
01E4:  MOVLW  30
01E5:  ADDWF  78,W
01E6:  MOVWF  2B
01E7:  MOVF   28,W
01E8:  MOVWF  2E
01E9:  MOVLW  0A
01EA:  MOVWF  2F
01EB:  CALL   1B8
01EC:  MOVLW  30
01ED:  ADDWF  77,W
01EE:  MOVWF  2D
01EF:  MOVLW  30
01F0:  ADDWF  78,W
01F1:  MOVWF  2C
01F2:  MOVF   2A,W
01F3:  MOVWF  77
01F4:  MOVLW  30
01F5:  SUBWF  2B,W
01F6:  BTFSC  03.2
01F7:  GOTO   1FC
01F8:  BSF    29.1
01F9:  BTFSC  29.7
01FA:  BSF    29.2
01FB:  GOTO   210
01FC:  MOVF   2A,W
01FD:  MOVWF  2B
01FE:  MOVLW  20
01FF:  MOVWF  2A
0200:  MOVLW  30
0201:  SUBWF  2C,W
0202:  BTFSC  03.2
0203:  GOTO   208
0204:  BSF    29.0
0205:  BTFSC  29.7
0206:  BSF    29.1
0207:  GOTO   210
0208:  BTFSS  03.2
0209:  BSF    29.0
020A:  BTFSS  03.2
020B:  GOTO   210
020C:  MOVF   2B,W
020D:  MOVWF  2C
020E:  MOVLW  20
020F:  MOVWF  2B
0210:  BTFSC  29.2
0211:  GOTO   217
0212:  BTFSC  29.1
0213:  GOTO   21A
0214:  BTFSC  29.0
0215:  GOTO   21D
0216:  GOTO   220
0217:  MOVF   2A,W
0218:  MOVWF  35
0219:  CALL   0DF
021A:  MOVF   2B,W
021B:  MOVWF  35
021C:  CALL   0DF
021D:  MOVF   2C,W
021E:  MOVWF  35
021F:  CALL   0DF
0220:  MOVF   2D,W
0221:  MOVWF  35
0222:  CALL   0DF
0223:  BCF    0A.3
0224:  BCF    0A.4
0225:  GOTO   43D (RETURN)
0226:  BTFSC  03.1
0227:  GOTO   22B
0228:  MOVLW  3D
0229:  MOVWF  04
022A:  BCF    03.7
022B:  CLRF   77
022C:  CLRF   78
022D:  CLRF   79
022E:  CLRF   7A
022F:  CLRF   3D
0230:  CLRF   3E
0231:  CLRF   3F
0232:  CLRF   40
0233:  MOVF   3C,W
0234:  IORWF  3B,W
0235:  IORWF  3A,W
0236:  IORWF  39,W
0237:  BTFSC  03.2
0238:  GOTO   269
0239:  MOVLW  20
023A:  MOVWF  41
023B:  BCF    03.0
023C:  RLF    35,F
023D:  RLF    36,F
023E:  RLF    37,F
023F:  RLF    38,F
0240:  RLF    3D,F
0241:  RLF    3E,F
0242:  RLF    3F,F
0243:  RLF    40,F
0244:  MOVF   3C,W
0245:  SUBWF  40,W
0246:  BTFSS  03.2
0247:  GOTO   252
0248:  MOVF   3B,W
0249:  SUBWF  3F,W
024A:  BTFSS  03.2
024B:  GOTO   252
024C:  MOVF   3A,W
024D:  SUBWF  3E,W
024E:  BTFSS  03.2
024F:  GOTO   252
0250:  MOVF   39,W
0251:  SUBWF  3D,W
0252:  BTFSS  03.0
0253:  GOTO   263
0254:  MOVF   39,W
0255:  SUBWF  3D,F
0256:  MOVF   3A,W
0257:  BTFSS  03.0
0258:  INCFSZ 3A,W
0259:  SUBWF  3E,F
025A:  MOVF   3B,W
025B:  BTFSS  03.0
025C:  INCFSZ 3B,W
025D:  SUBWF  3F,F
025E:  MOVF   3C,W
025F:  BTFSS  03.0
0260:  INCFSZ 3C,W
0261:  SUBWF  40,F
0262:  BSF    03.0
0263:  RLF    77,F
0264:  RLF    78,F
0265:  RLF    79,F
0266:  RLF    7A,F
0267:  DECFSZ 41,F
0268:  GOTO   23B
0269:  MOVF   3D,W
026A:  MOVWF  00
026B:  INCF   04,F
026C:  MOVF   3E,W
026D:  MOVWF  00
026E:  INCF   04,F
026F:  MOVF   3F,W
0270:  MOVWF  00
0271:  INCF   04,F
0272:  MOVF   40,W
0273:  MOVWF  00
0274:  RETURN
0275:  MOVF   04,W
0276:  MOVWF  2D
0277:  MOVF   2C,W
0278:  MOVWF  2F
0279:  BTFSC  03.2
027A:  GOTO   307
027B:  MOVF   2B,W
027C:  MOVWF  38
027D:  MOVF   2A,W
027E:  MOVWF  37
027F:  MOVF   29,W
0280:  MOVWF  36
0281:  MOVF   28,W
0282:  MOVWF  35
0283:  CLRF   3C
0284:  CLRF   3B
0285:  MOVLW  20
0286:  MOVWF  3A
0287:  MOVLW  82
0288:  MOVWF  39
0289:  MOVF   35,W
028A:  BTFSC  03.2
028B:  GOTO   2F9
028C:  MOVWF  3D
028D:  MOVF   39,W
028E:  BTFSC  03.2
028F:  GOTO   2F9
0290:  ADDWF  3D,F
0291:  BTFSC  03.0
0292:  GOTO   29A
0293:  MOVLW  7F
0294:  SUBWF  3D,F
0295:  BTFSS  03.0
0296:  GOTO   2F9
0297:  BTFSC  03.2
0298:  GOTO   2F9
0299:  GOTO   29E
029A:  MOVLW  81
029B:  ADDWF  3D,F
029C:  BTFSC  03.0
029D:  GOTO   2F9
029E:  MOVF   3D,W
029F:  MOVWF  77
02A0:  CLRF   78
02A1:  CLRF   79
02A2:  CLRF   7A
02A3:  MOVF   36,W
02A4:  MOVWF  41
02A5:  BSF    41.7
02A6:  MOVF   37,W
02A7:  MOVWF  40
02A8:  MOVF   38,W
02A9:  MOVWF  3F
02AA:  MOVLW  18
02AB:  MOVWF  3D
02AC:  CLRF   3E
02AD:  BTFSS  3F.0
02AE:  GOTO   2C7
02AF:  MOVF   3C,W
02B0:  ADDWF  7A,F
02B1:  BTFSS  03.0
02B2:  GOTO   2B9
02B3:  INCF   79,F
02B4:  BTFSS  03.2
02B5:  GOTO   2B9
02B6:  INCF   78,F
02B7:  BTFSC  03.2
02B8:  BSF    3E.7
02B9:  MOVF   3B,W
02BA:  ADDWF  79,F
02BB:  BTFSS  03.0
02BC:  GOTO   2C0
02BD:  INCF   78,F
02BE:  BTFSC  03.2
02BF:  BSF    3E.7
02C0:  MOVF   3A,W
02C1:  MOVWF  37
02C2:  BSF    37.7
02C3:  MOVF   37,W
02C4:  ADDWF  78,F
02C5:  BTFSC  03.0
02C6:  BSF    3E.7
02C7:  RLF    3E,F
02C8:  RRF    78,F
02C9:  RRF    79,F
02CA:  RRF    7A,F
02CB:  RRF    41,F
02CC:  RRF    40,F
02CD:  RRF    3F,F
02CE:  BCF    03.0
02CF:  DECFSZ 3D,F
02D0:  GOTO   2AC
02D1:  MOVLW  01
02D2:  ADDWF  77,F
02D3:  BTFSC  03.0
02D4:  GOTO   2F9
02D5:  BTFSC  78.7
02D6:  GOTO   2DE
02D7:  RLF    41,F
02D8:  RLF    7A,F
02D9:  RLF    79,F
02DA:  RLF    78,F
02DB:  DECF   77,F
02DC:  BTFSC  03.2
02DD:  GOTO   2F9
02DE:  BTFSS  41.7
02DF:  GOTO   2EF
02E0:  INCF   7A,F
02E1:  BTFSS  03.2
02E2:  GOTO   2EF
02E3:  INCF   79,F
02E4:  BTFSS  03.2
02E5:  GOTO   2EF
02E6:  INCF   78,F
02E7:  BTFSS  03.2
02E8:  GOTO   2EF
02E9:  RRF    78,F
02EA:  RRF    79,F
02EB:  RRF    7A,F
02EC:  INCF   77,F
02ED:  BTFSC  03.2
02EE:  GOTO   2F9
02EF:  MOVF   36,W
02F0:  MOVWF  3E
02F1:  MOVF   3A,W
02F2:  XORWF  3E,F
02F3:  BTFSS  3E.7
02F4:  GOTO   2F7
02F5:  BSF    78.7
02F6:  GOTO   2FD
02F7:  BCF    78.7
02F8:  GOTO   2FD
02F9:  CLRF   77
02FA:  CLRF   78
02FB:  CLRF   79
02FC:  CLRF   7A
02FD:  MOVF   7A,W
02FE:  MOVWF  2B
02FF:  MOVF   79,W
0300:  MOVWF  2A
0301:  MOVF   78,W
0302:  MOVWF  29
0303:  MOVF   77,W
0304:  MOVWF  28
0305:  DECFSZ 2F,F
0306:  GOTO   27B
0307:  MOVF   2B,W
0308:  MOVWF  38
0309:  MOVF   2A,W
030A:  MOVWF  37
030B:  MOVF   29,W
030C:  MOVWF  36
030D:  MOVF   28,W
030E:  MOVWF  35
030F:  MOVF   35,W
0310:  SUBLW  B6
0311:  MOVWF  35
0312:  CLRF   7A
0313:  MOVF   36,W
0314:  MOVWF  39
0315:  BSF    36.7
0316:  BCF    03.0
0317:  RRF    36,F
0318:  RRF    37,F
0319:  RRF    38,F
031A:  RRF    7A,F
031B:  RRF    79,F
031C:  RRF    78,F
031D:  RRF    77,F
031E:  DECFSZ 35,F
031F:  GOTO   316
0320:  BTFSS  39.7
0321:  GOTO   32D
0322:  COMF   77,F
0323:  COMF   78,F
0324:  COMF   79,F
0325:  COMF   7A,F
0326:  INCF   77,F
0327:  BTFSC  03.2
0328:  INCF   78,F
0329:  BTFSC  03.2
032A:  INCF   79,F
032B:  BTFSC  03.2
032C:  INCF   7A,F
032D:  MOVF   7A,W
032E:  MOVWF  2B
032F:  MOVF   79,W
0330:  MOVWF  2A
0331:  MOVF   78,W
0332:  MOVWF  29
0333:  MOVF   77,W
0334:  MOVWF  28
0335:  BTFSS  2B.7
0336:  GOTO   344
0337:  DECF   2D,F
0338:  BSF    2D.5
0339:  COMF   28,F
033A:  COMF   29,F
033B:  COMF   2A,F
033C:  COMF   2B,F
033D:  INCF   28,F
033E:  BTFSC  03.2
033F:  INCF   29,F
0340:  BTFSC  03.2
0341:  INCF   2A,F
0342:  BTFSC  03.2
0343:  INCF   2B,F
0344:  MOVLW  3B
0345:  MOVWF  34
0346:  MOVLW  9A
0347:  MOVWF  33
0348:  MOVLW  CA
0349:  MOVWF  32
034A:  CLRF   31
034B:  MOVLW  0A
034C:  MOVWF  2F
034D:  MOVF   2C,W
034E:  BTFSC  03.2
034F:  INCF   2D,F
0350:  BSF    03.1
0351:  MOVLW  28
0352:  MOVWF  04
0353:  BCF    03.7
0354:  MOVF   2B,W
0355:  MOVWF  38
0356:  MOVF   2A,W
0357:  MOVWF  37
0358:  MOVF   29,W
0359:  MOVWF  36
035A:  MOVF   28,W
035B:  MOVWF  35
035C:  MOVF   34,W
035D:  MOVWF  3C
035E:  MOVF   33,W
035F:  MOVWF  3B
0360:  MOVF   32,W
0361:  MOVWF  3A
0362:  MOVF   31,W
0363:  MOVWF  39
0364:  CALL   226
0365:  MOVF   78,W
0366:  MOVF   77,F
0367:  BTFSS  03.2
0368:  GOTO   37C
0369:  INCF   2C,W
036A:  SUBWF  2F,W
036B:  BTFSC  03.2
036C:  GOTO   37C
036D:  MOVF   2D,W
036E:  BTFSC  03.2
036F:  GOTO   37E
0370:  ANDLW  0F
0371:  SUBWF  2F,W
0372:  BTFSC  03.2
0373:  GOTO   376
0374:  BTFSC  03.0
0375:  GOTO   3AE
0376:  BTFSC  2D.7
0377:  GOTO   3AE
0378:  BTFSC  2D.6
0379:  GOTO   37E
037A:  MOVLW  20
037B:  GOTO   3AA
037C:  MOVLW  20
037D:  ANDWF  2D,F
037E:  BTFSS  2D.5
037F:  GOTO   38C
0380:  BCF    2D.5
0381:  MOVF   2C,W
0382:  BTFSS  03.2
0383:  DECF   2D,F
0384:  MOVF   77,W
0385:  MOVWF  2D
0386:  MOVLW  2D
0387:  MOVWF  35
0388:  CALL   0DF
0389:  MOVF   2D,W
038A:  MOVWF  77
038B:  CLRF   2D
038C:  MOVF   2C,W
038D:  SUBWF  2F,W
038E:  BTFSS  03.2
038F:  GOTO   39A
0390:  MOVF   77,W
0391:  MOVWF  2D
0392:  MOVLW  2E
0393:  MOVWF  35
0394:  CALL   0DF
0395:  MOVF   2D,W
0396:  MOVWF  77
0397:  MOVLW  20
0398:  ANDWF  2D,F
0399:  MOVLW  00
039A:  MOVLW  30
039B:  BTFSS  2D.5
039C:  GOTO   3AA
039D:  BCF    2D.5
039E:  MOVF   2C,W
039F:  BTFSS  03.2
03A0:  DECF   2D,F
03A1:  MOVF   77,W
03A2:  MOVWF  2D
03A3:  MOVLW  2D
03A4:  MOVWF  35
03A5:  CALL   0DF
03A6:  MOVF   2D,W
03A7:  MOVWF  77
03A8:  CLRF   2D
03A9:  MOVLW  30
03AA:  ADDWF  77,F
03AB:  MOVF   77,W
03AC:  MOVWF  35
03AD:  CALL   0DF
03AE:  BCF    03.1
03AF:  MOVF   34,W
03B0:  MOVWF  38
03B1:  MOVF   33,W
03B2:  MOVWF  37
03B3:  MOVF   32,W
03B4:  MOVWF  36
03B5:  MOVF   31,W
03B6:  MOVWF  35
03B7:  CLRF   3C
03B8:  CLRF   3B
03B9:  CLRF   3A
03BA:  MOVLW  0A
03BB:  MOVWF  39
03BC:  CALL   226
03BD:  MOVF   7A,W
03BE:  MOVWF  34
03BF:  MOVF   79,W
03C0:  MOVWF  33
03C1:  MOVF   78,W
03C2:  MOVWF  32
03C3:  MOVF   77,W
03C4:  MOVWF  31
03C5:  DECFSZ 2F,F
03C6:  GOTO   350
03C7:  BCF    0A.3
03C8:  BCF    0A.4
03C9:  GOTO   45B (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 4000000) 
*
0026:  MOVLW  36
0027:  MOVWF  04
0028:  BCF    03.7
0029:  MOVF   00,W
002A:  BTFSC  03.2
002B:  GOTO   03A
002C:  MOVLW  01
002D:  MOVWF  78
002E:  CLRF   77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  DECFSZ 78,F
0032:  GOTO   02E
0033:  MOVLW  4A
0034:  MOVWF  77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  GOTO   038
0038:  DECFSZ 00,F
0039:  GOTO   02C
003A:  RETURN
....................  
.................... #use fast_io(b) 
....................  
.................... #define use_portb_lcd TRUE 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
004D:  MOVLW  0F
004E:  BSF    03.5
004F:  ANDWF  06,W
0050:  IORLW  F0
0051:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0052:  BCF    03.5
0053:  BSF    06.2
....................    delay_cycles(1); 
0054:  NOP
....................    lcd_output_enable(1); 
0055:  BSF    06.0
....................    delay_cycles(1); 
0056:  NOP
....................    high = lcd_read_nibble(); 
0057:  CALL   047
0058:  MOVF   78,W
0059:  MOVWF  3D
....................        
....................    lcd_output_enable(0); 
005A:  BCF    06.0
....................    delay_cycles(1); 
005B:  NOP
....................    lcd_output_enable(1); 
005C:  BSF    06.0
....................    delay_us(1); 
005D:  NOP
....................    low = lcd_read_nibble(); 
005E:  CALL   047
005F:  MOVF   78,W
0060:  MOVWF  3C
....................        
....................    lcd_output_enable(0); 
0061:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0062:  MOVLW  0F
0063:  BSF    03.5
0064:  ANDWF  06,W
0065:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0066:  BCF    03.5
0067:  SWAPF  3D,W
0068:  MOVWF  77
0069:  MOVLW  F0
006A:  ANDWF  77,F
006B:  MOVF   77,W
006C:  IORWF  3C,W
006D:  MOVWF  78
006E:  RETURN
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0047:  MOVF   06,W
0048:  MOVWF  77
0049:  SWAPF  06,W
004A:  ANDLW  0F
004B:  MOVWF  78
....................   #endif 
004C:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
003B:  SWAPF  3D,W
003C:  ANDLW  F0
003D:  MOVWF  77
003E:  MOVLW  0F
003F:  ANDWF  06,W
0040:  IORWF  77,W
0041:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0042:  NOP
....................    lcd_output_enable(1); 
0043:  BSF    06.0
....................    delay_us(2); 
0044:  GOTO   045
....................    lcd_output_enable(0); 
0045:  BCF    06.0
0046:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
006F:  BSF    03.5
0070:  BCF    06.0
....................    lcd_rs_tris(); 
0071:  BCF    06.1
....................    lcd_rw_tris(); 
0072:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0073:  BCF    03.5
0074:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0075:  CALL   04D
0076:  MOVF   78,W
0077:  MOVWF  3C
0078:  BTFSC  3C.7
0079:  GOTO   075
....................    lcd_output_rs(address); 
007A:  BTFSS  3A.0
007B:  BCF    06.1
007C:  BTFSC  3A.0
007D:  BSF    06.1
....................    delay_cycles(1); 
007E:  NOP
....................    lcd_output_rw(0); 
007F:  BCF    06.2
....................    delay_cycles(1); 
0080:  NOP
....................    lcd_output_enable(0); 
0081:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0082:  SWAPF  3B,W
0083:  MOVWF  3C
0084:  MOVLW  0F
0085:  ANDWF  3C,F
0086:  MOVF   3C,W
0087:  MOVWF  3D
0088:  CALL   03B
....................    lcd_send_nibble(n & 0xf); 
0089:  MOVF   3B,W
008A:  ANDLW  0F
008B:  MOVWF  3C
008C:  MOVWF  3D
008D:  CALL   03B
008E:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
008F:  MOVLW  28
0090:  MOVWF  29
0091:  MOVLW  0C
0092:  MOVWF  2A
0093:  MOVLW  01
0094:  MOVWF  2B
0095:  MOVLW  06
0096:  MOVWF  2C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0097:  BCF    06.0
....................    lcd_output_rs(0); 
0098:  BCF    06.1
....................    lcd_output_rw(0); 
0099:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
009A:  MOVLW  0F
009B:  BSF    03.5
009C:  ANDWF  06,W
009D:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
009E:  BCF    06.0
....................    lcd_rs_tris(); 
009F:  BCF    06.1
....................    lcd_rw_tris(); 
00A0:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00A1:  MOVLW  0F
00A2:  BCF    03.5
00A3:  MOVWF  36
00A4:  CALL   026
....................    for(i=1;i<=3;++i) 
00A5:  MOVLW  01
00A6:  MOVWF  28
00A7:  MOVF   28,W
00A8:  SUBLW  03
00A9:  BTFSS  03.0
00AA:  GOTO   0B3
....................    { 
....................        lcd_send_nibble(3); 
00AB:  MOVLW  03
00AC:  MOVWF  3D
00AD:  CALL   03B
....................        delay_ms(5); 
00AE:  MOVLW  05
00AF:  MOVWF  36
00B0:  CALL   026
00B1:  INCF   28,F
00B2:  GOTO   0A7
....................    } 
....................     
....................    lcd_send_nibble(2); 
00B3:  MOVLW  02
00B4:  MOVWF  3D
00B5:  CALL   03B
....................    delay_ms(5); 
00B6:  MOVLW  05
00B7:  MOVWF  36
00B8:  CALL   026
....................    for(i=0;i<=3;++i) 
00B9:  CLRF   28
00BA:  MOVF   28,W
00BB:  SUBLW  03
00BC:  BTFSS  03.0
00BD:  GOTO   0CA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00BE:  MOVLW  29
00BF:  ADDWF  28,W
00C0:  MOVWF  04
00C1:  BCF    03.7
00C2:  MOVF   00,W
00C3:  MOVWF  2D
00C4:  CLRF   3A
00C5:  MOVF   2D,W
00C6:  MOVWF  3B
00C7:  CALL   06F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C8:  INCF   28,F
00C9:  GOTO   0BA
00CA:  BCF    0A.3
00CB:  BCF    0A.4
00CC:  GOTO   400 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00CD:  DECFSZ 37,W
00CE:  GOTO   0D0
00CF:  GOTO   0D3
....................       address=LCD_LINE_TWO; 
00D0:  MOVLW  40
00D1:  MOVWF  38
00D2:  GOTO   0D4
....................    else 
....................       address=0; 
00D3:  CLRF   38
....................       
....................    address+=x-1; 
00D4:  MOVLW  01
00D5:  SUBWF  36,W
00D6:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address); 
00D7:  MOVF   38,W
00D8:  IORLW  80
00D9:  MOVWF  39
00DA:  CLRF   3A
00DB:  MOVF   39,W
00DC:  MOVWF  3B
00DD:  CALL   06F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00DE:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00DF:  MOVF   35,W
00E0:  XORLW  07
00E1:  BTFSC  03.2
00E2:  GOTO   0ED
00E3:  XORLW  0B
00E4:  BTFSC  03.2
00E5:  GOTO   0F2
00E6:  XORLW  06
00E7:  BTFSC  03.2
00E8:  GOTO   0FA
00E9:  XORLW  02
00EA:  BTFSC  03.2
00EB:  GOTO   100
00EC:  GOTO   105
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00ED:  MOVLW  01
00EE:  MOVWF  36
00EF:  MOVWF  37
00F0:  CALL   0CD
00F1:  GOTO   10A
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F2:  CLRF   3A
00F3:  MOVLW  01
00F4:  MOVWF  3B
00F5:  CALL   06F
....................                      delay_ms(2); 
00F6:  MOVLW  02
00F7:  MOVWF  36
00F8:  CALL   026
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00F9:  GOTO   10A
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00FA:  MOVLW  01
00FB:  MOVWF  36
00FC:  MOVLW  02
00FD:  MOVWF  37
00FE:  CALL   0CD
00FF:  GOTO   10A
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0100:  CLRF   3A
0101:  MOVLW  10
0102:  MOVWF  3B
0103:  CALL   06F
0104:  GOTO   10A
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0105:  MOVLW  01
0106:  MOVWF  3A
0107:  MOVF   35,W
0108:  MOVWF  3B
0109:  CALL   06F
....................      #endif 
....................    } 
010A:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
*
03CA:  MOVF   28,W
03CB:  MOVWF  36
03CC:  MOVF   29,W
03CD:  MOVWF  37
03CE:  CALL   0CD
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
03CF:  CALL   04D
03D0:  MOVF   78,W
03D1:  MOVWF  2B
03D2:  BTFSC  2B.7
03D3:  GOTO   3CF
....................    lcd_output_rs(1); 
03D4:  BSF    06.1
....................    value = lcd_read_byte(); 
03D5:  CALL   04D
03D6:  MOVF   78,W
03D7:  MOVWF  2A
....................    lcd_output_rs(0); 
03D8:  BCF    06.1
....................     
....................    return(value); 
03D9:  MOVF   2A,W
03DA:  MOVWF  78
03DB:  BCF    0A.3
03DC:  BCF    0A.4
03DD:  GOTO   475 (RETURN)
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... int x; 
.................... float y; 
.................... char z; 
....................  
.................... void main() 
03DE:  MOVF   03,W
03DF:  ANDLW  1F
03E0:  MOVWF  03
03E1:  CLRF   27
03E2:  CLRF   26
03E3:  BSF    03.5
03E4:  BSF    1F.0
03E5:  BSF    1F.1
03E6:  BSF    1F.2
03E7:  BCF    1F.3
03E8:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
03E9:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
03EA:  BCF    03.5
03EB:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
03EC:  MOVLW  00
03ED:  MOVWF  78
03EE:  MOVWF  12
03EF:  MOVLW  00
03F0:  BSF    03.5
03F1:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
03F2:  BSF    1F.0
03F3:  BSF    1F.1
03F4:  BSF    1F.2
03F5:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
03F6:  BCF    03.5
03F7:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
03F8:  MOVLW  F0
03F9:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF);  
03FA:  ANDWF  1D,F
....................     
....................    set_tris_b(0x00); 
03FB:  MOVLW  00
03FC:  BSF    03.5
03FD:  MOVWF  06
....................     
....................    lcd_init(); 
03FE:  BCF    03.5
03FF:  GOTO   08F
....................     
....................    x = 10; 
0400:  MOVLW  0A
0401:  MOVWF  20
....................    y = 32.6; 
0402:  MOVLW  66
0403:  MOVWF  24
0404:  MOVWF  23
0405:  MOVLW  02
0406:  MOVWF  22
0407:  MOVLW  84
0408:  MOVWF  21
....................     
....................    while(true){ 
....................       lcd_send_byte(0, 0x0d); 
0409:  CLRF   3A
040A:  MOVLW  0D
040B:  MOVWF  3B
040C:  CALL   06F
....................        
....................       printf(lcd_putc, "\f    CCS C"); 
040D:  MOVLW  04
040E:  BSF    03.6
040F:  MOVWF  0D
0410:  MOVLW  00
0411:  MOVWF  0F
0412:  BCF    03.6
0413:  CALL   10B
....................       delay_ms(1000); 
0414:  MOVLW  04
0415:  MOVWF  28
0416:  MOVLW  FA
0417:  MOVWF  36
0418:  CALL   026
0419:  DECFSZ 28,F
041A:  GOTO   416
....................        
....................       printf(lcd_putc, "\n   Derleyicisi"); 
041B:  MOVLW  0A
041C:  BSF    03.6
041D:  MOVWF  0D
041E:  MOVLW  00
041F:  MOVWF  0F
0420:  BCF    03.6
0421:  CALL   10B
....................       delay_ms(1000); 
0422:  MOVLW  04
0423:  MOVWF  28
0424:  MOVLW  FA
0425:  MOVWF  36
0426:  CALL   026
0427:  DECFSZ 28,F
0428:  GOTO   424
....................        
....................       lcd_gotoxy(1, 2); 
0429:  MOVLW  01
042A:  MOVWF  36
042B:  MOVLW  02
042C:  MOVWF  37
042D:  CALL   0CD
....................       printf(lcd_putc, "\fX DEGERI = %d", x); 
042E:  MOVLW  12
042F:  BSF    03.6
0430:  MOVWF  0D
0431:  MOVLW  00
0432:  MOVWF  0F
0433:  BCF    03.0
0434:  MOVLW  0C
0435:  BCF    03.6
0436:  MOVWF  28
0437:  CALL   161
0438:  MOVF   20,W
0439:  MOVWF  28
043A:  MOVLW  18
043B:  MOVWF  29
043C:  GOTO   1CD
....................       delay_ms(1000); 
043D:  MOVLW  04
043E:  MOVWF  28
043F:  MOVLW  FA
0440:  MOVWF  36
0441:  CALL   026
0442:  DECFSZ 28,F
0443:  GOTO   43F
....................        
....................       printf(lcd_putc, "\f\nY DEGERI = %f", y); 
0444:  MOVLW  1A
0445:  BSF    03.6
0446:  MOVWF  0D
0447:  MOVLW  00
0448:  MOVWF  0F
0449:  BCF    03.0
044A:  MOVLW  0D
044B:  BCF    03.6
044C:  MOVWF  28
044D:  CALL   161
044E:  MOVLW  89
044F:  MOVWF  04
0450:  MOVF   24,W
0451:  MOVWF  2B
0452:  MOVF   23,W
0453:  MOVWF  2A
0454:  MOVF   22,W
0455:  MOVWF  29
0456:  MOVF   21,W
0457:  MOVWF  28
0458:  MOVLW  02
0459:  MOVWF  2C
045A:  GOTO   275
....................       delay_ms(1000); 
045B:  MOVLW  04
045C:  MOVWF  28
045D:  MOVLW  FA
045E:  MOVWF  36
045F:  CALL   026
0460:  DECFSZ 28,F
0461:  GOTO   45D
....................        
....................       printf(lcd_putc, "\fDIRENC"); 
0462:  MOVLW  22
0463:  BSF    03.6
0464:  MOVWF  0D
0465:  MOVLW  00
0466:  MOVWF  0F
0467:  BCF    03.6
0468:  CALL   10B
....................       delay_ms(1000); 
0469:  MOVLW  04
046A:  MOVWF  28
046B:  MOVLW  FA
046C:  MOVWF  36
046D:  CALL   026
046E:  DECFSZ 28,F
046F:  GOTO   46B
....................        
....................       z = lcd_getc(3, 1); 
0470:  MOVLW  03
0471:  MOVWF  28
0472:  MOVLW  01
0473:  MOVWF  29
0474:  GOTO   3CA
0475:  MOVF   78,W
0476:  MOVWF  25
....................        
....................       printf(lcd_putc, "\f%c", z); 
0477:  MOVLW  0C
0478:  MOVWF  35
0479:  CALL   0DF
047A:  MOVF   25,W
047B:  MOVWF  35
047C:  CALL   0DF
....................       delay_ms(2000); 
047D:  MOVLW  08
047E:  MOVWF  28
047F:  MOVLW  FA
0480:  MOVWF  36
0481:  CALL   026
0482:  DECFSZ 28,F
0483:  GOTO   47F
0484:  GOTO   409
....................        
....................    } 
.................... } 
....................  
0485:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
