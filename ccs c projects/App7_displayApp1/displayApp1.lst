CCS PCM C Compiler, Version 5.084d, 1               21-May-19 22:45
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   Y:\ccs c projects\App7_displayApp1\displayApp1.lst

               ROM used:   101 words (1%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   02F
0003:  NOP
....................  
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  3F
0009:  RETLW  06
000A:  RETLW  5B
000B:  RETLW  4F
000C:  RETLW  66
000D:  RETLW  6D
000E:  RETLW  7C
000F:  RETLW  07
0010:  RETLW  7F
0011:  RETLW  6F
0012:  RETLW  77
0013:  RETLW  7C
0014:  RETLW  39
0015:  RETLW  5E
0016:  RETLW  79
0017:  RETLW  71
....................  
.................... #list 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 4000000) 
0018:  MOVLW  22
0019:  MOVWF  04
001A:  BCF    03.7
001B:  MOVF   00,W
001C:  BTFSC  03.2
001D:  GOTO   02C
001E:  MOVLW  01
001F:  MOVWF  78
0020:  CLRF   77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 78,F
0024:  GOTO   020
0025:  MOVLW  4A
0026:  MOVWF  77
0027:  DECFSZ 77,F
0028:  GOTO   027
0029:  GOTO   02A
002A:  DECFSZ 00,F
002B:  GOTO   01E
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   05F (RETURN)
....................  
.................... #use fast_io(b) 
.................... #use fast_io(a) 
....................  
.................... const int digit[16] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07,  
....................                   0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71}; 
.................... const int digitAnod[16] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x83, 0xf8, 
....................                      0x80, 0x90, 0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e}; 
....................  
.................... signed int i; 
....................  
.................... void main() 
002F:  MOVF   03,W
0030:  ANDLW  1F
0031:  MOVWF  03
0032:  BSF    03.5
0033:  BSF    1F.0
0034:  BSF    1F.1
0035:  BSF    1F.2
0036:  BCF    1F.3
0037:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
0038:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
0039:  BCF    03.5
003A:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
003B:  MOVLW  00
003C:  MOVWF  78
003D:  MOVWF  12
003E:  MOVLW  00
003F:  BSF    03.5
0040:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
0041:  BSF    1F.0
0042:  BSF    1F.1
0043:  BSF    1F.2
0044:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0045:  BCF    03.5
0046:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
0047:  MOVLW  F0
0048:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
0049:  ANDWF  1D,F
....................     
....................    set_tris_a(0x00); 
004A:  MOVLW  00
004B:  BSF    03.5
004C:  MOVWF  05
....................    set_tris_b(0x00); 
004D:  MOVWF  06
....................     
....................    output_b(0x00); 
004E:  BCF    03.5
004F:  CLRF   06
....................    output_a(0x02); 
0050:  MOVLW  02
0051:  MOVWF  05
....................  
....................    while(true){ 
....................       for(i = 10; i >= 0; i--){ 
0052:  MOVLW  0A
0053:  MOVWF  20
0054:  BTFSC  20.7
0055:  GOTO   063
....................          output_b(digit[i]); 
0056:  MOVF   20,W
0057:  CALL   004
0058:  MOVWF  21
0059:  MOVWF  06
....................          delay_ms(2000); 
005A:  MOVLW  08
005B:  MOVWF  21
005C:  MOVLW  FA
005D:  MOVWF  22
005E:  GOTO   018
005F:  DECFSZ 21,F
0060:  GOTO   05C
0061:  DECF   20,F
0062:  GOTO   054
....................      } 
0063:  GOTO   052
....................     
....................    } 
....................     
.................... } 
0064:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
