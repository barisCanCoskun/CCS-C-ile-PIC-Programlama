CCS PCM C Compiler, Version 5.084d, 1               30-May-19 15:04
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   Y:\ccs c projects\App13_matris_led_display\matris_led_display.lst

               ROM used:   235 words (3%)
                           Largest free fragment is 2048
               RAM used:   40 (11%) at main() level
                           47 (13%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   061
0003:  NOP
....................  
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
*
001C:  BCF    0A.0
001D:  BCF    0A.1
001E:  BCF    0A.2
001F:  ADDWF  02,F
0020:  GOTO   00A
0021:  GOTO   00D
0022:  GOTO   010
0023:  GOTO   013
0024:  GOTO   016
....................  
.................... #list 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 4000000) 
*
0046:  MOVLW  49
0047:  MOVWF  04
0048:  BCF    03.7
0049:  MOVF   00,W
004A:  BTFSC  03.2
004B:  GOTO   05A
004C:  MOVLW  01
004D:  MOVWF  78
004E:  CLRF   77
004F:  DECFSZ 77,F
0050:  GOTO   04F
0051:  DECFSZ 78,F
0052:  GOTO   04E
0053:  MOVLW  4A
0054:  MOVWF  77
0055:  DECFSZ 77,F
0056:  GOTO   055
0057:  GOTO   058
0058:  DECFSZ 00,F
0059:  GOTO   04C
....................  
.................... #use fast_io(b) 
.................... #use fast_io(c) 
....................  
.................... int A[] = {0x1F, 0x28, 0x48, 0x28, 0x1F}; 
*
006A:  MOVLW  1F
006B:  BCF    03.5
006C:  MOVWF  20
006D:  MOVLW  28
006E:  MOVWF  21
006F:  MOVLW  48
0070:  MOVWF  22
0071:  MOVLW  28
0072:  MOVWF  23
0073:  MOVLW  1F
0074:  MOVWF  24
.................... int B[] = {0xFF, 0x49, 0x49, 0x49, 0x36}; 
0075:  MOVLW  FF
0076:  MOVWF  25
0077:  MOVLW  49
0078:  MOVWF  26
0079:  MOVWF  27
007A:  MOVWF  28
007B:  MOVLW  36
007C:  MOVWF  29
.................... int C[] = {0x3E, 0x41, 0x41, 0x41, 0x22}; 
007D:  MOVLW  3E
007E:  MOVWF  2A
007F:  MOVLW  41
0080:  MOVWF  2B
0081:  MOVWF  2C
0082:  MOVWF  2D
0083:  MOVLW  22
0084:  MOVWF  2E
.................... int D[] = {0xFF, 0x41, 0x41, 0x41, 0x3E}; 
0085:  MOVLW  FF
0086:  MOVWF  2F
0087:  MOVLW  41
0088:  MOVWF  30
0089:  MOVWF  31
008A:  MOVWF  32
008B:  MOVLW  3E
008C:  MOVWF  33
.................... int E[] = {0xFF, 0xC9, 0xC9, 0xC9, 0x41}; 
008D:  MOVLW  FF
008E:  MOVWF  34
008F:  MOVLW  C9
0090:  MOVWF  35
0091:  MOVWF  36
0092:  MOVWF  37
0093:  MOVLW  41
0094:  MOVWF  38
.................... int arti[] = {0x08, 0x08, 0x3E, 0x08, 0x08}; 
0095:  MOVLW  08
0096:  MOVWF  39
0097:  MOVWF  3A
0098:  MOVLW  3E
0099:  MOVWF  3B
009A:  MOVLW  08
009B:  MOVWF  3C
009C:  MOVWF  3D
.................... int cift_ok[] = {0x14, 0x22, 0xFF, 0x22, 0x14}; 
009D:  MOVLW  14
009E:  MOVWF  3E
009F:  MOVLW  22
00A0:  MOVWF  3F
00A1:  MOVLW  FF
00A2:  MOVWF  40
00A3:  MOVLW  22
00A4:  MOVWF  41
00A5:  MOVLW  14
00A6:  MOVWF  42
....................  
.................... int sutunSec(char s) 
.................... { 
....................    switch(s){ 
*
0004:  MOVF   49,W
0005:  ADDLW  FB
0006:  BTFSC  03.0
0007:  GOTO   019
0008:  ADDLW  05
0009:  GOTO   01C
....................       case 0: 
....................          return (0x01); 
000A:  MOVLW  01
000B:  MOVWF  78
000C:  GOTO   019
....................       case 1: 
....................          return (0x02); 
000D:  MOVLW  02
000E:  MOVWF  78
000F:  GOTO   019
....................       case 2: 
....................          return (0x04); 
0010:  MOVLW  04
0011:  MOVWF  78
0012:  GOTO   019
....................       case 3: 
....................          return (0x08); 
0013:  MOVLW  08
0014:  MOVWF  78
0015:  GOTO   019
....................       case 4: 
....................          return (0x10); 
0016:  MOVLW  10
0017:  MOVWF  78
0018:  GOTO   019
....................    } 
0019:  BCF    0A.3
001A:  BCF    0A.4
001B:  GOTO   039 (RETURN)
.................... } 
....................  
.................... void matris_karakter_gonder(char harf[], int tekrar) 
.................... { 
....................    int  i, j, k; 
....................     
....................    for(i = 1; i <= tekrar; i++) 
*
0025:  MOVLW  01
0026:  MOVWF  46
0027:  MOVF   46,W
0028:  SUBWF  45,W
0029:  BTFSS  03.0
002A:  GOTO   060
....................        
....................       for(k = 1; k <= 10; k++) 
002B:  MOVLW  01
002C:  MOVWF  48
002D:  MOVF   48,W
002E:  SUBLW  0A
002F:  BTFSS  03.0
0030:  GOTO   05E
....................           
....................          for(j = 0; j <= 4; j++){ 
0031:  CLRF   47
0032:  MOVF   47,W
0033:  SUBLW  04
0034:  BTFSS  03.0
0035:  GOTO   05C
....................             output_c(sutunSec(j)); 
0036:  MOVF   47,W
0037:  MOVWF  49
0038:  GOTO   004
0039:  MOVF   78,W
003A:  MOVWF  07
....................             output_b(harf[j]); 
003B:  MOVF   47,W
003C:  ADDWF  43,W
003D:  MOVWF  04
003E:  BCF    03.7
003F:  BTFSC  44.0
0040:  BSF    03.7
0041:  MOVF   00,W
0042:  MOVWF  49
0043:  MOVWF  06
....................              
....................             delay_ms(1); 
0044:  MOVLW  01
0045:  MOVWF  49
*
005A:  INCF   47,F
005B:  GOTO   032
005C:  INCF   48,F
005D:  GOTO   02D
005E:  INCF   46,F
005F:  GOTO   027
....................          } 
0060:  RETURN
.................... } 
....................  
.................... void main() 
0061:  MOVF   03,W
0062:  ANDLW  1F
0063:  MOVWF  03
0064:  BSF    03.5
0065:  BSF    1F.0
0066:  BSF    1F.1
0067:  BSF    1F.2
0068:  BCF    1F.3
0069:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
*
00A7:  BSF    03.5
00A8:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
00A9:  BCF    03.5
00AA:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
00AB:  MOVLW  00
00AC:  MOVWF  78
00AD:  MOVWF  12
00AE:  MOVLW  00
00AF:  BSF    03.5
00B0:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
00B1:  BSF    1F.0
00B2:  BSF    1F.1
00B3:  BSF    1F.2
00B4:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
00B5:  BCF    03.5
00B6:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
00B7:  MOVLW  F0
00B8:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
00B9:  ANDWF  1D,F
....................     
....................    set_tris_b(0x00); 
00BA:  MOVLW  00
00BB:  BSF    03.5
00BC:  MOVWF  06
....................    set_tris_c(0x00); 
00BD:  MOVWF  07
....................  
....................    while(true){ 
....................       matris_karakter_gonder(A, 20); 
00BE:  BCF    03.5
00BF:  CLRF   44
00C0:  MOVLW  20
00C1:  MOVWF  43
00C2:  MOVLW  14
00C3:  MOVWF  45
00C4:  CALL   025
....................       matris_karakter_gonder(B, 20); 
00C5:  CLRF   44
00C6:  MOVLW  25
00C7:  MOVWF  43
00C8:  MOVLW  14
00C9:  MOVWF  45
00CA:  CALL   025
....................       matris_karakter_gonder(C, 20); 
00CB:  CLRF   44
00CC:  MOVLW  2A
00CD:  MOVWF  43
00CE:  MOVLW  14
00CF:  MOVWF  45
00D0:  CALL   025
....................       matris_karakter_gonder(D, 20); 
00D1:  CLRF   44
00D2:  MOVLW  2F
00D3:  MOVWF  43
00D4:  MOVLW  14
00D5:  MOVWF  45
00D6:  CALL   025
....................       matris_karakter_gonder(E, 20); 
00D7:  CLRF   44
00D8:  MOVLW  34
00D9:  MOVWF  43
00DA:  MOVLW  14
00DB:  MOVWF  45
00DC:  CALL   025
....................       matris_karakter_gonder(arti, 20); 
00DD:  CLRF   44
00DE:  MOVLW  39
00DF:  MOVWF  43
00E0:  MOVLW  14
00E1:  MOVWF  45
00E2:  CALL   025
....................       matris_karakter_gonder(cift_ok, 20); 
00E3:  CLRF   44
00E4:  MOVLW  3E
00E5:  MOVWF  43
00E6:  MOVLW  14
00E7:  MOVWF  45
00E8:  CALL   025
00E9:  GOTO   0BF
....................    } 
....................     
.................... } 
....................  
00EA:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
