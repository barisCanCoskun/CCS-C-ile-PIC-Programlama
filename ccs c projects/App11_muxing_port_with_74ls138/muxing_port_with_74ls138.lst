CCS PCM C Compiler, Version 5.084d, 1               01-Jun-19 18:23
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   Y:\ccs c projects\App11_muxing_port_with_74ls138\muxing_port_with_74ls138.lst

               ROM used:   113 words (1%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           7 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
....................  
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
....................  
.................... #list 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 4000000) 
0004:  MOVLW  21
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
.................... #use fast_io(b) 
....................  
.................... char i = 0; 
....................  
.................... void main() 
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  CLRF   20
001D:  BSF    03.5
001E:  BSF    1F.0
001F:  BSF    1F.1
0020:  BSF    1F.2
0021:  BCF    1F.3
0022:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
0023:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
0024:  BCF    03.5
0025:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
0026:  MOVLW  00
0027:  MOVWF  78
0028:  MOVWF  12
0029:  MOVLW  00
002A:  BSF    03.5
002B:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
002C:  BSF    1F.0
002D:  BSF    1F.1
002E:  BSF    1F.2
002F:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0030:  BCF    03.5
0031:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
0032:  MOVLW  F0
0033:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
0034:  ANDWF  1D,F
....................     
....................    set_tris_b(0x00); 
0035:  MOVLW  00
0036:  BSF    03.5
0037:  MOVWF  06
....................     
....................    while(true){ 
....................       for(i = 0; i <= 7; i++){ 
0038:  BCF    03.5
0039:  CLRF   20
003A:  MOVF   20,W
003B:  SUBLW  07
003C:  BTFSS  03.0
003D:  GOTO   045
....................           output_b(i | 0b00000000); 
003E:  MOVF   20,W
003F:  MOVWF  06
....................           delay_ms(250); 
0040:  MOVLW  FA
0041:  MOVWF  21
0042:  CALL   004
0043:  INCF   20,F
0044:  GOTO   03A
....................       } 
....................       for(i = 0; i <= 7; i++){ 
0045:  CLRF   20
0046:  MOVF   20,W
0047:  SUBLW  07
0048:  BTFSS  03.0
0049:  GOTO   053
....................           output_b(i | 0b00010000); 
004A:  MOVF   20,W
004B:  IORLW  10
004C:  MOVWF  21
004D:  MOVWF  06
....................           delay_ms(250); 
004E:  MOVLW  FA
004F:  MOVWF  21
0050:  CALL   004
0051:  INCF   20,F
0052:  GOTO   046
....................       } 
....................       for(i = 0; i <= 7; i++){ 
0053:  CLRF   20
0054:  MOVF   20,W
0055:  SUBLW  07
0056:  BTFSS  03.0
0057:  GOTO   061
....................           output_b(i | 0b00100000); 
0058:  MOVF   20,W
0059:  IORLW  20
005A:  MOVWF  21
005B:  MOVWF  06
....................           delay_ms(250); 
005C:  MOVLW  FA
005D:  MOVWF  21
005E:  CALL   004
005F:  INCF   20,F
0060:  GOTO   054
....................       } 
....................       for(i = 0; i <= 7; i++){ 
0061:  CLRF   20
0062:  MOVF   20,W
0063:  SUBLW  07
0064:  BTFSS  03.0
0065:  GOTO   06F
....................           output_b(i | 0b00110000); 
0066:  MOVF   20,W
0067:  IORLW  30
0068:  MOVWF  21
0069:  MOVWF  06
....................           delay_ms(250); 
006A:  MOVLW  FA
006B:  MOVWF  21
006C:  CALL   004
006D:  INCF   20,F
006E:  GOTO   062
....................       } 
006F:  GOTO   039
....................    } 
....................     
.................... } 
....................  
0070:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
