CCS PCM C Compiler, Version 5.007, 61971               19-Jun-19 18:03

               Filename:   Y:\ccs c\ccs c projects\App32_GLCD\GLCD.lst

               ROM used:   2363 words (29%)
                           Largest free fragment is 2048
               RAM used:   28 (8%) at main() level
                           64 (17%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
....................  
.................... #include <16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDLW  0B
0008:  BTFSC  03.0
0009:  INCF   0A,F
000A:  MOVWF  02
000B:  RETLW  00
000C:  RETLW  00
000D:  RETLW  00
000E:  RETLW  00
000F:  RETLW  00
0010:  RETLW  00
0011:  RETLW  00
0012:  RETLW  5F
0013:  RETLW  00
0014:  RETLW  00
0015:  RETLW  00
0016:  RETLW  03
0017:  RETLW  00
0018:  RETLW  03
0019:  RETLW  00
001A:  RETLW  14
001B:  RETLW  3E
001C:  RETLW  14
001D:  RETLW  3E
001E:  RETLW  14
001F:  RETLW  24
0020:  RETLW  2A
0021:  RETLW  7F
0022:  RETLW  2A
0023:  RETLW  12
0024:  RETLW  43
0025:  RETLW  33
0026:  RETLW  08
0027:  RETLW  66
0028:  RETLW  61
0029:  RETLW  36
002A:  RETLW  49
002B:  RETLW  55
002C:  RETLW  22
002D:  RETLW  50
002E:  RETLW  00
002F:  RETLW  05
0030:  RETLW  03
0031:  RETLW  00
0032:  RETLW  00
0033:  RETLW  00
0034:  RETLW  1C
0035:  RETLW  22
0036:  RETLW  41
0037:  RETLW  00
0038:  RETLW  00
0039:  RETLW  41
003A:  RETLW  22
003B:  RETLW  1C
003C:  RETLW  00
003D:  RETLW  14
003E:  RETLW  08
003F:  RETLW  3E
0040:  RETLW  08
0041:  RETLW  14
0042:  RETLW  08
0043:  RETLW  08
0044:  RETLW  3E
0045:  RETLW  08
0046:  RETLW  08
0047:  RETLW  00
0048:  RETLW  50
0049:  RETLW  30
004A:  RETLW  00
004B:  RETLW  00
004C:  RETLW  08
004D:  RETLW  08
004E:  RETLW  08
004F:  RETLW  08
0050:  RETLW  08
0051:  RETLW  00
0052:  RETLW  60
0053:  RETLW  60
0054:  RETLW  00
0055:  RETLW  00
0056:  RETLW  20
0057:  RETLW  10
0058:  RETLW  08
0059:  RETLW  04
005A:  RETLW  02
005B:  RETLW  3E
005C:  RETLW  51
005D:  RETLW  49
005E:  RETLW  45
005F:  RETLW  3E
0060:  RETLW  00
0061:  RETLW  04
0062:  RETLW  02
0063:  RETLW  7F
0064:  RETLW  00
0065:  RETLW  42
0066:  RETLW  61
0067:  RETLW  51
0068:  RETLW  49
0069:  RETLW  46
006A:  RETLW  22
006B:  RETLW  41
006C:  RETLW  49
006D:  RETLW  49
006E:  RETLW  36
006F:  RETLW  18
0070:  RETLW  14
0071:  RETLW  12
0072:  RETLW  7F
0073:  RETLW  10
0074:  RETLW  27
0075:  RETLW  45
0076:  RETLW  45
0077:  RETLW  45
0078:  RETLW  39
0079:  RETLW  3E
007A:  RETLW  49
007B:  RETLW  49
007C:  RETLW  49
007D:  RETLW  32
007E:  RETLW  01
007F:  RETLW  01
0080:  RETLW  71
0081:  RETLW  09
0082:  RETLW  07
0083:  RETLW  36
0084:  RETLW  49
0085:  RETLW  49
0086:  RETLW  49
0087:  RETLW  36
0088:  RETLW  26
0089:  RETLW  49
008A:  RETLW  49
008B:  RETLW  49
008C:  RETLW  3E
008D:  RETLW  00
008E:  RETLW  36
008F:  RETLW  36
0090:  RETLW  00
0091:  RETLW  00
0092:  RETLW  00
0093:  RETLW  56
0094:  RETLW  36
0095:  RETLW  00
0096:  RETLW  00
0097:  RETLW  08
0098:  RETLW  14
0099:  RETLW  22
009A:  RETLW  41
009B:  RETLW  00
009C:  RETLW  14
009D:  RETLW  14
009E:  RETLW  14
009F:  RETLW  14
00A0:  RETLW  14
00A1:  RETLW  00
00A2:  RETLW  41
00A3:  RETLW  22
00A4:  RETLW  14
00A5:  RETLW  08
00A6:  RETLW  02
00A7:  RETLW  01
00A8:  RETLW  51
00A9:  RETLW  09
00AA:  RETLW  06
00AB:  RETLW  3E
00AC:  RETLW  41
00AD:  RETLW  59
00AE:  RETLW  55
00AF:  RETLW  5E
00B0:  RETLW  7E
00B1:  RETLW  09
00B2:  RETLW  09
00B3:  RETLW  09
00B4:  RETLW  7E
00B5:  RETLW  7F
00B6:  RETLW  49
00B7:  RETLW  49
00B8:  RETLW  49
00B9:  RETLW  36
00BA:  RETLW  3E
00BB:  RETLW  41
00BC:  RETLW  41
00BD:  RETLW  41
00BE:  RETLW  22
00BF:  RETLW  7F
00C0:  RETLW  41
00C1:  RETLW  41
00C2:  RETLW  41
00C3:  RETLW  3E
00C4:  RETLW  7F
00C5:  RETLW  49
00C6:  RETLW  49
00C7:  RETLW  49
00C8:  RETLW  41
00C9:  RETLW  7F
00CA:  RETLW  09
00CB:  RETLW  09
00CC:  RETLW  09
00CD:  RETLW  01
00CE:  RETLW  3E
00CF:  RETLW  41
00D0:  RETLW  41
00D1:  RETLW  49
00D2:  RETLW  3A
00D3:  RETLW  7F
00D4:  RETLW  08
00D5:  RETLW  08
00D6:  RETLW  08
00D7:  RETLW  7F
00D8:  RETLW  00
00D9:  RETLW  41
00DA:  RETLW  7F
00DB:  RETLW  41
00DC:  RETLW  00
00DD:  RETLW  30
00DE:  RETLW  40
00DF:  RETLW  40
00E0:  RETLW  40
00E1:  RETLW  3F
00E2:  RETLW  7F
00E3:  RETLW  08
00E4:  RETLW  14
00E5:  RETLW  22
00E6:  RETLW  41
00E7:  RETLW  7F
00E8:  RETLW  40
00E9:  RETLW  40
00EA:  RETLW  40
00EB:  RETLW  40
00EC:  RETLW  7F
00ED:  RETLW  02
00EE:  RETLW  0C
00EF:  RETLW  02
00F0:  RETLW  7F
00F1:  RETLW  7F
00F2:  RETLW  02
00F3:  RETLW  04
00F4:  RETLW  08
00F5:  RETLW  7F
00F6:  RETLW  3E
00F7:  RETLW  41
00F8:  RETLW  41
00F9:  RETLW  41
00FA:  RETLW  3E
00FB:  RETLW  7F
00FC:  RETLW  09
00FD:  RETLW  09
00FE:  RETLW  09
00FF:  RETLW  06
0100:  RETLW  1E
0101:  RETLW  21
0102:  RETLW  21
0103:  RETLW  21
0104:  RETLW  5E
0105:  RETLW  7F
0106:  RETLW  09
0107:  RETLW  09
0108:  RETLW  09
0109:  RETLW  76
010A:  BSF    0A.0
010B:  BCF    0A.1
010C:  BCF    0A.2
010D:  ADDWF  02,F
010E:  RETLW  26
010F:  RETLW  49
0110:  RETLW  49
0111:  RETLW  49
0112:  RETLW  32
0113:  RETLW  01
0114:  RETLW  01
0115:  RETLW  7F
0116:  RETLW  01
0117:  RETLW  01
0118:  RETLW  3F
0119:  RETLW  40
011A:  RETLW  40
011B:  RETLW  40
011C:  RETLW  3F
011D:  RETLW  1F
011E:  RETLW  20
011F:  RETLW  40
0120:  RETLW  20
0121:  RETLW  1F
0122:  RETLW  7F
0123:  RETLW  20
0124:  RETLW  10
0125:  RETLW  20
0126:  RETLW  7F
0127:  RETLW  41
0128:  RETLW  22
0129:  RETLW  1C
012A:  RETLW  22
012B:  RETLW  41
012C:  RETLW  07
012D:  RETLW  08
012E:  RETLW  70
012F:  RETLW  08
0130:  RETLW  07
0131:  RETLW  61
0132:  RETLW  51
0133:  RETLW  49
0134:  RETLW  45
0135:  RETLW  43
0136:  RETLW  00
0137:  RETLW  7F
0138:  RETLW  41
0139:  RETLW  00
013A:  RETLW  00
013B:  RETLW  02
013C:  RETLW  04
013D:  RETLW  08
013E:  RETLW  10
013F:  RETLW  20
0140:  RETLW  00
0141:  RETLW  00
0142:  RETLW  41
0143:  RETLW  7F
0144:  RETLW  00
0145:  RETLW  04
0146:  RETLW  02
0147:  RETLW  01
0148:  RETLW  02
0149:  RETLW  04
014A:  RETLW  40
014B:  RETLW  40
014C:  RETLW  40
014D:  RETLW  40
014E:  RETLW  40
014F:  RETLW  00
0150:  RETLW  01
0151:  RETLW  02
0152:  RETLW  04
0153:  RETLW  00
0154:  RETLW  20
0155:  RETLW  54
0156:  RETLW  54
0157:  RETLW  54
0158:  RETLW  78
0159:  RETLW  7F
015A:  RETLW  44
015B:  RETLW  44
015C:  RETLW  44
015D:  RETLW  38
015E:  RETLW  38
015F:  RETLW  44
0160:  RETLW  44
0161:  RETLW  44
0162:  RETLW  44
0163:  RETLW  38
0164:  RETLW  44
0165:  RETLW  44
0166:  RETLW  44
0167:  RETLW  7F
0168:  RETLW  38
0169:  RETLW  54
016A:  RETLW  54
016B:  RETLW  54
016C:  RETLW  18
016D:  RETLW  04
016E:  RETLW  04
016F:  RETLW  7E
0170:  RETLW  05
0171:  RETLW  05
0172:  RETLW  08
0173:  RETLW  54
0174:  RETLW  54
0175:  RETLW  54
0176:  RETLW  3C
0177:  RETLW  7F
0178:  RETLW  08
0179:  RETLW  04
017A:  RETLW  04
017B:  RETLW  78
017C:  RETLW  00
017D:  RETLW  44
017E:  RETLW  7D
017F:  RETLW  40
0180:  RETLW  00
0181:  RETLW  20
0182:  RETLW  40
0183:  RETLW  44
0184:  RETLW  3D
0185:  RETLW  00
0186:  RETLW  7F
0187:  RETLW  10
0188:  RETLW  28
0189:  RETLW  44
018A:  RETLW  00
018B:  RETLW  00
018C:  RETLW  41
018D:  RETLW  7F
018E:  RETLW  40
018F:  RETLW  00
0190:  RETLW  7C
0191:  RETLW  04
0192:  RETLW  78
0193:  RETLW  04
0194:  RETLW  78
0195:  RETLW  7C
0196:  RETLW  08
0197:  RETLW  04
0198:  RETLW  04
0199:  RETLW  78
019A:  RETLW  38
019B:  RETLW  44
019C:  RETLW  44
019D:  RETLW  44
019E:  RETLW  38
019F:  RETLW  7C
01A0:  RETLW  14
01A1:  RETLW  14
01A2:  RETLW  14
01A3:  RETLW  08
01A4:  RETLW  08
01A5:  RETLW  14
01A6:  RETLW  14
01A7:  RETLW  14
01A8:  RETLW  7C
01A9:  RETLW  00
01AA:  RETLW  7C
01AB:  RETLW  08
01AC:  RETLW  04
01AD:  RETLW  04
01AE:  RETLW  48
01AF:  RETLW  54
01B0:  RETLW  54
01B1:  RETLW  54
01B2:  RETLW  20
01B3:  RETLW  04
01B4:  RETLW  04
01B5:  RETLW  3F
01B6:  RETLW  44
01B7:  RETLW  44
01B8:  RETLW  3C
01B9:  RETLW  40
01BA:  RETLW  40
01BB:  RETLW  20
01BC:  RETLW  7C
01BD:  RETLW  1C
01BE:  RETLW  20
01BF:  RETLW  40
01C0:  RETLW  20
01C1:  RETLW  1C
01C2:  RETLW  3C
01C3:  RETLW  40
01C4:  RETLW  30
01C5:  RETLW  40
01C6:  RETLW  3C
01C7:  RETLW  44
01C8:  RETLW  28
01C9:  RETLW  10
01CA:  RETLW  28
01CB:  RETLW  44
01CC:  RETLW  0C
01CD:  RETLW  50
01CE:  RETLW  50
01CF:  RETLW  50
01D0:  RETLW  3C
01D1:  RETLW  44
01D2:  RETLW  64
01D3:  RETLW  54
01D4:  RETLW  4C
01D5:  RETLW  44
01D6:  RETLW  00
01D7:  RETLW  08
01D8:  RETLW  36
01D9:  RETLW  41
01DA:  RETLW  41
01DB:  RETLW  00
01DC:  RETLW  00
01DD:  RETLW  7F
01DE:  RETLW  00
01DF:  RETLW  00
01E0:  RETLW  41
01E1:  RETLW  41
01E2:  RETLW  36
01E3:  RETLW  08
01E4:  RETLW  00
01E5:  RETLW  02
01E6:  RETLW  01
01E7:  RETLW  02
01E8:  RETLW  04
01E9:  RETLW  02
*
021B:  CLRF   77
021C:  CLRF   78
021D:  MOVF   47,W
021E:  BCF    03.0
021F:  BTFSC  48.0
0220:  ADDWF  77,F
0221:  RRF    77,F
0222:  RRF    78,F
0223:  BTFSC  48.1
0224:  ADDWF  77,F
0225:  RRF    77,F
0226:  RRF    78,F
0227:  BTFSC  48.2
0228:  ADDWF  77,F
0229:  RRF    77,F
022A:  RRF    78,F
022B:  BTFSC  48.3
022C:  ADDWF  77,F
022D:  RRF    77,F
022E:  RRF    78,F
022F:  BTFSC  48.4
0230:  ADDWF  77,F
0231:  RRF    77,F
0232:  RRF    78,F
0233:  BTFSC  48.5
0234:  ADDWF  77,F
0235:  RRF    77,F
0236:  RRF    78,F
0237:  BTFSC  48.6
0238:  ADDWF  77,F
0239:  RRF    77,F
023A:  RRF    78,F
023B:  BTFSC  48.7
023C:  ADDWF  77,F
023D:  RRF    77,F
023E:  RRF    78,F
023F:  RETURN
*
0514:  MOVF   54,W
0515:  XORWF  56,W
0516:  ANDLW  80
0517:  MOVWF  58
0518:  BTFSS  54.7
0519:  GOTO   51F
051A:  COMF   53,F
051B:  COMF   54,F
051C:  INCF   53,F
051D:  BTFSC  03.2
051E:  INCF   54,F
051F:  BTFSS  56.7
0520:  GOTO   526
0521:  COMF   55,F
0522:  COMF   56,F
0523:  INCF   55,F
0524:  BTFSC  03.2
0525:  INCF   56,F
0526:  MOVLW  10
0527:  MOVWF  57
0528:  CLRF   77
0529:  CLRF   7A
052A:  RRF    54,F
052B:  RRF    53,F
052C:  BTFSS  03.0
052D:  GOTO   534
052E:  MOVF   55,W
052F:  ADDWF  77,F
0530:  BTFSC  03.0
0531:  INCF   7A,F
0532:  MOVF   56,W
0533:  ADDWF  7A,F
0534:  RRF    7A,F
0535:  RRF    77,F
0536:  RRF    79,F
0537:  RRF    78,F
0538:  DECFSZ 57,F
0539:  GOTO   52A
053A:  BTFSS  58.7
053B:  GOTO   541
053C:  COMF   78,F
053D:  COMF   79,F
053E:  INCF   78,F
053F:  BTFSC  03.2
0540:  INCF   79,F
0541:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG, NOCPD 
....................  
.................... #use delay (clock = 20000000) 
*
044A:  MOVLW  37
044B:  MOVWF  04
044C:  BCF    03.7
044D:  MOVF   00,W
044E:  BTFSC  03.2
044F:  GOTO   45D
0450:  MOVLW  06
0451:  MOVWF  78
0452:  CLRF   77
0453:  DECFSZ 77,F
0454:  GOTO   453
0455:  DECFSZ 78,F
0456:  GOTO   452
0457:  MOVLW  7B
0458:  MOVWF  77
0459:  DECFSZ 77,F
045A:  GOTO   459
045B:  DECFSZ 00,F
045C:  GOTO   450
045D:  RETURN
....................  
.................... //#define use_portb_lcd TRUE 
....................  
.................... #include <HDM64GS12.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B0   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B1   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B2   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B4   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B5   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C0   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    unsigned int8 left[512]; 
....................    unsigned int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
0240:  BCF    20.0
0241:  MOVF   20,W
0242:  BSF    03.5
0243:  MOVWF  07
0244:  BCF    03.5
0245:  BSF    07.0
....................    output_low(GLCD_E); 
0246:  BSF    03.5
0247:  BCF    06.5
0248:  BCF    03.5
0249:  BCF    06.5
....................    output_low(GLCD_CS1); 
024A:  BSF    03.5
024B:  BCF    06.0
024C:  BCF    03.5
024D:  BCF    06.0
....................    output_low(GLCD_CS2); 
024E:  BSF    03.5
024F:  BCF    06.1
0250:  BCF    03.5
0251:  BCF    06.1
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
0252:  BSF    03.5
0253:  BCF    06.2
0254:  BCF    03.5
0255:  BCF    06.2
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
0256:  CLRF   59
0257:  MOVLW  C0
0258:  MOVWF  5A
0259:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
025A:  MOVLW  01
025B:  MOVWF  59
025C:  MOVLW  C0
025D:  MOVWF  5A
025E:  CALL   1EA
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
025F:  CLRF   59
0260:  MOVLW  40
0261:  MOVWF  5A
0262:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
0263:  MOVLW  01
0264:  MOVWF  59
0265:  MOVLW  40
0266:  MOVWF  5A
0267:  CALL   1EA
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
0268:  CLRF   59
0269:  MOVLW  B8
026A:  MOVWF  5A
026B:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
026C:  MOVLW  01
026D:  MOVWF  59
026E:  MOVLW  B8
026F:  MOVWF  5A
0270:  CALL   1EA
....................  
....................    if(mode == ON) 
0271:  DECFSZ 36,W
0272:  GOTO   27D
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
0273:  CLRF   59
0274:  MOVLW  3F
0275:  MOVWF  5A
0276:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
0277:  MOVLW  01
0278:  MOVWF  59
0279:  MOVLW  3F
027A:  MOVWF  5A
027B:  CALL   1EA
....................    } 
027C:  GOTO   286
....................    else 
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
027D:  CLRF   59
027E:  MOVLW  3E
027F:  MOVWF  5A
0280:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
0281:  MOVLW  01
0282:  MOVWF  59
0283:  MOVLW  3E
0284:  MOVWF  5A
0285:  CALL   1EA
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
0286:  CLRF   37
....................  
....................    #ifdef FAST_GLCD 
*
02CC:  RETURN
....................    glcd_update(); 
....................    #endif 
.................... } 
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    unsigned int8 i, j; 
....................    unsigned int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
*
02FE:  BCF    56.0
.................... { 
....................    unsigned int8* p; 
....................    unsigned int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
02FF:  MOVF   52,W
0300:  SUBLW  3F
0301:  BTFSC  03.0
0302:  GOTO   306
....................    { 
....................       x -= 64; 
0303:  MOVLW  40
0304:  SUBWF  52,F
....................       side = GLCD_RIGHT; 
0305:  BSF    56.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
0306:  BSF    03.5
0307:  BCF    06.2
0308:  BCF    03.5
0309:  BCF    06.2
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
030A:  BCF    52.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
030B:  BSF    52.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
030C:  MOVLW  00
030D:  BTFSC  56.0
030E:  MOVLW  01
030F:  MOVWF  57
0310:  MOVWF  59
0311:  MOVF   52,W
0312:  MOVWF  5A
0313:  CALL   1EA
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
0314:  MOVLW  00
0315:  BTFSC  56.0
0316:  MOVLW  01
0317:  MOVWF  57
0318:  RRF    53,W
0319:  MOVWF  77
031A:  RRF    77,F
031B:  RRF    77,F
031C:  MOVLW  1F
031D:  ANDWF  77,F
031E:  MOVF   77,W
031F:  ANDLW  BF
0320:  IORLW  B8
0321:  MOVWF  58
0322:  MOVF   57,W
0323:  MOVWF  59
0324:  MOVF   58,W
0325:  MOVWF  5A
0326:  CALL   1EA
....................    output_high(GLCD_DI);                        // Set for data 
0327:  BSF    03.5
0328:  BCF    06.2
0329:  BCF    03.5
032A:  BSF    06.2
....................    glcd_readByte(side);                         // Need two reads to get data 
032B:  MOVLW  00
032C:  BTFSC  56.0
032D:  MOVLW  01
032E:  MOVWF  57
032F:  MOVWF  58
0330:  CALL   2CD
....................    data = glcd_readByte(side);                  //  at new address 
0331:  MOVLW  00
0332:  BTFSC  56.0
0333:  MOVLW  01
0334:  MOVWF  57
0335:  MOVWF  58
0336:  CALL   2CD
0337:  MOVF   78,W
0338:  MOVWF  55
....................  
....................    if(color == ON) 
0339:  DECFSZ 54,W
033A:  GOTO   34B
....................       bit_set(data, y%8);        // Turn the pixel on 
033B:  MOVF   53,W
033C:  ANDLW  07
033D:  MOVWF  57
033E:  MOVLW  01
033F:  MOVWF  77
0340:  MOVF   57,W
0341:  MOVWF  78
0342:  BTFSC  03.2
0343:  GOTO   348
0344:  BCF    03.0
0345:  RLF    77,F
0346:  DECFSZ 78,F
0347:  GOTO   344
0348:  MOVF   77,W
0349:  IORWF  55,F
034A:  GOTO   35B
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
034B:  MOVF   53,W
034C:  ANDLW  07
034D:  MOVWF  57
034E:  MOVLW  01
034F:  MOVWF  77
0350:  MOVF   57,W
0351:  MOVWF  78
0352:  BTFSC  03.2
0353:  GOTO   358
0354:  BCF    03.0
0355:  RLF    77,F
0356:  DECFSZ 78,F
0357:  GOTO   354
0358:  MOVF   77,W
0359:  XORLW  FF
035A:  ANDWF  55,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
035B:  BSF    03.5
035C:  BCF    06.2
035D:  BCF    03.5
035E:  BCF    06.2
....................    glcd_writeByte(side, x);      // Set the horizontal address 
035F:  MOVLW  00
0360:  BTFSC  56.0
0361:  MOVLW  01
0362:  MOVWF  57
0363:  MOVWF  59
0364:  MOVF   52,W
0365:  MOVWF  5A
0366:  CALL   1EA
....................    output_high(GLCD_DI);         // Set for data 
0367:  BSF    03.5
0368:  BCF    06.2
0369:  BCF    03.5
036A:  BSF    06.2
....................    glcd_writeByte(side, data);   // Write the pixel data 
036B:  MOVLW  00
036C:  BTFSC  56.0
036D:  MOVLW  01
036E:  MOVWF  57
036F:  MOVWF  59
0370:  MOVF   55,W
0371:  MOVWF  5A
0372:  CALL   1EA
0373:  RETURN
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    unsigned int8  data; 
....................    unsigned int8  *p1, *p2; 
....................    unsigned int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................    	*p1++ = data; 
....................    	*p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    unsigned int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
0287:  CLRF   38
0288:  MOVF   38,W
0289:  SUBLW  07
028A:  BTFSS  03.0
028B:  GOTO   2CC
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
028C:  BSF    03.5
028D:  BCF    06.2
028E:  BCF    03.5
028F:  BCF    06.2
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
0290:  CLRF   59
0291:  MOVLW  40
0292:  MOVWF  5A
0293:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
0294:  MOVLW  01
0295:  MOVWF  59
0296:  MOVLW  40
0297:  MOVWF  5A
0298:  CALL   1EA
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
0299:  MOVF   38,W
029A:  IORLW  B8
029B:  MOVWF  3A
029C:  CLRF   59
029D:  MOVF   3A,W
029E:  MOVWF  5A
029F:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
02A0:  MOVF   38,W
02A1:  IORLW  B8
02A2:  MOVWF  3A
02A3:  MOVLW  01
02A4:  MOVWF  59
02A5:  MOVF   3A,W
02A6:  MOVWF  5A
02A7:  CALL   1EA
....................       output_high(GLCD_DI);                     // Set for data 
02A8:  BSF    03.5
02A9:  BCF    06.2
02AA:  BCF    03.5
02AB:  BSF    06.2
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
02AC:  CLRF   39
02AD:  MOVF   39,W
02AE:  SUBLW  3F
02AF:  BTFSS  03.0
02B0:  GOTO   2CA
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
02B1:  MOVLW  FF
02B2:  MOVWF  47
02B3:  MOVF   37,W
02B4:  MOVWF  48
02B5:  CALL   21B
02B6:  MOVF   78,W
02B7:  MOVWF  3A
02B8:  CLRF   59
02B9:  MOVF   78,W
02BA:  MOVWF  5A
02BB:  CALL   1EA
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
02BC:  MOVLW  FF
02BD:  MOVWF  47
02BE:  MOVF   37,W
02BF:  MOVWF  48
02C0:  CALL   21B
02C1:  MOVF   78,W
02C2:  MOVWF  3A
02C3:  MOVLW  01
02C4:  MOVWF  59
02C5:  MOVF   78,W
02C6:  MOVWF  5A
02C7:  CALL   1EA
02C8:  INCF   39,F
02C9:  GOTO   2AD
....................       } 
02CA:  INCF   38,F
02CB:  GOTO   288
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    set_tris_d(0x00); 
*
01EA:  MOVLW  00
01EB:  BSF    03.5
01EC:  MOVWF  08
....................     
....................    output_low(GLCD_RW);       // Set for writing 
01ED:  BCF    06.4
01EE:  BCF    03.5
01EF:  BCF    06.4
....................  
.................... 	 if(side)                   // Choose which side to write to 
01F0:  MOVF   59,F
01F1:  BTFSC  03.2
01F2:  GOTO   1F8
....................       output_high(GLCD_CS2); 
01F3:  BSF    03.5
01F4:  BCF    06.1
01F5:  BCF    03.5
01F6:  BSF    06.1
01F7:  GOTO   1FC
....................    else 
....................       output_high(GLCD_CS1); 
01F8:  BSF    03.5
01F9:  BCF    06.0
01FA:  BCF    03.5
01FB:  BSF    06.0
....................  
.................... 	 delay_us(1); 
01FC:  GOTO   1FD
01FD:  GOTO   1FE
01FE:  NOP
....................  
....................    output_d(data);            // Put the data on the port 
01FF:  BSF    03.5
0200:  CLRF   08
0201:  BCF    03.5
0202:  MOVF   5A,W
0203:  MOVWF  08
....................    delay_us(1); 
0204:  GOTO   205
0205:  GOTO   206
0206:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
0207:  BSF    03.5
0208:  BCF    06.5
0209:  BCF    03.5
020A:  BSF    06.5
....................    delay_us(1); 
020B:  GOTO   20C
020C:  GOTO   20D
020D:  NOP
....................    output_low(GLCD_E); 
020E:  BSF    03.5
020F:  BCF    06.5
0210:  BCF    03.5
0211:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
0212:  BSF    03.5
0213:  BCF    06.0
0214:  BCF    03.5
0215:  BCF    06.0
....................    output_low(GLCD_CS2); 
0216:  BSF    03.5
0217:  BCF    06.1
0218:  BCF    03.5
0219:  BCF    06.1
021A:  RETURN
.................... } 
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
*
02CD:  MOVLW  FF
02CE:  BSF    03.5
02CF:  MOVWF  08
....................    output_high(GLCD_RW);      // Set for reading 
02D0:  BCF    06.4
02D1:  BCF    03.5
02D2:  BSF    06.4
....................  
....................    if(side)                   // Choose which side to write to 
02D3:  MOVF   58,F
02D4:  BTFSC  03.2
02D5:  GOTO   2DB
....................       output_high(GLCD_CS2); 
02D6:  BSF    03.5
02D7:  BCF    06.1
02D8:  BCF    03.5
02D9:  BSF    06.1
02DA:  GOTO   2DF
....................    else 
....................       output_high(GLCD_CS1); 
02DB:  BSF    03.5
02DC:  BCF    06.0
02DD:  BCF    03.5
02DE:  BSF    06.0
....................  
....................    delay_us(1); 
02DF:  GOTO   2E0
02E0:  GOTO   2E1
02E1:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
02E2:  BSF    03.5
02E3:  BCF    06.5
02E4:  BCF    03.5
02E5:  BSF    06.5
....................    delay_us(1); 
02E6:  GOTO   2E7
02E7:  GOTO   2E8
02E8:  NOP
....................    data = input_d();          // Get the data from the display's output register 
02E9:  MOVLW  FF
02EA:  BSF    03.5
02EB:  MOVWF  08
02EC:  BCF    03.5
02ED:  MOVF   08,W
02EE:  MOVWF  59
....................    output_low(GLCD_E); 
02EF:  BSF    03.5
02F0:  BCF    06.5
02F1:  BCF    03.5
02F2:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
02F3:  BSF    03.5
02F4:  BCF    06.0
02F5:  BCF    03.5
02F6:  BCF    06.0
....................    output_low(GLCD_CS2); 
02F7:  BSF    03.5
02F8:  BCF    06.1
02F9:  BCF    03.5
02FA:  BCF    06.1
....................    return data;               // Return the read data 
02FB:  MOVF   59,W
02FC:  MOVWF  78
02FD:  RETURN
.................... } 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
045E:  MOVLW  01
045F:  MOVWF  4B
0460:  MOVWF  4C
0461:  CLRF   51
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0462:  MOVF   42,W
0463:  SUBWF  44,W
0464:  MOVWF  52
0465:  MOVF   52,W
0466:  BTFSS  52.7
0467:  GOTO   46A
0468:  MOVF   52,W
0469:  SUBLW  00
046A:  CLRF   7A
046B:  MOVWF  49
046C:  MOVF   7A,W
046D:  MOVWF  4A
....................    dy = abs((signed int8)(y2 - y1)); 
046E:  MOVF   43,W
046F:  SUBWF  45,W
0470:  MOVWF  52
0471:  MOVF   52,W
0472:  BTFSS  52.7
0473:  GOTO   476
0474:  MOVF   52,W
0475:  SUBLW  00
0476:  CLRF   7A
0477:  MOVWF  47
0478:  MOVF   7A,W
0479:  MOVWF  48
....................    #endif 
....................  
....................    if(x1 > x2) 
047A:  MOVF   42,W
047B:  SUBWF  44,W
047C:  BTFSC  03.0
047D:  GOTO   480
....................       addx = -1; 
047E:  MOVLW  FF
047F:  MOVWF  4B
....................    if(y1 > y2) 
0480:  MOVF   43,W
0481:  SUBWF  45,W
0482:  BTFSC  03.0
0483:  GOTO   486
....................       addy = -1; 
0484:  MOVLW  FF
0485:  MOVWF  4C
....................  
....................    if(dx >= dy) 
0486:  MOVF   48,W
0487:  SUBWF  4A,W
0488:  BTFSS  03.0
0489:  GOTO   4D2
048A:  BTFSS  03.2
048B:  GOTO   490
048C:  MOVF   47,W
048D:  SUBWF  49,W
048E:  BTFSS  03.0
048F:  GOTO   4D2
....................    { 
....................       dy *= 2; 
0490:  BCF    03.0
0491:  RLF    47,F
0492:  RLF    48,F
....................       P = dy - dx; 
0493:  MOVF   49,W
0494:  SUBWF  47,W
0495:  MOVWF  77
0496:  MOVF   48,W
0497:  MOVWF  7A
0498:  MOVF   4A,W
0499:  BTFSS  03.0
049A:  INCFSZ 4A,W
049B:  SUBWF  7A,F
049C:  MOVF   77,W
049D:  MOVWF  4D
049E:  MOVF   7A,W
049F:  MOVWF  4E
....................       diff = P - dx; 
04A0:  MOVF   49,W
04A1:  SUBWF  4D,W
04A2:  MOVWF  4F
04A3:  MOVF   4E,W
04A4:  MOVWF  50
04A5:  MOVF   4A,W
04A6:  BTFSS  03.0
04A7:  INCFSZ 4A,W
04A8:  SUBWF  50,F
....................  
....................       for(; i<=dx; ++i) 
04A9:  MOVF   4A,F
04AA:  BTFSS  03.2
04AB:  GOTO   4B0
04AC:  MOVF   51,W
04AD:  SUBWF  49,W
04AE:  BTFSS  03.0
04AF:  GOTO   4D1
....................       { 
....................          glcd_pixel(x1, y1, color); 
04B0:  MOVF   42,W
04B1:  MOVWF  52
04B2:  MOVF   43,W
04B3:  MOVWF  53
04B4:  MOVF   46,W
04B5:  MOVWF  54
04B6:  CALL   2FE
....................  
....................          if(P < 0) 
04B7:  BTFSS  4E.7
04B8:  GOTO   4C3
....................          { 
....................             P  += dy; 
04B9:  MOVF   47,W
04BA:  ADDWF  4D,F
04BB:  MOVF   48,W
04BC:  BTFSC  03.0
04BD:  INCFSZ 48,W
04BE:  ADDWF  4E,F
....................             x1 += addx; 
04BF:  MOVF   4B,W
04C0:  ADDWF  42,W
04C1:  MOVWF  42
....................          } 
04C2:  GOTO   4CF
....................          else 
....................          { 
....................             P  += diff; 
04C3:  MOVF   4F,W
04C4:  ADDWF  4D,F
04C5:  MOVF   50,W
04C6:  BTFSC  03.0
04C7:  INCFSZ 50,W
04C8:  ADDWF  4E,F
....................             x1 += addx; 
04C9:  MOVF   4B,W
04CA:  ADDWF  42,W
04CB:  MOVWF  42
....................             y1 += addy; 
04CC:  MOVF   4C,W
04CD:  ADDWF  43,W
04CE:  MOVWF  43
....................          } 
04CF:  INCF   51,F
04D0:  GOTO   4A9
....................       } 
....................    } 
04D1:  GOTO   513
....................    else 
....................    { 
....................       dx *= 2; 
04D2:  BCF    03.0
04D3:  RLF    49,F
04D4:  RLF    4A,F
....................       P = dx - dy; 
04D5:  MOVF   47,W
04D6:  SUBWF  49,W
04D7:  MOVWF  77
04D8:  MOVF   4A,W
04D9:  MOVWF  7A
04DA:  MOVF   48,W
04DB:  BTFSS  03.0
04DC:  INCFSZ 48,W
04DD:  SUBWF  7A,F
04DE:  MOVF   77,W
04DF:  MOVWF  4D
04E0:  MOVF   7A,W
04E1:  MOVWF  4E
....................       diff = P - dy; 
04E2:  MOVF   47,W
04E3:  SUBWF  4D,W
04E4:  MOVWF  4F
04E5:  MOVF   4E,W
04E6:  MOVWF  50
04E7:  MOVF   48,W
04E8:  BTFSS  03.0
04E9:  INCFSZ 48,W
04EA:  SUBWF  50,F
....................  
....................       for(; i<=dy; ++i) 
04EB:  MOVF   48,F
04EC:  BTFSS  03.2
04ED:  GOTO   4F2
04EE:  MOVF   51,W
04EF:  SUBWF  47,W
04F0:  BTFSS  03.0
04F1:  GOTO   513
....................       { 
....................          glcd_pixel(x1, y1, color); 
04F2:  MOVF   42,W
04F3:  MOVWF  52
04F4:  MOVF   43,W
04F5:  MOVWF  53
04F6:  MOVF   46,W
04F7:  MOVWF  54
04F8:  CALL   2FE
....................  
....................          if(P < 0) 
04F9:  BTFSS  4E.7
04FA:  GOTO   505
....................          { 
....................             P  += dx; 
04FB:  MOVF   49,W
04FC:  ADDWF  4D,F
04FD:  MOVF   4A,W
04FE:  BTFSC  03.0
04FF:  INCFSZ 4A,W
0500:  ADDWF  4E,F
....................             y1 += addy; 
0501:  MOVF   4C,W
0502:  ADDWF  43,W
0503:  MOVWF  43
....................          } 
0504:  GOTO   511
....................          else 
....................          { 
....................             P  += diff; 
0505:  MOVF   4F,W
0506:  ADDWF  4D,F
0507:  MOVF   50,W
0508:  BTFSC  03.0
0509:  INCFSZ 50,W
050A:  ADDWF  4E,F
....................             x1 += addx; 
050B:  MOVF   4B,W
050C:  ADDWF  42,W
050D:  MOVWF  42
....................             y1 += addy; 
050E:  MOVF   4C,W
050F:  ADDWF  43,W
0510:  MOVWF  43
....................          } 
0511:  INCF   51,F
0512:  GOTO   4EB
....................       } 
....................    } 
0513:  RETURN
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
*
079B:  MOVF   3A,F
079C:  BTFSC  03.2
079D:  GOTO   7CE
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
079E:  MOVF   38,W
079F:  SUBWF  36,W
07A0:  BTFSC  03.0
07A1:  GOTO   7A7
....................       { 
....................          xmin = x1; 
07A2:  MOVF   36,W
07A3:  MOVWF  3D
....................          xmax = x2; 
07A4:  MOVF   38,W
07A5:  MOVWF  3E
....................       } 
07A6:  GOTO   7AB
....................       else 
....................       { 
....................          xmin = x2; 
07A7:  MOVF   38,W
07A8:  MOVWF  3D
....................          xmax = x1; 
07A9:  MOVF   36,W
07AA:  MOVWF  3E
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
07AB:  MOVF   39,W
07AC:  SUBWF  37,W
07AD:  BTFSC  03.0
07AE:  GOTO   7B4
....................       { 
....................          ymin = y1; 
07AF:  MOVF   37,W
07B0:  MOVWF  3F
....................          ymax = y2; 
07B1:  MOVF   39,W
07B2:  MOVWF  40
....................       } 
07B3:  GOTO   7B8
....................       else 
....................       { 
....................          ymin = y2; 
07B4:  MOVF   39,W
07B5:  MOVWF  3F
....................          ymax = y1; 
07B6:  MOVF   37,W
07B7:  MOVWF  40
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
07B8:  MOVF   3D,W
07B9:  SUBWF  3E,W
07BA:  BTFSS  03.0
07BB:  GOTO   7CD
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
07BC:  MOVF   3F,W
07BD:  MOVWF  3C
07BE:  MOVF   3C,W
07BF:  SUBWF  40,W
07C0:  BTFSS  03.0
07C1:  GOTO   7CB
....................          { 
....................             glcd_pixel(xmin, i, color); 
07C2:  MOVF   3D,W
07C3:  MOVWF  52
07C4:  MOVF   3C,W
07C5:  MOVWF  53
07C6:  MOVF   3B,W
07C7:  MOVWF  54
07C8:  CALL   2FE
07C9:  INCF   3C,F
07CA:  GOTO   7BE
....................          } 
07CB:  INCF   3D,F
07CC:  GOTO   7B8
....................       } 
....................    } 
07CD:  GOTO   7FA
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
07CE:  MOVF   36,W
07CF:  MOVWF  42
07D0:  MOVF   37,W
07D1:  MOVWF  43
07D2:  MOVF   38,W
07D3:  MOVWF  44
07D4:  MOVF   37,W
07D5:  MOVWF  45
07D6:  MOVF   3B,W
07D7:  MOVWF  46
07D8:  CALL   45E
....................       glcd_line(x1, y2, x2, y2, color); 
07D9:  MOVF   36,W
07DA:  MOVWF  42
07DB:  MOVF   39,W
07DC:  MOVWF  43
07DD:  MOVF   38,W
07DE:  MOVWF  44
07DF:  MOVF   39,W
07E0:  MOVWF  45
07E1:  MOVF   3B,W
07E2:  MOVWF  46
07E3:  CALL   45E
....................       glcd_line(x1, y1, x1, y2, color); 
07E4:  MOVF   36,W
07E5:  MOVWF  42
07E6:  MOVF   37,W
07E7:  MOVWF  43
07E8:  MOVF   36,W
07E9:  MOVWF  44
07EA:  MOVF   39,W
07EB:  MOVWF  45
07EC:  MOVF   3B,W
07ED:  MOVWF  46
07EE:  CALL   45E
....................       glcd_line(x2, y1, x2, y2, color); 
07EF:  MOVF   38,W
07F0:  MOVWF  42
07F1:  MOVF   37,W
07F2:  MOVWF  43
07F3:  MOVF   38,W
07F4:  MOVWF  44
07F5:  MOVF   39,W
07F6:  MOVWF  45
07F7:  MOVF   3B,W
07F8:  MOVWF  46
07F9:  CALL   45E
....................    } 
07FA:  BSF    0A.3
07FB:  BCF    0A.4
07FC:  GOTO   129 (RETURN)
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
*
0542:  MOVLW  01
0543:  MOVWF  41
0544:  MOVWF  42
0545:  CLRF   4C
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0546:  MOVF   36,W
0547:  SUBWF  38,W
0548:  MOVWF  51
0549:  MOVF   51,W
054A:  BTFSS  51.7
054B:  GOTO   54E
054C:  MOVF   51,W
054D:  SUBLW  00
054E:  CLRF   7A
054F:  MOVWF  77
0550:  BTFSC  77.7
0551:  DECF   7A,F
0552:  MOVWF  3F
0553:  MOVF   7A,W
0554:  MOVWF  40
....................    dy = abs((signed int8)(y2 - y1)); 
0555:  MOVF   37,W
0556:  SUBWF  39,W
0557:  MOVWF  51
0558:  MOVF   51,W
0559:  BTFSS  51.7
055A:  GOTO   55D
055B:  MOVF   51,W
055C:  SUBLW  00
055D:  CLRF   7A
055E:  MOVWF  77
055F:  BTFSC  77.7
0560:  DECF   7A,F
0561:  MOVWF  3D
0562:  MOVF   7A,W
0563:  MOVWF  3E
....................    #endif 
....................  
....................    half_width = width/2; 
0564:  BCF    03.0
0565:  RRF    3A,W
0566:  MOVWF  3C
....................    c1 = -(dx*x1 + dy*y1); 
0567:  MOVF   40,W
0568:  MOVWF  54
0569:  MOVF   3F,W
056A:  MOVWF  53
056B:  CLRF   56
056C:  MOVF   36,W
056D:  MOVWF  55
056E:  CALL   514
056F:  MOVF   79,W
0570:  MOVWF  52
0571:  MOVF   78,W
0572:  MOVWF  51
0573:  MOVF   3E,W
0574:  MOVWF  54
0575:  MOVF   3D,W
0576:  MOVWF  53
0577:  CLRF   56
0578:  MOVF   37,W
0579:  MOVWF  55
057A:  CALL   514
057B:  MOVF   79,W
057C:  MOVWF  7A
057D:  MOVF   78,W
057E:  ADDWF  51,W
057F:  MOVWF  78
0580:  MOVF   52,W
0581:  BTFSC  03.0
0582:  INCFSZ 52,W
0583:  ADDWF  7A,F
0584:  MOVF   78,W
0585:  SUBLW  00
0586:  MOVWF  48
0587:  CLRF   49
0588:  MOVF   7A,W
0589:  BTFSS  03.0
058A:  INCFSZ 7A,W
058B:  SUBWF  49,F
....................    c2 = -(dx*x2 + dy*y2); 
058C:  MOVF   40,W
058D:  MOVWF  54
058E:  MOVF   3F,W
058F:  MOVWF  53
0590:  CLRF   56
0591:  MOVF   38,W
0592:  MOVWF  55
0593:  CALL   514
0594:  MOVF   79,W
0595:  MOVWF  52
0596:  MOVF   78,W
0597:  MOVWF  51
0598:  MOVF   3E,W
0599:  MOVWF  54
059A:  MOVF   3D,W
059B:  MOVWF  53
059C:  CLRF   56
059D:  MOVF   39,W
059E:  MOVWF  55
059F:  CALL   514
05A0:  MOVF   79,W
05A1:  MOVWF  7A
05A2:  MOVF   78,W
05A3:  ADDWF  51,W
05A4:  MOVWF  78
05A5:  MOVF   52,W
05A6:  BTFSC  03.0
05A7:  INCFSZ 52,W
05A8:  ADDWF  7A,F
05A9:  MOVF   78,W
05AA:  SUBLW  00
05AB:  MOVWF  4A
05AC:  CLRF   4B
05AD:  MOVF   7A,W
05AE:  BTFSS  03.0
05AF:  INCFSZ 7A,W
05B0:  SUBWF  4B,F
....................  
....................    if(x1 > x2) 
05B1:  MOVF   36,W
05B2:  SUBWF  38,W
05B3:  BTFSC  03.0
05B4:  GOTO   5C3
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
05B5:  MOVF   49,W
05B6:  MOVWF  4E
05B7:  MOVF   48,W
05B8:  MOVWF  4D
....................       c1 = c2; 
05B9:  MOVF   4B,W
05BA:  MOVWF  49
05BB:  MOVF   4A,W
05BC:  MOVWF  48
....................       c2 = temp; 
05BD:  MOVF   4E,W
05BE:  MOVWF  4B
05BF:  MOVF   4D,W
05C0:  MOVWF  4A
....................       addx = -1; 
05C1:  MOVLW  FF
05C2:  MOVWF  41
....................    } 
....................    if(y1 > y2) 
05C3:  MOVF   37,W
05C4:  SUBWF  39,W
05C5:  BTFSC  03.0
05C6:  GOTO   5D5
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
05C7:  MOVF   49,W
05C8:  MOVWF  50
05C9:  MOVF   48,W
05CA:  MOVWF  4F
....................       c1 = c2; 
05CB:  MOVF   4B,W
05CC:  MOVWF  49
05CD:  MOVF   4A,W
05CE:  MOVWF  48
....................       c2 = temp; 
05CF:  MOVF   50,W
05D0:  MOVWF  4B
05D1:  MOVF   4F,W
05D2:  MOVWF  4A
....................       addy = -1; 
05D3:  MOVLW  FF
05D4:  MOVWF  42
....................    } 
....................  
....................    if(dx >= dy) 
05D5:  BTFSS  3E.7
05D6:  GOTO   5DA
05D7:  BTFSS  40.7
05D8:  GOTO   5E6
05D9:  GOTO   5DC
05DA:  BTFSC  40.7
05DB:  GOTO   644
05DC:  MOVF   3E,W
05DD:  SUBWF  40,W
05DE:  BTFSS  03.0
05DF:  GOTO   644
05E0:  BTFSS  03.2
05E1:  GOTO   5E6
05E2:  MOVF   3D,W
05E3:  SUBWF  3F,W
05E4:  BTFSS  03.0
05E5:  GOTO   644
....................    { 
....................       P = 2*dy - dx; 
05E6:  CLRF   54
05E7:  MOVLW  02
05E8:  MOVWF  53
05E9:  MOVF   3E,W
05EA:  MOVWF  56
05EB:  MOVF   3D,W
05EC:  MOVWF  55
05ED:  CALL   514
05EE:  MOVF   3F,W
05EF:  SUBWF  78,W
05F0:  MOVWF  44
05F1:  MOVF   79,W
05F2:  MOVWF  45
05F3:  MOVF   40,W
05F4:  BTFSS  03.0
05F5:  INCFSZ 40,W
05F6:  SUBWF  45,F
....................       diff = P - dx; 
05F7:  MOVF   3F,W
05F8:  SUBWF  44,W
05F9:  MOVWF  46
05FA:  MOVF   45,W
05FB:  MOVWF  47
05FC:  MOVF   40,W
05FD:  BTFSS  03.0
05FE:  INCFSZ 40,W
05FF:  SUBWF  47,F
....................  
....................       for(i=0; i<=dx; ++i) 
0600:  CLRF   4C
0601:  BTFSC  40.7
0602:  GOTO   643
0603:  MOVF   40,F
0604:  BTFSS  03.2
0605:  GOTO   60A
0606:  MOVF   4C,W
0607:  SUBWF  3F,W
0608:  BTFSS  03.0
0609:  GOTO   643
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
060A:  MOVF   3C,W
060B:  SUBLW  00
060C:  MOVWF  43
060D:  MOVF   3A,W
060E:  ANDLW  01
060F:  ADDWF  3C,W
0610:  BTFSC  43.7
0611:  GOTO   615
0612:  SUBWF  43,W
0613:  BTFSC  03.0
0614:  GOTO   621
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
0615:  MOVF   43,W
0616:  ADDWF  37,W
0617:  MOVWF  51
0618:  MOVF   36,W
0619:  MOVWF  52
061A:  MOVF   51,W
061B:  MOVWF  53
061C:  MOVF   3B,W
061D:  MOVWF  54
061E:  CALL   2FE
061F:  INCF   43,F
0620:  GOTO   60D
....................          } 
....................          if(P < 0) 
0621:  BTFSS  45.7
0622:  GOTO   635
....................          { 
....................             P  += 2*dy; 
0623:  CLRF   54
0624:  MOVLW  02
0625:  MOVWF  53
0626:  MOVF   3E,W
0627:  MOVWF  56
0628:  MOVF   3D,W
0629:  MOVWF  55
062A:  CALL   514
062B:  MOVF   78,W
062C:  ADDWF  44,F
062D:  MOVF   79,W
062E:  BTFSC  03.0
062F:  INCFSZ 79,W
0630:  ADDWF  45,F
....................             x1 += addx; 
0631:  MOVF   41,W
0632:  ADDWF  36,W
0633:  MOVWF  36
....................          } 
0634:  GOTO   641
....................          else 
....................          { 
....................             P  += diff; 
0635:  MOVF   46,W
0636:  ADDWF  44,F
0637:  MOVF   47,W
0638:  BTFSC  03.0
0639:  INCFSZ 47,W
063A:  ADDWF  45,F
....................             x1 += addx; 
063B:  MOVF   41,W
063C:  ADDWF  36,W
063D:  MOVWF  36
....................             y1 += addy; 
063E:  MOVF   42,W
063F:  ADDWF  37,W
0640:  MOVWF  37
....................          } 
0641:  INCF   4C,F
0642:  GOTO   601
....................       } 
....................    } 
0643:  GOTO   6A0
....................    else 
....................    { 
....................       P = 2*dx - dy; 
0644:  CLRF   54
0645:  MOVLW  02
0646:  MOVWF  53
0647:  MOVF   40,W
0648:  MOVWF  56
0649:  MOVF   3F,W
064A:  MOVWF  55
064B:  CALL   514
064C:  MOVF   3D,W
064D:  SUBWF  78,W
064E:  MOVWF  44
064F:  MOVF   79,W
0650:  MOVWF  45
0651:  MOVF   3E,W
0652:  BTFSS  03.0
0653:  INCFSZ 3E,W
0654:  SUBWF  45,F
....................       diff = P - dy; 
0655:  MOVF   3D,W
0656:  SUBWF  44,W
0657:  MOVWF  46
0658:  MOVF   45,W
0659:  MOVWF  47
065A:  MOVF   3E,W
065B:  BTFSS  03.0
065C:  INCFSZ 3E,W
065D:  SUBWF  47,F
....................  
....................       for(i=0; i<=dy; ++i) 
065E:  CLRF   4C
065F:  BTFSC  3E.7
0660:  GOTO   6A0
0661:  MOVF   3E,F
0662:  BTFSS  03.2
0663:  GOTO   668
0664:  MOVF   4C,W
0665:  SUBWF  3D,W
0666:  BTFSS  03.0
0667:  GOTO   6A0
....................       { 
....................          if(P < 0) 
0668:  BTFSS  45.7
0669:  GOTO   67C
....................          { 
....................             P  += 2*dx; 
066A:  CLRF   54
066B:  MOVLW  02
066C:  MOVWF  53
066D:  MOVF   40,W
066E:  MOVWF  56
066F:  MOVF   3F,W
0670:  MOVWF  55
0671:  CALL   514
0672:  MOVF   78,W
0673:  ADDWF  44,F
0674:  MOVF   79,W
0675:  BTFSC  03.0
0676:  INCFSZ 79,W
0677:  ADDWF  45,F
....................             y1 += addy; 
0678:  MOVF   42,W
0679:  ADDWF  37,W
067A:  MOVWF  37
....................          } 
067B:  GOTO   688
....................          else 
....................          { 
....................             P  += diff; 
067C:  MOVF   46,W
067D:  ADDWF  44,F
067E:  MOVF   47,W
067F:  BTFSC  03.0
0680:  INCFSZ 47,W
0681:  ADDWF  45,F
....................             x1 += addx; 
0682:  MOVF   41,W
0683:  ADDWF  36,W
0684:  MOVWF  36
....................             y1 += addy; 
0685:  MOVF   42,W
0686:  ADDWF  37,W
0687:  MOVWF  37
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
0688:  MOVF   3C,W
0689:  SUBLW  00
068A:  MOVWF  43
068B:  MOVF   3A,W
068C:  ANDLW  01
068D:  ADDWF  3C,W
068E:  BTFSC  43.7
068F:  GOTO   693
0690:  SUBWF  43,W
0691:  BTFSC  03.0
0692:  GOTO   69E
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
0693:  MOVF   43,W
0694:  ADDWF  36,W
0695:  MOVWF  51
0696:  MOVWF  52
0697:  MOVF   37,W
0698:  MOVWF  53
0699:  MOVF   3B,W
069A:  MOVWF  54
069B:  CALL   2FE
069C:  INCF   43,F
069D:  GOTO   68B
....................          } 
069E:  INCF   4C,F
069F:  GOTO   65F
....................       } 
....................    } 
06A0:  BSF    0A.3
06A1:  BCF    0A.4
06A2:  GOTO   0D8 (RETURN)
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
06A3:  CLRF   3B
....................    b = radius; 
06A4:  MOVF   38,W
06A5:  MOVWF  3C
....................    P = 1 - radius; 
06A6:  MOVF   38,W
06A7:  SUBLW  01
06A8:  MOVWF  3D
....................  
....................    do 
....................    { 
....................       if(fill) 
06A9:  MOVF   39,F
06AA:  BTFSC  03.2
06AB:  GOTO   709
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
06AC:  MOVF   3B,W
06AD:  SUBWF  36,W
06AE:  MOVWF  3E
06AF:  MOVF   3C,W
06B0:  ADDWF  37,W
06B1:  MOVWF  3F
06B2:  MOVF   3B,W
06B3:  ADDWF  36,W
06B4:  MOVWF  40
06B5:  MOVF   3C,W
06B6:  ADDWF  37,W
06B7:  MOVWF  41
06B8:  MOVF   3E,W
06B9:  MOVWF  42
06BA:  MOVF   3F,W
06BB:  MOVWF  43
06BC:  MOVF   40,W
06BD:  MOVWF  44
06BE:  MOVF   41,W
06BF:  MOVWF  45
06C0:  MOVF   3A,W
06C1:  MOVWF  46
06C2:  CALL   45E
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
06C3:  MOVF   3B,W
06C4:  SUBWF  36,W
06C5:  MOVWF  3E
06C6:  MOVF   3C,W
06C7:  SUBWF  37,W
06C8:  MOVWF  3F
06C9:  MOVF   3B,W
06CA:  ADDWF  36,W
06CB:  MOVWF  40
06CC:  MOVF   3C,W
06CD:  SUBWF  37,W
06CE:  MOVWF  41
06CF:  MOVF   3E,W
06D0:  MOVWF  42
06D1:  MOVF   3F,W
06D2:  MOVWF  43
06D3:  MOVF   40,W
06D4:  MOVWF  44
06D5:  MOVF   41,W
06D6:  MOVWF  45
06D7:  MOVF   3A,W
06D8:  MOVWF  46
06D9:  CALL   45E
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
06DA:  MOVF   3C,W
06DB:  SUBWF  36,W
06DC:  MOVWF  3E
06DD:  MOVF   3B,W
06DE:  ADDWF  37,W
06DF:  MOVWF  3F
06E0:  MOVF   3C,W
06E1:  ADDWF  36,W
06E2:  MOVWF  40
06E3:  MOVF   3B,W
06E4:  ADDWF  37,W
06E5:  MOVWF  41
06E6:  MOVF   3E,W
06E7:  MOVWF  42
06E8:  MOVF   3F,W
06E9:  MOVWF  43
06EA:  MOVF   40,W
06EB:  MOVWF  44
06EC:  MOVF   41,W
06ED:  MOVWF  45
06EE:  MOVF   3A,W
06EF:  MOVWF  46
06F0:  CALL   45E
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
06F1:  MOVF   3C,W
06F2:  SUBWF  36,W
06F3:  MOVWF  3E
06F4:  MOVF   3B,W
06F5:  SUBWF  37,W
06F6:  MOVWF  3F
06F7:  MOVF   3C,W
06F8:  ADDWF  36,W
06F9:  MOVWF  40
06FA:  MOVF   3B,W
06FB:  SUBWF  37,W
06FC:  MOVWF  41
06FD:  MOVF   3E,W
06FE:  MOVWF  42
06FF:  MOVF   3F,W
0700:  MOVWF  43
0701:  MOVF   40,W
0702:  MOVWF  44
0703:  MOVF   41,W
0704:  MOVWF  45
0705:  MOVF   3A,W
0706:  MOVWF  46
0707:  CALL   45E
....................       } 
0708:  GOTO   771
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
0709:  MOVF   36,W
070A:  ADDWF  3B,W
070B:  MOVWF  3E
070C:  MOVF   37,W
070D:  ADDWF  3C,W
070E:  MOVWF  3F
070F:  MOVF   3E,W
0710:  MOVWF  52
0711:  MOVF   3F,W
0712:  MOVWF  53
0713:  MOVF   3A,W
0714:  MOVWF  54
0715:  CALL   2FE
....................          glcd_pixel(b+x, a+y, color); 
0716:  MOVF   36,W
0717:  ADDWF  3C,W
0718:  MOVWF  3E
0719:  MOVF   37,W
071A:  ADDWF  3B,W
071B:  MOVWF  3F
071C:  MOVF   3E,W
071D:  MOVWF  52
071E:  MOVF   3F,W
071F:  MOVWF  53
0720:  MOVF   3A,W
0721:  MOVWF  54
0722:  CALL   2FE
....................          glcd_pixel(x-a, b+y, color); 
0723:  MOVF   3B,W
0724:  SUBWF  36,W
0725:  MOVWF  3E
0726:  MOVF   37,W
0727:  ADDWF  3C,W
0728:  MOVWF  3F
0729:  MOVF   3E,W
072A:  MOVWF  52
072B:  MOVF   3F,W
072C:  MOVWF  53
072D:  MOVF   3A,W
072E:  MOVWF  54
072F:  CALL   2FE
....................          glcd_pixel(x-b, a+y, color); 
0730:  MOVF   3C,W
0731:  SUBWF  36,W
0732:  MOVWF  3E
0733:  MOVF   37,W
0734:  ADDWF  3B,W
0735:  MOVWF  3F
0736:  MOVF   3E,W
0737:  MOVWF  52
0738:  MOVF   3F,W
0739:  MOVWF  53
073A:  MOVF   3A,W
073B:  MOVWF  54
073C:  CALL   2FE
....................          glcd_pixel(b+x, y-a, color); 
073D:  MOVF   36,W
073E:  ADDWF  3C,W
073F:  MOVWF  3E
0740:  MOVF   3B,W
0741:  SUBWF  37,W
0742:  MOVWF  3F
0743:  MOVF   3E,W
0744:  MOVWF  52
0745:  MOVF   3F,W
0746:  MOVWF  53
0747:  MOVF   3A,W
0748:  MOVWF  54
0749:  CALL   2FE
....................          glcd_pixel(a+x, y-b, color); 
074A:  MOVF   36,W
074B:  ADDWF  3B,W
074C:  MOVWF  3E
074D:  MOVF   3C,W
074E:  SUBWF  37,W
074F:  MOVWF  3F
0750:  MOVF   3E,W
0751:  MOVWF  52
0752:  MOVF   3F,W
0753:  MOVWF  53
0754:  MOVF   3A,W
0755:  MOVWF  54
0756:  CALL   2FE
....................          glcd_pixel(x-a, y-b, color); 
0757:  MOVF   3B,W
0758:  SUBWF  36,W
0759:  MOVWF  3E
075A:  MOVF   3C,W
075B:  SUBWF  37,W
075C:  MOVWF  3F
075D:  MOVF   3E,W
075E:  MOVWF  52
075F:  MOVF   3F,W
0760:  MOVWF  53
0761:  MOVF   3A,W
0762:  MOVWF  54
0763:  CALL   2FE
....................          glcd_pixel(x-b, y-a, color); 
0764:  MOVF   3C,W
0765:  SUBWF  36,W
0766:  MOVWF  3E
0767:  MOVF   3B,W
0768:  SUBWF  37,W
0769:  MOVWF  3F
076A:  MOVF   3E,W
076B:  MOVWF  52
076C:  MOVF   3F,W
076D:  MOVWF  53
076E:  MOVF   3A,W
076F:  MOVWF  54
0770:  CALL   2FE
....................       } 
....................  
....................       if(P < 0) 
0771:  BTFSS  3D.7
0772:  GOTO   77F
....................          P += 3 + 2 * a++; 
0773:  MOVF   3B,W
0774:  INCF   3B,F
0775:  MOVWF  3E
0776:  MOVLW  02
0777:  MOVWF  47
0778:  MOVF   3E,W
0779:  MOVWF  48
077A:  CALL   21B
077B:  MOVF   78,W
077C:  ADDLW  03
077D:  ADDWF  3D,F
077E:  GOTO   78E
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
077F:  MOVF   3B,W
0780:  INCF   3B,F
0781:  MOVWF  3E
0782:  MOVF   3C,W
0783:  DECF   3C,F
0784:  SUBWF  3E,W
0785:  MOVWF  3E
0786:  MOVLW  02
0787:  MOVWF  47
0788:  MOVF   3E,W
0789:  MOVWF  48
078A:  CALL   21B
078B:  MOVF   78,W
078C:  ADDLW  05
078D:  ADDWF  3D,F
....................     } while(a <= b); 
078E:  MOVF   3B,W
078F:  XORLW  80
0790:  MOVWF  77
0791:  MOVF   3C,W
0792:  XORLW  80
0793:  SUBWF  77,W
0794:  BTFSC  03.2
0795:  GOTO   6A9
0796:  BTFSS  03.0
0797:  GOTO   6A9
0798:  BSF    0A.3
0799:  BCF    0A.4
079A:  GOTO   0FD (RETURN)
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
0374:  MOVF   39,W
0375:  MOVWF  7A
0376:  MOVF   38,W
0377:  MOVWF  04
0378:  BCF    03.7
0379:  BTFSC  7A.0
037A:  BSF    03.7
037B:  MOVF   00,F
037C:  BTFSC  03.2
037D:  GOTO   449
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
037E:  MOVF   39,W
037F:  MOVWF  7A
0380:  MOVF   38,W
0381:  MOVWF  04
0382:  BCF    03.7
0383:  BTFSC  7A.0
0384:  BSF    03.7
0385:  MOVF   00,W
0386:  SUBLW  52
0387:  BTFSS  03.0
0388:  GOTO   3A7
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
0389:  MOVF   39,W
038A:  MOVWF  7A
038B:  MOVF   38,W
038C:  MOVWF  04
038D:  BCF    03.7
038E:  BTFSC  7A.0
038F:  BSF    03.7
0390:  MOVLW  20
0391:  SUBWF  00,W
0392:  MOVWF  46
0393:  MOVWF  47
0394:  MOVLW  05
0395:  MOVWF  48
0396:  CALL   21B
0397:  MOVF   78,W
0398:  MOVWF  45
0399:  MOVWF  78
039A:  MOVLW  05
039B:  MOVWF  77
039C:  MOVLW  40
039D:  MOVWF  04
039E:  BCF    03.7
039F:  MOVF   78,W
03A0:  CALL   004
03A1:  MOVWF  00
03A2:  INCF   78,F
03A3:  INCF   04,F
03A4:  DECFSZ 77,F
03A5:  GOTO   39F
03A6:  GOTO   3D5
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
03A7:  MOVF   39,W
03A8:  MOVWF  7A
03A9:  MOVF   38,W
03AA:  MOVWF  04
03AB:  BCF    03.7
03AC:  BTFSC  7A.0
03AD:  BSF    03.7
03AE:  MOVF   00,W
03AF:  SUBLW  7E
03B0:  BTFSS  03.0
03B1:  GOTO   3D0
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
03B2:  MOVF   39,W
03B3:  MOVWF  7A
03B4:  MOVF   38,W
03B5:  MOVWF  04
03B6:  BCF    03.7
03B7:  BTFSC  7A.0
03B8:  BSF    03.7
03B9:  MOVLW  53
03BA:  SUBWF  00,W
03BB:  MOVWF  46
03BC:  MOVWF  47
03BD:  MOVLW  05
03BE:  MOVWF  48
03BF:  CALL   21B
03C0:  MOVF   78,W
03C1:  MOVWF  45
03C2:  MOVWF  78
03C3:  MOVLW  05
03C4:  MOVWF  77
03C5:  MOVLW  40
03C6:  MOVWF  04
03C7:  BCF    03.7
03C8:  MOVF   78,W
03C9:  CALL   10A
03CA:  MOVWF  00
03CB:  INCF   78,F
03CC:  INCF   04,F
03CD:  DECFSZ 77,F
03CE:  GOTO   3C8
03CF:  GOTO   3D5
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
03D0:  CLRF   40
03D1:  CLRF   41
03D2:  CLRF   42
03D3:  CLRF   43
03D4:  CLRF   44
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
03D5:  MOVF   39,W
03D6:  MOVWF  7A
03D7:  MOVF   38,W
03D8:  MOVWF  04
03D9:  BCF    03.7
03DA:  BTFSC  7A.0
03DB:  BSF    03.7
03DC:  MOVF   00,W
03DD:  XORLW  0A
03DE:  BTFSC  03.2
03DF:  GOTO   3E4
03E0:  XORLW  07
03E1:  BTFSC  03.2
03E2:  GOTO   3ED
03E3:  GOTO   3EF
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
03E4:  MOVLW  07
03E5:  MOVWF  47
03E6:  MOVF   3A,W
03E7:  MOVWF  48
03E8:  CALL   21B
03E9:  MOVLW  01
03EA:  ADDWF  78,W
03EB:  ADDWF  37,F
....................             continue; 
03EC:  GOTO   444
....................          case '\r': 
....................             x = 0; 
03ED:  CLRF   36
....................             continue; 
03EE:  GOTO   444
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
03EF:  MOVLW  05
03F0:  MOVWF  47
03F1:  MOVF   3A,W
03F2:  MOVWF  48
03F3:  CALL   21B
03F4:  MOVF   78,W
03F5:  ADDWF  36,W
03F6:  SUBLW  7F
03F7:  BTFSC  03.0
03F8:  GOTO   402
....................       { 
....................          x = 0;                           // Set x at far left position 
03F9:  CLRF   36
....................          y += 7*size + 1;                 // Set y at next position down 
03FA:  MOVLW  07
03FB:  MOVWF  47
03FC:  MOVF   3A,W
03FD:  MOVWF  48
03FE:  CALL   21B
03FF:  MOVLW  01
0400:  ADDWF  78,W
0401:  ADDWF  37,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
0402:  CLRF   3C
0403:  MOVF   3C,W
0404:  SUBLW  04
0405:  BTFSS  03.0
0406:  GOTO   444
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
0407:  CLRF   3D
0408:  MOVF   3D,W
0409:  SUBLW  06
040A:  BTFSS  03.0
040B:  GOTO   440
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
040C:  MOVLW  40
040D:  ADDWF  3C,W
040E:  MOVWF  04
040F:  BCF    03.7
0410:  MOVF   00,W
0411:  MOVWF  45
0412:  MOVWF  77
0413:  MOVF   3D,W
0414:  MOVWF  78
0415:  BTFSC  03.2
0416:  GOTO   41B
0417:  BCF    03.0
0418:  RRF    77,F
0419:  DECFSZ 78,F
041A:  GOTO   417
041B:  BTFSS  77.0
041C:  GOTO   43E
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
041D:  CLRF   3E
041E:  MOVF   3A,W
041F:  SUBWF  3E,W
0420:  BTFSC  03.0
0421:  GOTO   43E
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
0422:  CLRF   3F
0423:  MOVF   3A,W
0424:  SUBWF  3F,W
0425:  BTFSC  03.0
0426:  GOTO   43C
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
0427:  MOVF   3F,W
0428:  ADDWF  36,W
0429:  MOVWF  45
042A:  MOVF   3D,W
042B:  MOVWF  47
042C:  MOVF   3A,W
042D:  MOVWF  48
042E:  CALL   21B
042F:  MOVF   78,W
0430:  ADDWF  37,W
0431:  ADDWF  3E,W
0432:  MOVWF  46
0433:  MOVF   45,W
0434:  MOVWF  52
0435:  MOVF   46,W
0436:  MOVWF  53
0437:  MOVF   3B,W
0438:  MOVWF  54
0439:  CALL   2FE
043A:  INCF   3F,F
043B:  GOTO   423
....................                   } 
043C:  INCF   3E,F
043D:  GOTO   41E
....................                } 
....................             } 
043E:  INCF   3D,F
043F:  GOTO   408
....................          } 
0440:  INCF   3C,F
0441:  MOVF   3A,W
0442:  ADDWF  36,F
0443:  GOTO   403
....................       } 
0444:  INCF   38,F
0445:  BTFSC  03.2
0446:  INCF   39,F
0447:  INCF   36,F
0448:  GOTO   374
....................    } 
0449:  RETURN
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... char yazi1[] = "GAZI"; 
*
080A:  MOVLW  47
080B:  BCF    03.5
080C:  MOVWF  21
080D:  MOVLW  41
080E:  MOVWF  22
080F:  MOVLW  5A
0810:  MOVWF  23
0811:  MOVLW  49
0812:  MOVWF  24
0813:  CLRF   25
.................... char yazi2[] = "UNIVERSITY"; 
0814:  MOVLW  55
0815:  MOVWF  26
0816:  MOVLW  4E
0817:  MOVWF  27
0818:  MOVLW  49
0819:  MOVWF  28
081A:  MOVLW  56
081B:  MOVWF  29
081C:  MOVLW  45
081D:  MOVWF  2A
081E:  MOVLW  52
081F:  MOVWF  2B
0820:  MOVLW  53
0821:  MOVWF  2C
0822:  MOVLW  49
0823:  MOVWF  2D
0824:  MOVLW  54
0825:  MOVWF  2E
0826:  MOVLW  59
0827:  MOVWF  2F
0828:  CLRF   30
.................... int i, x1, y1, x2, y2; 
....................  
.................... void main() 
*
0800:  MOVLW  FF
0801:  MOVWF  20
0802:  BSF    03.5
0803:  BSF    1F.0
0804:  BSF    1F.1
0805:  BSF    1F.2
0806:  BCF    1F.3
0807:  BCF    03.7
0808:  MOVLW  1F
0809:  ANDWF  03,F
.................... { 
....................    setup_psp(PSP_DISABLED); 
*
0829:  BSF    03.5
082A:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
082B:  BCF    03.5
082C:  CLRF   10
....................    setup_timer_2(T2_DISABLED, 0, 1); 
082D:  MOVLW  00
082E:  MOVWF  78
082F:  MOVWF  12
0830:  MOVLW  00
0831:  BSF    03.5
0832:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
0833:  BSF    1F.0
0834:  BSF    1F.1
0835:  BSF    1F.2
0836:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0837:  BCF    03.5
0838:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
0839:  MOVLW  F0
083A:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF);  
083B:  ANDWF  1D,F
....................     
....................    glcd_init(ON); 
083C:  MOVLW  01
083D:  MOVWF  36
083E:  BCF    0A.3
083F:  CALL   240
0840:  BSF    0A.3
....................     
....................    while(true){ 
....................       glcd_init(ON); 
0841:  MOVLW  01
0842:  MOVWF  36
0843:  BCF    0A.3
0844:  CALL   240
0845:  BSF    0A.3
....................       glcd_text57(39, 5, yazi1, 2, ON); 
0846:  MOVLW  27
0847:  MOVWF  36
0848:  MOVLW  05
0849:  MOVWF  37
084A:  CLRF   39
084B:  MOVLW  21
084C:  MOVWF  38
084D:  MOVLW  02
084E:  MOVWF  3A
084F:  MOVLW  01
0850:  MOVWF  3B
0851:  BCF    0A.3
0852:  CALL   374
0853:  BSF    0A.3
....................       glcd_text57(5, 30, yazi2, 2, ON); 
0854:  MOVLW  05
0855:  MOVWF  36
0856:  MOVLW  1E
0857:  MOVWF  37
0858:  CLRF   39
0859:  MOVLW  26
085A:  MOVWF  38
085B:  MOVLW  02
085C:  MOVWF  3A
085D:  MOVLW  01
085E:  MOVWF  3B
085F:  BCF    0A.3
0860:  CALL   374
0861:  BSF    0A.3
....................       delay_ms(2000); 
0862:  MOVLW  08
0863:  MOVWF  36
0864:  MOVLW  FA
0865:  MOVWF  37
0866:  BCF    0A.3
0867:  CALL   44A
0868:  BSF    0A.3
0869:  DECFSZ 36,F
086A:  GOTO   064
....................        
....................       glcd_init(ON); 
086B:  MOVLW  01
086C:  MOVWF  36
086D:  BCF    0A.3
086E:  CALL   240
086F:  BSF    0A.3
....................       x1 = 5; 
0870:  MOVLW  05
0871:  MOVWF  32
....................       y1 = 5; 
0872:  MOVWF  33
....................       x2 = 100; 
0873:  MOVLW  64
0874:  MOVWF  34
....................       y2 = 5; 
0875:  MOVLW  05
0876:  MOVWF  35
....................        
....................       for(i = 1; i <= 6; i++){ 
0877:  MOVLW  01
0878:  MOVWF  31
0879:  MOVF   31,W
087A:  SUBLW  06
087B:  BTFSS  03.0
087C:  GOTO   09B
....................         
....................       glcd_line(x1, y1, x2, y2, ON); 
087D:  MOVF   32,W
087E:  MOVWF  42
087F:  MOVF   33,W
0880:  MOVWF  43
0881:  MOVF   34,W
0882:  MOVWF  44
0883:  MOVF   35,W
0884:  MOVWF  45
0885:  MOVLW  01
0886:  MOVWF  46
0887:  BCF    0A.3
0888:  CALL   45E
0889:  BSF    0A.3
....................         
....................       y2 = y1 += 10; 
088A:  MOVLW  0A
088B:  ADDWF  33,F
088C:  MOVF   33,W
088D:  MOVWF  35
....................        x2 -= 10; 
088E:  MOVLW  0A
088F:  SUBWF  34,F
....................        delay_ms(1000); 
0890:  MOVLW  04
0891:  MOVWF  36
0892:  MOVLW  FA
0893:  MOVWF  37
0894:  BCF    0A.3
0895:  CALL   44A
0896:  BSF    0A.3
0897:  DECFSZ 36,F
0898:  GOTO   092
0899:  INCF   31,F
089A:  GOTO   079
....................      } 
....................       glcd_init(ON); 
089B:  MOVLW  01
089C:  MOVWF  36
089D:  BCF    0A.3
089E:  CALL   240
089F:  BSF    0A.3
....................        
....................       x1 = y1 = 10; 
08A0:  MOVLW  0A
08A1:  MOVWF  33
08A2:  MOVWF  32
....................        
....................       for(i = 1; i <= 120; i++){ 
08A3:  MOVLW  01
08A4:  MOVWF  31
08A5:  MOVF   31,W
08A6:  SUBLW  78
08A7:  BTFSS  03.0
08A8:  GOTO   0BC
....................          glcd_pixel(x1, y1, ON); 
08A9:  MOVF   32,W
08AA:  MOVWF  52
08AB:  MOVF   33,W
08AC:  MOVWF  53
08AD:  MOVLW  01
08AE:  MOVWF  54
08AF:  BCF    0A.3
08B0:  CALL   2FE
08B1:  BSF    0A.3
....................           
....................          y1 = x1++; 
08B2:  MOVF   32,W
08B3:  INCF   32,F
08B4:  MOVWF  33
....................          delay_ms(50); 
08B5:  MOVLW  32
08B6:  MOVWF  37
08B7:  BCF    0A.3
08B8:  CALL   44A
08B9:  BSF    0A.3
08BA:  INCF   31,F
08BB:  GOTO   0A5
....................      } 
....................      glcd_init(ON); 
08BC:  MOVLW  01
08BD:  MOVWF  36
08BE:  BCF    0A.3
08BF:  CALL   240
08C0:  BSF    0A.3
....................       
....................      x1 = 5; 
08C1:  MOVLW  05
08C2:  MOVWF  32
....................      y2 = 60; 
08C3:  MOVLW  3C
08C4:  MOVWF  35
....................       
....................      for(i = 1; i <= 8; i++){ 
08C5:  MOVLW  01
08C6:  MOVWF  31
08C7:  MOVF   31,W
08C8:  SUBLW  08
08C9:  BTFSS  03.0
08CA:  GOTO   0E8
....................         glcd_bar(x1, 0, x1, y2, 10, ON); 
08CB:  MOVF   32,W
08CC:  MOVWF  36
08CD:  CLRF   37
08CE:  MOVF   32,W
08CF:  MOVWF  38
08D0:  MOVF   35,W
08D1:  MOVWF  39
08D2:  MOVLW  0A
08D3:  MOVWF  3A
08D4:  MOVLW  01
08D5:  MOVWF  3B
08D6:  BCF    0A.3
08D7:  GOTO   542
08D8:  BSF    0A.3
....................         delay_ms(1000); 
08D9:  MOVLW  04
08DA:  MOVWF  36
08DB:  MOVLW  FA
08DC:  MOVWF  37
08DD:  BCF    0A.3
08DE:  CALL   44A
08DF:  BSF    0A.3
08E0:  DECFSZ 36,F
08E1:  GOTO   0DB
....................         x1 += 15; 
08E2:  MOVLW  0F
08E3:  ADDWF  32,F
....................         y2 -= 5; 
08E4:  MOVLW  05
08E5:  SUBWF  35,F
08E6:  INCF   31,F
08E7:  GOTO   0C7
....................      } 
....................      glcd_init(ON); 
08E8:  MOVLW  01
08E9:  MOVWF  36
08EA:  BCF    0A.3
08EB:  CALL   240
08EC:  BSF    0A.3
....................       
....................      for(i = 0; i <= 30; i += 5){ 
08ED:  CLRF   31
08EE:  MOVF   31,W
08EF:  SUBLW  1E
08F0:  BTFSS  03.0
08F1:  GOTO   10A
....................         glcd_circle(60, 30, i, NO, ON); 
08F2:  MOVLW  3C
08F3:  MOVWF  36
08F4:  MOVLW  1E
08F5:  MOVWF  37
08F6:  MOVF   31,W
08F7:  MOVWF  38
08F8:  CLRF   39
08F9:  MOVLW  01
08FA:  MOVWF  3A
08FB:  BCF    0A.3
08FC:  GOTO   6A3
08FD:  BSF    0A.3
....................         delay_ms(1000); 
08FE:  MOVLW  04
08FF:  MOVWF  36
0900:  MOVLW  FA
0901:  MOVWF  37
0902:  BCF    0A.3
0903:  CALL   44A
0904:  BSF    0A.3
0905:  DECFSZ 36,F
0906:  GOTO   100
0907:  MOVLW  05
0908:  ADDWF  31,F
0909:  GOTO   0EE
....................      } 
....................      glcd_init(ON); 
090A:  MOVLW  01
090B:  MOVWF  36
090C:  BCF    0A.3
090D:  CALL   240
090E:  BSF    0A.3
....................       
....................      x1 = 5; 
090F:  MOVLW  05
0910:  MOVWF  32
....................      y1 = 5; 
0911:  MOVWF  33
....................      x2 = 120; 
0912:  MOVLW  78
0913:  MOVWF  34
....................      y2 = 63; 
0914:  MOVLW  3F
0915:  MOVWF  35
....................       
....................      for(i = 1; i <= 6; i++){ 
0916:  MOVLW  01
0917:  MOVWF  31
0918:  MOVF   31,W
0919:  SUBLW  06
091A:  BTFSS  03.0
091B:  GOTO   13C
....................         glcd_rect(x1, y1, x2, y2, NO, ON); 
091C:  MOVF   32,W
091D:  MOVWF  36
091E:  MOVF   33,W
091F:  MOVWF  37
0920:  MOVF   34,W
0921:  MOVWF  38
0922:  MOVF   35,W
0923:  MOVWF  39
0924:  CLRF   3A
0925:  MOVLW  01
0926:  MOVWF  3B
0927:  BCF    0A.3
0928:  GOTO   79B
0929:  BSF    0A.3
....................          
....................         y1 = x1 += 5; 
092A:  MOVLW  05
092B:  ADDWF  32,F
092C:  MOVF   32,W
092D:  MOVWF  33
....................         x2 -= 5; 
092E:  MOVLW  05
092F:  SUBWF  34,F
....................         y2 -= 5; 
0930:  SUBWF  35,F
....................         delay_ms(500); 
0931:  MOVLW  02
0932:  MOVWF  36
0933:  MOVLW  FA
0934:  MOVWF  37
0935:  BCF    0A.3
0936:  CALL   44A
0937:  BSF    0A.3
0938:  DECFSZ 36,F
0939:  GOTO   133
093A:  INCF   31,F
093B:  GOTO   118
....................      } 
093C:  GOTO   041
....................       
....................    } 
....................     
.................... } 
....................  
093D:  SLEEP
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
